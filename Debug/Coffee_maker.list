
Coffee_maker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08008850  08008850  00018850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a04  08008a04  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008a04  08008a04  00018a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a0c  08008a0c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  20000084  08008a98  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  08008a98  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2d0  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003679  00000000  00000000  0003e384  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b88  00000000  00000000  00041a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019d0  00000000  00000000  00043588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ac47  00000000  00000000  00044f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014fec  00000000  00000000  0006fb9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108be3  00000000  00000000  00084b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018d76e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dd4  00000000  00000000  0018d7ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008838 	.word	0x08008838

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08008838 	.word	0x08008838

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <I2Cx_MspInit+0xa8>)
 800058a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058c:	4a26      	ldr	r2, [pc, #152]	; (8000628 <I2Cx_MspInit+0xa8>)
 800058e:	f043 0302 	orr.w	r3, r3, #2
 8000592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <I2Cx_MspInit+0xa8>)
 8000596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000598:	f003 0302 	and.w	r3, r3, #2
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80005a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005a4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80005a6:	2312      	movs	r3, #18
 80005a8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ae:	2303      	movs	r3, #3
 80005b0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80005b2:	2304      	movs	r3, #4
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	481b      	ldr	r0, [pc, #108]	; (800062c <I2Cx_MspInit+0xac>)
 80005be:	f001 ff9d 	bl	80024fc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	4818      	ldr	r0, [pc, #96]	; (800062c <I2Cx_MspInit+0xac>)
 80005ca:	f001 ff97 	bl	80024fc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005d8:	6593      	str	r3, [r2, #88]	; 0x58
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005f6:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <I2Cx_MspInit+0xa8>)
 80005f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80005fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	210f      	movs	r1, #15
 8000602:	2021      	movs	r0, #33	; 0x21
 8000604:	f001 fe37 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000608:	2021      	movs	r0, #33	; 0x21
 800060a:	f001 fe50 	bl	80022ae <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	210f      	movs	r1, #15
 8000612:	2022      	movs	r0, #34	; 0x22
 8000614:	f001 fe2f 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000618:	2022      	movs	r0, #34	; 0x22
 800061a:	f001 fe48 	bl	80022ae <HAL_NVIC_EnableIRQ>
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400

08000630 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <I2Cx_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a11      	ldr	r2, [pc, #68]	; (8000688 <I2Cx_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2201      	movs	r2, #1
 800064e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ff89 	bl	8000580 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f002 fa4d 	bl	8002b0e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000674:	2100      	movs	r1, #0
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f002 ff52 	bl	8003520 <HAL_I2CEx_ConfigAnalogFilter>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40005800 	.word	0x40005800
 8000688:	00702681 	.word	0x00702681

0800068c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af04      	add	r7, sp, #16
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	4608      	mov	r0, r1
 8000696:	4611      	mov	r1, r2
 8000698:	461a      	mov	r2, r3
 800069a:	4603      	mov	r3, r0
 800069c:	72fb      	strb	r3, [r7, #11]
 800069e:	460b      	mov	r3, r1
 80006a0:	813b      	strh	r3, [r7, #8]
 80006a2:	4613      	mov	r3, r2
 80006a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	b299      	uxth	r1, r3
 80006ae:	88f8      	ldrh	r0, [r7, #6]
 80006b0:	893a      	ldrh	r2, [r7, #8]
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	9302      	str	r3, [sp, #8]
 80006b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	4603      	mov	r3, r0
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f002 fbf6 	bl	8002eb4 <HAL_I2C_Mem_Read>
 80006c8:	4603      	mov	r3, r0
 80006ca:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d004      	beq.n	80006dc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	4619      	mov	r1, r3
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f000 f832 	bl	8000740 <I2Cx_Error>
  }
  return status;
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b08a      	sub	sp, #40	; 0x28
 80006ea:	af04      	add	r7, sp, #16
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	4608      	mov	r0, r1
 80006f0:	4611      	mov	r1, r2
 80006f2:	461a      	mov	r2, r3
 80006f4:	4603      	mov	r3, r0
 80006f6:	72fb      	strb	r3, [r7, #11]
 80006f8:	460b      	mov	r3, r1
 80006fa:	813b      	strh	r3, [r7, #8]
 80006fc:	4613      	mov	r3, r2
 80006fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000700:	2300      	movs	r3, #0
 8000702:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000704:	7afb      	ldrb	r3, [r7, #11]
 8000706:	b299      	uxth	r1, r3
 8000708:	88f8      	ldrh	r0, [r7, #6]
 800070a:	893a      	ldrh	r2, [r7, #8]
 800070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000710:	9302      	str	r3, [sp, #8]
 8000712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	6a3b      	ldr	r3, [r7, #32]
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	4603      	mov	r3, r0
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f002 fab5 	bl	8002c8c <HAL_I2C_Mem_Write>
 8000722:	4603      	mov	r3, r0
 8000724:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d004      	beq.n	8000736 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	4619      	mov	r1, r3
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f000 f805 	bl	8000740 <I2Cx_Error>
  }
  return status;
 8000736:	7dfb      	ldrb	r3, [r7, #23]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f002 fa6d 	bl	8002c2c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ff6c 	bl	8000630 <I2Cx_Init>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <SENSOR_IO_Init+0x10>)
 8000766:	f7ff ff63 	bl	8000630 <I2Cx_Init>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000015c 	.word	0x2000015c

08000774 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af02      	add	r7, sp, #8
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	460b      	mov	r3, r1
 8000780:	71bb      	strb	r3, [r7, #6]
 8000782:	4613      	mov	r3, r2
 8000784:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	b29a      	uxth	r2, r3
 800078a:	79f9      	ldrb	r1, [r7, #7]
 800078c:	2301      	movs	r3, #1
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	1d7b      	adds	r3, r7, #5
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2301      	movs	r3, #1
 8000796:	4803      	ldr	r0, [pc, #12]	; (80007a4 <SENSOR_IO_Write+0x30>)
 8000798:	f7ff ffa5 	bl	80006e6 <I2Cx_WriteMultiple>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000015c 	.word	0x2000015c

080007a8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af02      	add	r7, sp, #8
 80007ae:	4603      	mov	r3, r0
 80007b0:	460a      	mov	r2, r1
 80007b2:	71fb      	strb	r3, [r7, #7]
 80007b4:	4613      	mov	r3, r2
 80007b6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	b29a      	uxth	r2, r3
 80007c0:	79f9      	ldrb	r1, [r7, #7]
 80007c2:	2301      	movs	r3, #1
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	f107 030f 	add.w	r3, r7, #15
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <SENSOR_IO_Read+0x38>)
 80007d0:	f7ff ff5c 	bl	800068c <I2Cx_ReadMultiple>

  return read_value;
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000015c 	.word	0x2000015c

080007e4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	603a      	str	r2, [r7, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	460b      	mov	r3, r1
 80007f4:	71bb      	strb	r3, [r7, #6]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	79f9      	ldrb	r1, [r7, #7]
 8000800:	88bb      	ldrh	r3, [r7, #4]
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2301      	movs	r3, #1
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <SENSOR_IO_ReadMultiple+0x38>)
 800080c:	f7ff ff3e 	bl	800068c <I2Cx_ReadMultiple>
 8000810:	4603      	mov	r3, r0
 8000812:	b29b      	uxth	r3, r3
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000015c 	.word	0x2000015c

08000820 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <BSP_TSENSOR_Init+0x30>)
 800082c:	4a09      	ldr	r2, [pc, #36]	; (8000854 <BSP_TSENSOR_Init+0x34>)
 800082e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8000830:	f7ff ff96 	bl	8000760 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <BSP_TSENSOR_Init+0x30>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2100      	movs	r1, #0
 800083c:	20be      	movs	r0, #190	; 0xbe
 800083e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8000844:	79fb      	ldrb	r3, [r7, #7]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000a0 	.word	0x200000a0
 8000854:	20000000 	.word	0x20000000

08000858 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <BSP_TSENSOR_ReadTemp+0x18>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	20be      	movs	r0, #190	; 0xbe
 8000864:	4798      	blx	r3
 8000866:	eef0 7a40 	vmov.f32	s15, s0
}
 800086a:	eeb0 0a67 	vmov.f32	s0, s15
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000a0 	.word	0x200000a0

08000874 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000880:	88fb      	ldrh	r3, [r7, #6]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2120      	movs	r1, #32
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff8e 	bl	80007a8 <SENSOR_IO_Read>
 800088c:	4603      	mov	r3, r0
 800088e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	f023 0304 	bic.w	r3, r3, #4
 8000896:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	f023 0303 	bic.w	r3, r3, #3
 80008a6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008b6:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80008b8:	88fb      	ldrh	r3, [r7, #6]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	7bfa      	ldrb	r2, [r7, #15]
 80008be:	2120      	movs	r1, #32
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff57 	bl	8000774 <SENSOR_IO_Write>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b088      	sub	sp, #32
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	b2d8      	uxtb	r0, r3
 80008dc:	f107 0208 	add.w	r2, r7, #8
 80008e0:	2302      	movs	r3, #2
 80008e2:	21b2      	movs	r1, #178	; 0xb2
 80008e4:	f7ff ff7e 	bl	80007e4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2135      	movs	r1, #53	; 0x35
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff5a 	bl	80007a8 <SENSOR_IO_Read>
 80008f4:	4603      	mov	r3, r0
 80008f6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80008f8:	7ffb      	ldrb	r3, [r7, #31]
 80008fa:	021b      	lsls	r3, r3, #8
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000902:	b21a      	sxth	r2, r3
 8000904:	7a3b      	ldrb	r3, [r7, #8]
 8000906:	b21b      	sxth	r3, r3
 8000908:	4313      	orrs	r3, r2
 800090a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800090c:	7ffb      	ldrb	r3, [r7, #31]
 800090e:	019b      	lsls	r3, r3, #6
 8000910:	b21b      	sxth	r3, r3
 8000912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000916:	b21a      	sxth	r2, r3
 8000918:	7a7b      	ldrb	r3, [r7, #9]
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8000920:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000924:	10db      	asrs	r3, r3, #3
 8000926:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8000928:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800092c:	10db      	asrs	r3, r3, #3
 800092e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	b2d8      	uxtb	r0, r3
 8000934:	f107 0208 	add.w	r2, r7, #8
 8000938:	2304      	movs	r3, #4
 800093a:	21bc      	movs	r1, #188	; 0xbc
 800093c:	f7ff ff52 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000940:	7a7b      	ldrb	r3, [r7, #9]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b21a      	sxth	r2, r3
 8000946:	7a3b      	ldrb	r3, [r7, #8]
 8000948:	b21b      	sxth	r3, r3
 800094a:	4313      	orrs	r3, r2
 800094c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800094e:	7afb      	ldrb	r3, [r7, #11]
 8000950:	021b      	lsls	r3, r3, #8
 8000952:	b21a      	sxth	r2, r3
 8000954:	7abb      	ldrb	r3, [r7, #10]
 8000956:	b21b      	sxth	r3, r3
 8000958:	4313      	orrs	r3, r2
 800095a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	b2d8      	uxtb	r0, r3
 8000960:	f107 0208 	add.w	r2, r7, #8
 8000964:	2302      	movs	r3, #2
 8000966:	21aa      	movs	r1, #170	; 0xaa
 8000968:	f7ff ff3c 	bl	80007e4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800096c:	7a7b      	ldrb	r3, [r7, #9]
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b21a      	sxth	r2, r3
 8000972:	7a3b      	ldrb	r3, [r7, #8]
 8000974:	b21b      	sxth	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800097a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800097e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	ee07 3a90 	vmov	s15, r3
 8000988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800098c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000990:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	ee07 3a90 	vmov	s15, r3
 800099a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800099e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80009a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80009a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80009b8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80009bc:	ee07 3a90 	vmov	s15, r3
 80009c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c8:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	ee07 3a90 	vmov	s15, r3
}
 80009d2:	eeb0 0a67 	vmov.f32	s0, s15
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e6:	2003      	movs	r0, #3
 80009e8:	f001 fc3a 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ec:	2000      	movs	r0, #0
 80009ee:	f000 f80d 	bl	8000a0c <HAL_InitTick>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d002      	beq.n	80009fe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	71fb      	strb	r3, [r7, #7]
 80009fc:	e001      	b.n	8000a02 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009fe:	f006 fbed 	bl	80071dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_InitTick+0x68>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d022      	beq.n	8000a66 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_InitTick+0x6c>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <HAL_InitTick+0x68>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fc48 	bl	80022ca <HAL_SYSTICK_Config>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10f      	bne.n	8000a60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b0f      	cmp	r3, #15
 8000a44:	d809      	bhi.n	8000a5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a46:	2200      	movs	r2, #0
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4e:	f001 fc12 	bl	8002276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_InitTick+0x70>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	e007      	b.n	8000a6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
 8000a5e:	e004      	b.n	8000a6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	e001      	b.n	8000a6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000014 	.word	0x20000014
 8000a78:	2000001c 	.word	0x2000001c
 8000a7c:	20000010 	.word	0x20000010

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x1c>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a03      	ldr	r2, [pc, #12]	; (8000a9c <HAL_IncTick+0x1c>)
 8000a90:	6013      	str	r3, [r2, #0]
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	200001a8 	.word	0x200001a8
 8000aa0:	20000014 	.word	0x20000014

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200001a8 	.word	0x200001a8

08000abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac4:	f7ff ffee 	bl	8000aa4 <HAL_GetTick>
 8000ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad4:	d004      	beq.n	8000ae0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_Delay+0x40>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	4413      	add	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae0:	bf00      	nop
 8000ae2:	f7ff ffdf 	bl	8000aa4 <HAL_GetTick>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d8f7      	bhi.n	8000ae2 <HAL_Delay+0x26>
  {
  }
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000014 	.word	0x20000014

08000b00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	431a      	orrs	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	609a      	str	r2, [r3, #8]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b68:	b490      	push	{r4, r7}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3360      	adds	r3, #96	; 0x60
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000b84:	6822      	ldr	r2, [r4, #0]
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <LL_ADC_SetOffset+0x40>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	4313      	orrs	r3, r2
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc90      	pop	{r4, r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	03fff000 	.word	0x03fff000

08000bac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000bac:	b490      	push	{r4, r7}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3360      	adds	r3, #96	; 0x60
 8000bba:	461a      	mov	r2, r3
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc90      	pop	{r4, r7}
 8000bd2:	4770      	bx	lr

08000bd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000bd4:	b490      	push	{r4, r7}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	3360      	adds	r3, #96	; 0x60
 8000be4:	461a      	mov	r2, r3
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc90      	pop	{r4, r7}
 8000c02:	4770      	bx	lr

08000c04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c2a:	b490      	push	{r4, r7}
 8000c2c:	b084      	sub	sp, #16
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3330      	adds	r3, #48	; 0x30
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	0a1b      	lsrs	r3, r3, #8
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	4413      	add	r3, r2
 8000c48:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000c4a:	6822      	ldr	r2, [r4, #0]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	f003 031f 	and.w	r3, r3, #31
 8000c52:	211f      	movs	r1, #31
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	0e9b      	lsrs	r3, r3, #26
 8000c60:	f003 011f 	and.w	r1, r3, #31
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	f003 031f 	and.w	r3, r3, #31
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc90      	pop	{r4, r7}
 8000c7a:	4770      	bx	lr

08000c7c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c7c:	b490      	push	{r4, r7}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3314      	adds	r3, #20
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	0e5b      	lsrs	r3, r3, #25
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	4413      	add	r3, r2
 8000c9a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000c9c:	6822      	ldr	r2, [r4, #0]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	0d1b      	lsrs	r3, r3, #20
 8000ca2:	f003 031f 	and.w	r3, r3, #31
 8000ca6:	2107      	movs	r1, #7
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	401a      	ands	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	0d1b      	lsrs	r3, r3, #20
 8000cb4:	f003 031f 	and.w	r3, r3, #31
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc90      	pop	{r4, r7}
 8000cca:	4770      	bx	lr

08000ccc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0318 	and.w	r3, r3, #24
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000cf0:	40d9      	lsrs	r1, r3
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	400b      	ands	r3, r1
 8000cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	0007ffff 	.word	0x0007ffff

08000d14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 031f 	and.w	r3, r3, #31
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6093      	str	r3, [r2, #8]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d84:	d101      	bne.n	8000d8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000dd4:	d101      	bne.n	8000dda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000df8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dfc:	f043 0201 	orr.w	r2, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e24:	f043 0202 	orr.w	r2, r3, #2
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d101      	bne.n	8000e50 <LL_ADC_IsEnabled+0x18>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <LL_ADC_IsEnabled+0x1a>
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d101      	bne.n	8000e76 <LL_ADC_IsDisableOngoing+0x18>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <LL_ADC_IsDisableOngoing+0x1a>
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e98:	f043 0204 	orr.w	r2, r3, #4
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ec0:	f043 0210 	orr.w	r2, r3, #16
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d101      	bne.n	8000eec <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f0e:	f043 0220 	orr.w	r2, r3, #32
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d101      	bne.n	8000f3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e134      	b.n	80011cc <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d109      	bne.n	8000f84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f006 f957 	bl	8007224 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fef1 	bl	8000d70 <LL_ADC_IsDeepPowerDownEnabled>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d004      	beq.n	8000f9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fed7 	bl	8000d4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff0c 	bl	8000dc0 <LL_ADC_IsInternalRegulatorEnabled>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d113      	bne.n	8000fd6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fef0 	bl	8000d98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000fb8:	4b86      	ldr	r3, [pc, #536]	; (80011d4 <HAL_ADC_Init+0x28c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	099b      	lsrs	r3, r3, #6
 8000fbe:	4a86      	ldr	r2, [pc, #536]	; (80011d8 <HAL_ADC_Init+0x290>)
 8000fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc4:	099b      	lsrs	r3, r3, #6
 8000fc6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fc8:	e002      	b.n	8000fd0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f9      	bne.n	8000fca <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fef0 	bl	8000dc0 <LL_ADC_IsInternalRegulatorEnabled>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10d      	bne.n	8001002 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fea:	f043 0210 	orr.w	r2, r3, #16
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	f043 0201 	orr.w	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff64 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 800100c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 80cf 	bne.w	80011ba <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 80cb 	bne.w	80011ba <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001028:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800102c:	f043 0202 	orr.w	r2, r3, #2
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fefd 	bl	8000e38 <LL_ADC_IsEnabled>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d115      	bne.n	8001070 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001044:	4865      	ldr	r0, [pc, #404]	; (80011dc <HAL_ADC_Init+0x294>)
 8001046:	f7ff fef7 	bl	8000e38 <LL_ADC_IsEnabled>
 800104a:	4604      	mov	r4, r0
 800104c:	4864      	ldr	r0, [pc, #400]	; (80011e0 <HAL_ADC_Init+0x298>)
 800104e:	f7ff fef3 	bl	8000e38 <LL_ADC_IsEnabled>
 8001052:	4603      	mov	r3, r0
 8001054:	431c      	orrs	r4, r3
 8001056:	4863      	ldr	r0, [pc, #396]	; (80011e4 <HAL_ADC_Init+0x29c>)
 8001058:	f7ff feee 	bl	8000e38 <LL_ADC_IsEnabled>
 800105c:	4603      	mov	r3, r0
 800105e:	4323      	orrs	r3, r4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d105      	bne.n	8001070 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4619      	mov	r1, r3
 800106a:	485f      	ldr	r0, [pc, #380]	; (80011e8 <HAL_ADC_Init+0x2a0>)
 800106c:	f7ff fd48 	bl	8000b00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7e5b      	ldrb	r3, [r3, #25]
 8001074:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800107a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001080:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001086:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800108e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d106      	bne.n	80010ac <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	3b01      	subs	r3, #1
 80010a4:	045b      	lsls	r3, r3, #17
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d009      	beq.n	80010c8 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <HAL_ADC_Init+0x2a4>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	69b9      	ldr	r1, [r7, #24]
 80010d8:	430b      	orrs	r3, r1
 80010da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fef7 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 80010e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff18 	bl	8000f22 <LL_ADC_INJ_IsConversionOngoing>
 80010f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d13d      	bne.n	8001176 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d13a      	bne.n	8001176 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001104:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800110c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800111c:	f023 0302 	bic.w	r3, r3, #2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	69b9      	ldr	r1, [r7, #24]
 8001126:	430b      	orrs	r3, r1
 8001128:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001130:	2b01      	cmp	r3, #1
 8001132:	d118      	bne.n	8001166 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800113e:	f023 0304 	bic.w	r3, r3, #4
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800114a:	4311      	orrs	r1, r2
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001150:	4311      	orrs	r1, r2
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001156:	430a      	orrs	r2, r1
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	e007      	b.n	8001176 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0201 	bic.w	r2, r2, #1
 8001174:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10c      	bne.n	8001198 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	f023 010f 	bic.w	r1, r3, #15
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
 8001196:	e007      	b.n	80011a8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 020f 	bic.w	r2, r2, #15
 80011a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ac:	f023 0303 	bic.w	r3, r3, #3
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	655a      	str	r2, [r3, #84]	; 0x54
 80011b8:	e007      	b.n	80011ca <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011be:	f043 0210 	orr.w	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3724      	adds	r7, #36	; 0x24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd90      	pop	{r4, r7, pc}
 80011d4:	2000001c 	.word	0x2000001c
 80011d8:	053e2d63 	.word	0x053e2d63
 80011dc:	50040000 	.word	0x50040000
 80011e0:	50040100 	.word	0x50040100
 80011e4:	50040200 	.word	0x50040200
 80011e8:	50040300 	.word	0x50040300
 80011ec:	fff0c007 	.word	0xfff0c007

080011f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011f8:	4857      	ldr	r0, [pc, #348]	; (8001358 <HAL_ADC_Start+0x168>)
 80011fa:	f7ff fd8b 	bl	8000d14 <LL_ADC_GetMultimode>
 80011fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fe65 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	f040 809c 	bne.w	800134a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_ADC_Start+0x30>
 800121c:	2302      	movs	r3, #2
 800121e:	e097      	b.n	8001350 <HAL_ADC_Start+0x160>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fdc5 	bl	8001db8 <ADC_Enable>
 800122e:	4603      	mov	r3, r0
 8001230:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001232:	7dfb      	ldrb	r3, [r7, #23]
 8001234:	2b00      	cmp	r3, #0
 8001236:	f040 8083 	bne.w	8001340 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001242:	f023 0301 	bic.w	r3, r3, #1
 8001246:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a42      	ldr	r2, [pc, #264]	; (800135c <HAL_ADC_Start+0x16c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d002      	beq.n	800125e <HAL_ADC_Start+0x6e>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	e000      	b.n	8001260 <HAL_ADC_Start+0x70>
 800125e:	4b40      	ldr	r3, [pc, #256]	; (8001360 <HAL_ADC_Start+0x170>)
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	4293      	cmp	r3, r2
 8001266:	d002      	beq.n	800126e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d105      	bne.n	800127a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001272:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800127e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001286:	d106      	bne.n	8001296 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128c:	f023 0206 	bic.w	r2, r3, #6
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	659a      	str	r2, [r3, #88]	; 0x58
 8001294:	e002      	b.n	800129c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	221c      	movs	r2, #28
 80012a2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a2a      	ldr	r2, [pc, #168]	; (800135c <HAL_ADC_Start+0x16c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d002      	beq.n	80012bc <HAL_ADC_Start+0xcc>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	e000      	b.n	80012be <HAL_ADC_Start+0xce>
 80012bc:	4b28      	ldr	r3, [pc, #160]	; (8001360 <HAL_ADC_Start+0x170>)
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d008      	beq.n	80012d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	2b05      	cmp	r3, #5
 80012d0:	d002      	beq.n	80012d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d114      	bne.n	8001302 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fdc2 	bl	8000e84 <LL_ADC_REG_StartConversion>
 8001300:	e025      	b.n	800134e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <HAL_ADC_Start+0x16c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d002      	beq.n	800131e <HAL_ADC_Start+0x12e>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	e000      	b.n	8001320 <HAL_ADC_Start+0x130>
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_ADC_Start+0x170>)
 8001320:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00f      	beq.n	800134e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001332:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001336:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	655a      	str	r2, [r3, #84]	; 0x54
 800133e:	e006      	b.n	800134e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001348:	e001      	b.n	800134e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800134a:	2302      	movs	r3, #2
 800134c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800134e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	50040300 	.word	0x50040300
 800135c:	50040100 	.word	0x50040100
 8001360:	50040000 	.word	0x50040000

08001364 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_ADC_Stop+0x16>
 8001376:	2302      	movs	r3, #2
 8001378:	e023      	b.n	80013c2 <HAL_ADC_Stop+0x5e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001382:	2103      	movs	r1, #3
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fc63 	bl	8001c50 <ADC_ConversionStop>
 800138a:	4603      	mov	r3, r0
 800138c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d111      	bne.n	80013b8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fd69 	bl	8001e6c <ADC_Disable>
 800139a:	4603      	mov	r3, r0
 800139c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d109      	bne.n	80013b8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013d6:	4862      	ldr	r0, [pc, #392]	; (8001560 <HAL_ADC_PollForConversion+0x194>)
 80013d8:	f7ff fc9c 	bl	8000d14 <LL_ADC_GetMultimode>
 80013dc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d102      	bne.n	80013ec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80013e6:	2308      	movs	r3, #8
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e02a      	b.n	8001442 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d002      	beq.n	80013fe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b09      	cmp	r3, #9
 80013fc:	d111      	bne.n	8001422 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d007      	beq.n	800141c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001410:	f043 0220 	orr.w	r2, r3, #32
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e09d      	b.n	8001558 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800141c:	2304      	movs	r3, #4
 800141e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001420:	e00f      	b.n	8001442 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001422:	484f      	ldr	r0, [pc, #316]	; (8001560 <HAL_ADC_PollForConversion+0x194>)
 8001424:	f7ff fc84 	bl	8000d30 <LL_ADC_GetMultiDMATransfer>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d007      	beq.n	800143e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001432:	f043 0220 	orr.w	r2, r3, #32
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e08c      	b.n	8001558 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800143e:	2304      	movs	r3, #4
 8001440:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001442:	f7ff fb2f 	bl	8000aa4 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001448:	e01a      	b.n	8001480 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001450:	d016      	beq.n	8001480 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001452:	f7ff fb27 	bl	8000aa4 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d302      	bcc.n	8001468 <HAL_ADC_PollForConversion+0x9c>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10b      	bne.n	8001480 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146c:	f043 0204 	orr.w	r2, r3, #4
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e06b      	b.n	8001558 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	4013      	ands	r3, r2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0dd      	beq.n	800144a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001492:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fbb0 	bl	8000c04 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01c      	beq.n	80014e4 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	7e5b      	ldrb	r3, [r3, #25]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d118      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d111      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d105      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <HAL_ADC_PollForConversion+0x198>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d002      	beq.n	80014f4 <HAL_ADC_PollForConversion+0x128>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	e000      	b.n	80014f6 <HAL_ADC_PollForConversion+0x12a>
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_ADC_PollForConversion+0x19c>)
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d008      	beq.n	8001510 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b05      	cmp	r3, #5
 8001508:	d002      	beq.n	8001510 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2b09      	cmp	r3, #9
 800150e:	d104      	bne.n	800151a <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	e00c      	b.n	8001534 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <HAL_ADC_PollForConversion+0x198>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d002      	beq.n	800152a <HAL_ADC_PollForConversion+0x15e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	e000      	b.n	800152c <HAL_ADC_PollForConversion+0x160>
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_ADC_PollForConversion+0x19c>)
 800152c:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	2b08      	cmp	r3, #8
 8001538:	d104      	bne.n	8001544 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2208      	movs	r2, #8
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e008      	b.n	8001556 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	220c      	movs	r2, #12
 8001554:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	50040300 	.word	0x50040300
 8001564:	50040100 	.word	0x50040100
 8001568:	50040000 	.word	0x50040000

0800156c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0a6      	sub	sp, #152	; 0x98
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x22>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e348      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x6b4>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fc8c 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f040 8329 	bne.w	8001c16 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d824      	bhi.n	8001616 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	3b02      	subs	r3, #2
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d81b      	bhi.n	800160e <HAL_ADC_ConfigChannel+0x86>
 80015d6:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <HAL_ADC_ConfigChannel+0x54>)
 80015d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015dc:	080015ed 	.word	0x080015ed
 80015e0:	080015f5 	.word	0x080015f5
 80015e4:	080015fd 	.word	0x080015fd
 80015e8:	08001605 	.word	0x08001605
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	220c      	movs	r2, #12
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	e011      	b.n	8001618 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2212      	movs	r2, #18
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	e00d      	b.n	8001618 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2218      	movs	r2, #24
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	e009      	b.n	8001618 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	e004      	b.n	8001618 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2206      	movs	r2, #6
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	e000      	b.n	8001618 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001616:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	f7ff fb00 	bl	8000c2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fc50 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 8001634:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fc70 	bl	8000f22 <LL_ADC_INJ_IsConversionOngoing>
 8001642:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001646:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800164a:	2b00      	cmp	r3, #0
 800164c:	f040 8148 	bne.w	80018e0 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001654:	2b00      	cmp	r3, #0
 8001656:	f040 8143 	bne.w	80018e0 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	461a      	mov	r2, r3
 8001668:	f7ff fb08 	bl	8000c7c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	08db      	lsrs	r3, r3, #3
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	2b04      	cmp	r3, #4
 800168c:	d00a      	beq.n	80016a4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	6919      	ldr	r1, [r3, #16]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800169e:	f7ff fa63 	bl	8000b68 <LL_ADC_SetOffset>
 80016a2:	e11d      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fa7e 	bl	8000bac <LL_ADC_GetOffsetChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10a      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x148>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fa73 	bl	8000bac <LL_ADC_GetOffsetChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	0e9b      	lsrs	r3, r3, #26
 80016ca:	f003 021f 	and.w	r2, r3, #31
 80016ce:	e012      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x16e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fa68 	bl	8000bac <LL_ADC_GetOffsetChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d105      	bne.n	800170e <HAL_ADC_ConfigChannel+0x186>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0e9b      	lsrs	r3, r3, #26
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	e00a      	b.n	8001724 <HAL_ADC_ConfigChannel+0x19c>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800171c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800171e:	fab3 f383 	clz	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	429a      	cmp	r2, r3
 8001726:	d106      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fa4f 	bl	8000bd4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2101      	movs	r1, #1
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fa35 	bl	8000bac <LL_ADC_GetOffsetChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10a      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x1da>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fa2a 	bl	8000bac <LL_ADC_GetOffsetChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	0e9b      	lsrs	r3, r3, #26
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	e010      	b.n	8001784 <HAL_ADC_ConfigChannel+0x1fc>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2101      	movs	r1, #1
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fa1f 	bl	8000bac <LL_ADC_GetOffsetChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800177a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <HAL_ADC_ConfigChannel+0x214>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0e9b      	lsrs	r3, r3, #26
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	e00a      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x22a>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80017aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d106      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	2101      	movs	r1, #1
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fa08 	bl	8000bd4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2102      	movs	r1, #2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f9ee 	bl	8000bac <LL_ADC_GetOffsetChannel>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10a      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x268>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2102      	movs	r1, #2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff f9e3 	bl	8000bac <LL_ADC_GetOffsetChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	0e9b      	lsrs	r3, r3, #26
 80017ea:	f003 021f 	and.w	r2, r3, #31
 80017ee:	e010      	b.n	8001812 <HAL_ADC_ConfigChannel+0x28a>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2102      	movs	r1, #2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff f9d8 	bl	8000bac <LL_ADC_GetOffsetChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800180a:	fab3 f383 	clz	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181a:	2b00      	cmp	r3, #0
 800181c:	d105      	bne.n	800182a <HAL_ADC_ConfigChannel+0x2a2>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0e9b      	lsrs	r3, r3, #26
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	e00a      	b.n	8001840 <HAL_ADC_ConfigChannel+0x2b8>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001832:	fa93 f3a3 	rbit	r3, r3
 8001836:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	429a      	cmp	r2, r3
 8001842:	d106      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	2102      	movs	r1, #2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff f9c1 	bl	8000bd4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2103      	movs	r1, #3
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff f9a7 	bl	8000bac <LL_ADC_GetOffsetChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10a      	bne.n	800187e <HAL_ADC_ConfigChannel+0x2f6>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2103      	movs	r1, #3
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f99c 	bl	8000bac <LL_ADC_GetOffsetChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	0e9b      	lsrs	r3, r3, #26
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	e010      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x318>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2103      	movs	r1, #3
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff f991 	bl	8000bac <LL_ADC_GetOffsetChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d105      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x330>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0e9b      	lsrs	r3, r3, #26
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	e00a      	b.n	80018ce <HAL_ADC_ConfigChannel+0x346>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018c0:	fa93 f3a3 	rbit	r3, r3
 80018c4:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80018c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d106      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2200      	movs	r2, #0
 80018d8:	2103      	movs	r1, #3
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f97a 	bl	8000bd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff faa7 	bl	8000e38 <LL_ADC_IsEnabled>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f040 810c 	bne.w	8001b0a <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6819      	ldr	r1, [r3, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	461a      	mov	r2, r3
 8001900:	f7ff f9e4 	bl	8000ccc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4aad      	ldr	r2, [pc, #692]	; (8001bc0 <HAL_ADC_ConfigChannel+0x638>)
 800190a:	4293      	cmp	r3, r2
 800190c:	f040 80fd 	bne.w	8001b0a <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10b      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x3b0>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0e9b      	lsrs	r3, r3, #26
 8001926:	3301      	adds	r3, #1
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	2b09      	cmp	r3, #9
 800192e:	bf94      	ite	ls
 8001930:	2301      	movls	r3, #1
 8001932:	2300      	movhi	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	e012      	b.n	800195e <HAL_ADC_ConfigChannel+0x3d6>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001948:	fab3 f383 	clz	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3301      	adds	r3, #1
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	2b09      	cmp	r3, #9
 8001956:	bf94      	ite	ls
 8001958:	2301      	movls	r3, #1
 800195a:	2300      	movhi	r3, #0
 800195c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800195e:	2b00      	cmp	r3, #0
 8001960:	d064      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196a:	2b00      	cmp	r3, #0
 800196c:	d107      	bne.n	800197e <HAL_ADC_ConfigChannel+0x3f6>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0e9b      	lsrs	r3, r3, #26
 8001974:	3301      	adds	r3, #1
 8001976:	069b      	lsls	r3, r3, #26
 8001978:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800197c:	e00e      	b.n	800199c <HAL_ADC_ConfigChannel+0x414>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800198c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	3301      	adds	r3, #1
 8001996:	069b      	lsls	r3, r3, #26
 8001998:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d109      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x434>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0e9b      	lsrs	r3, r3, #26
 80019ae:	3301      	adds	r3, #1
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2101      	movs	r1, #1
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	e010      	b.n	80019de <HAL_ADC_ConfigChannel+0x456>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	ea42 0103 	orr.w	r1, r2, r3
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10a      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x47c>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0e9b      	lsrs	r3, r3, #26
 80019f4:	3301      	adds	r3, #1
 80019f6:	f003 021f 	and.w	r2, r3, #31
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	051b      	lsls	r3, r3, #20
 8001a02:	e011      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x4a0>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4613      	mov	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4413      	add	r3, r2
 8001a26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	e069      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d107      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x4c0>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0e9b      	lsrs	r3, r3, #26
 8001a3e:	3301      	adds	r3, #1
 8001a40:	069b      	lsls	r3, r3, #26
 8001a42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a46:	e00e      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x4de>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	61fb      	str	r3, [r7, #28]
  return result;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	069b      	lsls	r3, r3, #26
 8001a62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x4fe>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	0e9b      	lsrs	r3, r3, #26
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	e010      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x520>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	617b      	str	r3, [r7, #20]
  return result;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	ea42 0103 	orr.w	r1, r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10d      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x54c>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	0e9b      	lsrs	r3, r3, #26
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f003 021f 	and.w	r2, r3, #31
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b1e      	subs	r3, #30
 8001acc:	051b      	lsls	r3, r3, #20
 8001ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	e014      	b.n	8001afe <HAL_ADC_ConfigChannel+0x576>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	60fb      	str	r3, [r7, #12]
  return result;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	3b1e      	subs	r3, #30
 8001af8:	051b      	lsls	r3, r3, #20
 8001afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001afe:	430b      	orrs	r3, r1
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	6892      	ldr	r2, [r2, #8]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7ff f8b9 	bl	8000c7c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <HAL_ADC_ConfigChannel+0x63c>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 808c 	beq.w	8001c30 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b18:	482b      	ldr	r0, [pc, #172]	; (8001bc8 <HAL_ADC_ConfigChannel+0x640>)
 8001b1a:	f7ff f817 	bl	8000b4c <LL_ADC_GetCommonPathInternalCh>
 8001b1e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <HAL_ADC_ConfigChannel+0x644>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d12b      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x5fc>
 8001b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d125      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <HAL_ADC_ConfigChannel+0x648>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_ADC_ConfigChannel+0x5c4>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a23      	ldr	r2, [pc, #140]	; (8001bd4 <HAL_ADC_ConfigChannel+0x64c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d16e      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b54:	4619      	mov	r1, r3
 8001b56:	481c      	ldr	r0, [pc, #112]	; (8001bc8 <HAL_ADC_ConfigChannel+0x640>)
 8001b58:	f7fe ffe5 	bl	8000b26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <HAL_ADC_ConfigChannel+0x650>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	099b      	lsrs	r3, r3, #6
 8001b62:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <HAL_ADC_ConfigChannel+0x654>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	099a      	lsrs	r2, r3, #6
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b74:	e002      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f9      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b82:	e052      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <HAL_ADC_ConfigChannel+0x658>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12a      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x65c>
 8001b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d124      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <HAL_ADC_ConfigChannel+0x648>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d004      	beq.n	8001bae <HAL_ADC_ConfigChannel+0x626>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_ADC_ConfigChannel+0x64c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d13f      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4803      	ldr	r0, [pc, #12]	; (8001bc8 <HAL_ADC_ConfigChannel+0x640>)
 8001bba:	f7fe ffb4 	bl	8000b26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bbe:	e036      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x6a6>
 8001bc0:	407f0000 	.word	0x407f0000
 8001bc4:	80080000 	.word	0x80080000
 8001bc8:	50040300 	.word	0x50040300
 8001bcc:	c7520000 	.word	0xc7520000
 8001bd0:	50040000 	.word	0x50040000
 8001bd4:	50040200 	.word	0x50040200
 8001bd8:	2000001c 	.word	0x2000001c
 8001bdc:	053e2d63 	.word	0x053e2d63
 8001be0:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a16      	ldr	r2, [pc, #88]	; (8001c44 <HAL_ADC_ConfigChannel+0x6bc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d120      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11a      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <HAL_ADC_ConfigChannel+0x6c0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d115      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480f      	ldr	r0, [pc, #60]	; (8001c4c <HAL_ADC_ConfigChannel+0x6c4>)
 8001c10:	f7fe ff89 	bl	8000b26 <LL_ADC_SetCommonPathInternalCh>
 8001c14:	e00c      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	f043 0220 	orr.w	r2, r3, #32
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001c28:	e002      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c2a:	bf00      	nop
 8001c2c:	e000      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c2e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c38:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3798      	adds	r7, #152	; 0x98
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	80000001 	.word	0x80000001
 8001c48:	50040000 	.word	0x50040000
 8001c4c:	50040300 	.word	0x50040300

08001c50 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f934 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 8001c6c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff f955 	bl	8000f22 <LL_ADC_INJ_IsConversionOngoing>
 8001c78:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d103      	bne.n	8001c88 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8090 	beq.w	8001da8 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d02a      	beq.n	8001cec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7e5b      	ldrb	r3, [r3, #25]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d126      	bne.n	8001cec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7e1b      	ldrb	r3, [r3, #24]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d122      	bne.n	8001cec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001caa:	e014      	b.n	8001cd6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	4a41      	ldr	r2, [pc, #260]	; (8001db4 <ADC_ConversionStop+0x164>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d90d      	bls.n	8001cd0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb8:	f043 0210 	orr.w	r2, r3, #16
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e06c      	b.n	8001daa <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce0:	2b40      	cmp	r3, #64	; 0x40
 8001ce2:	d1e3      	bne.n	8001cac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2240      	movs	r2, #64	; 0x40
 8001cea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d014      	beq.n	8001d1c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f8ec 	bl	8000ed4 <LL_ADC_REG_IsConversionOngoing>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00c      	beq.n	8001d1c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f8a9 	bl	8000e5e <LL_ADC_IsDisableOngoing>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d104      	bne.n	8001d1c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f8c8 	bl	8000eac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d014      	beq.n	8001d4c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f8fb 	bl	8000f22 <LL_ADC_INJ_IsConversionOngoing>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f891 	bl	8000e5e <LL_ADC_IsDisableOngoing>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d104      	bne.n	8001d4c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f8d7 	bl	8000efa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d004      	beq.n	8001d5c <ADC_ConversionStop+0x10c>
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d105      	bne.n	8001d62 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001d56:	230c      	movs	r3, #12
 8001d58:	617b      	str	r3, [r7, #20]
        break;
 8001d5a:	e005      	b.n	8001d68 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	617b      	str	r3, [r7, #20]
        break;
 8001d60:	e002      	b.n	8001d68 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001d62:	2304      	movs	r3, #4
 8001d64:	617b      	str	r3, [r7, #20]
        break;
 8001d66:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001d68:	f7fe fe9c 	bl	8000aa4 <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001d6e:	e014      	b.n	8001d9a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d70:	f7fe fe98 	bl	8000aa4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d90d      	bls.n	8001d9a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e007      	b.n	8001daa <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e3      	bne.n	8001d70 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	a33fffff 	.word	0xa33fffff

08001db8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff f837 	bl	8000e38 <LL_ADC_IsEnabled>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d146      	bne.n	8001e5e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <ADC_Enable+0xb0>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00d      	beq.n	8001dfa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	f043 0210 	orr.w	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	f043 0201 	orr.w	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e032      	b.n	8001e60 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fff2 	bl	8000de8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e04:	f7fe fe4e 	bl	8000aa4 <HAL_GetTick>
 8001e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e0a:	e021      	b.n	8001e50 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f811 	bl	8000e38 <LL_ADC_IsEnabled>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d104      	bne.n	8001e26 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ffe1 	bl	8000de8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e26:	f7fe fe3d 	bl	8000aa4 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d90d      	bls.n	8001e50 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e38:	f043 0210 	orr.w	r2, r3, #16
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	f043 0201 	orr.w	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e007      	b.n	8001e60 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d1d6      	bne.n	8001e0c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	8000003f 	.word	0x8000003f

08001e6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fff0 	bl	8000e5e <LL_ADC_IsDisableOngoing>
 8001e7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe ffd7 	bl	8000e38 <LL_ADC_IsEnabled>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d040      	beq.n	8001f12 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d13d      	bne.n	8001f12 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 030d 	and.w	r3, r3, #13
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d10c      	bne.n	8001ebe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe ffb1 	bl	8000e10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eb6:	f7fe fdf5 	bl	8000aa4 <HAL_GetTick>
 8001eba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ebc:	e022      	b.n	8001f04 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	f043 0210 	orr.w	r2, r3, #16
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	f043 0201 	orr.w	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e01c      	b.n	8001f14 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001eda:	f7fe fde3 	bl	8000aa4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d90d      	bls.n	8001f04 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eec:	f043 0210 	orr.w	r2, r3, #16
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e007      	b.n	8001f14 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1e3      	bne.n	8001eda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <LL_ADC_IsEnabled>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <LL_ADC_IsEnabled+0x18>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <LL_ADC_IsEnabled+0x1a>
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_ADC_REG_IsConversionOngoing>:
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d101      	bne.n	8001f5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b09f      	sub	sp, #124	; 0x7c
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e08f      	b.n	80020a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a47      	ldr	r2, [pc, #284]	; (80020b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d102      	bne.n	8001f9e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001f98:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	e001      	b.n	8001fa2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	f043 0220 	orr.w	r2, r3, #32
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e072      	b.n	80020a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ffbd 	bl	8001f42 <LL_ADC_REG_IsConversionOngoing>
 8001fc8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ffb7 	bl	8001f42 <LL_ADC_REG_IsConversionOngoing>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d154      	bne.n	8002084 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d151      	bne.n	8002084 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fe0:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001fe2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d02c      	beq.n	8002046 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ffe:	035b      	lsls	r3, r3, #13
 8002000:	430b      	orrs	r3, r1
 8002002:	431a      	orrs	r2, r3
 8002004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002006:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002008:	4829      	ldr	r0, [pc, #164]	; (80020b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800200a:	f7ff ff87 	bl	8001f1c <LL_ADC_IsEnabled>
 800200e:	4604      	mov	r4, r0
 8002010:	4828      	ldr	r0, [pc, #160]	; (80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002012:	f7ff ff83 	bl	8001f1c <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	431c      	orrs	r4, r3
 800201a:	4828      	ldr	r0, [pc, #160]	; (80020bc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800201c:	f7ff ff7e 	bl	8001f1c <LL_ADC_IsEnabled>
 8002020:	4603      	mov	r3, r0
 8002022:	4323      	orrs	r3, r4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d137      	bne.n	8002098 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002030:	f023 030f 	bic.w	r3, r3, #15
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	6811      	ldr	r1, [r2, #0]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	6892      	ldr	r2, [r2, #8]
 800203c:	430a      	orrs	r2, r1
 800203e:	431a      	orrs	r2, r3
 8002040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002042:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002044:	e028      	b.n	8002098 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800204e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002050:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002052:	4817      	ldr	r0, [pc, #92]	; (80020b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002054:	f7ff ff62 	bl	8001f1c <LL_ADC_IsEnabled>
 8002058:	4604      	mov	r4, r0
 800205a:	4816      	ldr	r0, [pc, #88]	; (80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800205c:	f7ff ff5e 	bl	8001f1c <LL_ADC_IsEnabled>
 8002060:	4603      	mov	r3, r0
 8002062:	431c      	orrs	r4, r3
 8002064:	4815      	ldr	r0, [pc, #84]	; (80020bc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002066:	f7ff ff59 	bl	8001f1c <LL_ADC_IsEnabled>
 800206a:	4603      	mov	r3, r0
 800206c:	4323      	orrs	r3, r4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d112      	bne.n	8002098 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800207a:	f023 030f 	bic.w	r3, r3, #15
 800207e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002080:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002082:	e009      	b.n	8002098 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002088:	f043 0220 	orr.w	r2, r3, #32
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002096:	e000      	b.n	800209a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002098:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	377c      	adds	r7, #124	; 0x7c
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	50040000 	.word	0x50040000
 80020b4:	50040100 	.word	0x50040100
 80020b8:	50040300 	.word	0x50040300
 80020bc:	50040200 	.word	0x50040200

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	; (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4907      	ldr	r1, [pc, #28]	; (800215c <__NVIC_EnableIRQ+0x38>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	; (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	; (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
         );
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f7ff ff8e 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff29 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002288:	f7ff ff3e 	bl	8002108 <__NVIC_GetPriorityGrouping>
 800228c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff ff8e 	bl	80021b4 <NVIC_EncodePriority>
 8002298:	4602      	mov	r2, r0
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff5d 	bl	8002160 <__NVIC_SetPriority>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff31 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa2 	bl	800221c <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0ac      	b.n	8002450 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f8b2 	bl	8002464 <DFSDM_GetChannelFromInstance>
 8002300:	4602      	mov	r2, r0
 8002302:	4b55      	ldr	r3, [pc, #340]	; (8002458 <HAL_DFSDM_ChannelInit+0x174>)
 8002304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e09f      	b.n	8002450 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f004 ffc7 	bl	80072a4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002316:	4b51      	ldr	r3, [pc, #324]	; (800245c <HAL_DFSDM_ChannelInit+0x178>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3301      	adds	r3, #1
 800231c:	4a4f      	ldr	r2, [pc, #316]	; (800245c <HAL_DFSDM_ChannelInit+0x178>)
 800231e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002320:	4b4e      	ldr	r3, [pc, #312]	; (800245c <HAL_DFSDM_ChannelInit+0x178>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d125      	bne.n	8002374 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002328:	4b4d      	ldr	r3, [pc, #308]	; (8002460 <HAL_DFSDM_ChannelInit+0x17c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a4c      	ldr	r2, [pc, #304]	; (8002460 <HAL_DFSDM_ChannelInit+0x17c>)
 800232e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002332:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002334:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_DFSDM_ChannelInit+0x17c>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4948      	ldr	r1, [pc, #288]	; (8002460 <HAL_DFSDM_ChannelInit+0x17c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_DFSDM_ChannelInit+0x17c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a46      	ldr	r2, [pc, #280]	; (8002460 <HAL_DFSDM_ChannelInit+0x17c>)
 8002348:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800234c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	791b      	ldrb	r3, [r3, #4]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d108      	bne.n	8002368 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002356:	4b42      	ldr	r3, [pc, #264]	; (8002460 <HAL_DFSDM_ChannelInit+0x17c>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	3b01      	subs	r3, #1
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	493f      	ldr	r1, [pc, #252]	; (8002460 <HAL_DFSDM_ChannelInit+0x17c>)
 8002364:	4313      	orrs	r3, r2
 8002366:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002368:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <HAL_DFSDM_ChannelInit+0x17c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a3c      	ldr	r2, [pc, #240]	; (8002460 <HAL_DFSDM_ChannelInit+0x17c>)
 800236e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002372:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002382:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6819      	ldr	r1, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002392:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002398:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 020f 	bic.w	r2, r2, #15
 80023b0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6819      	ldr	r1, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80023d8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6899      	ldr	r1, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	3b01      	subs	r3, #1
 80023ea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f002 0207 	and.w	r2, r2, #7
 8002404:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002430:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f810 	bl	8002464 <DFSDM_GetChannelFromInstance>
 8002444:	4601      	mov	r1, r0
 8002446:	4a04      	ldr	r2, [pc, #16]	; (8002458 <HAL_DFSDM_ChannelInit+0x174>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200000a8 	.word	0x200000a8
 800245c:	200000a4 	.word	0x200000a4
 8002460:	40016000 	.word	0x40016000

08002464 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d102      	bne.n	800247a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	e02b      	b.n	80024d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <DFSDM_GetChannelFromInstance+0x80>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d102      	bne.n	8002488 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002482:	2301      	movs	r3, #1
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e024      	b.n	80024d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <DFSDM_GetChannelFromInstance+0x84>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d102      	bne.n	8002496 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002490:	2302      	movs	r3, #2
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e01d      	b.n	80024d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a14      	ldr	r2, [pc, #80]	; (80024ec <DFSDM_GetChannelFromInstance+0x88>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d102      	bne.n	80024a4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800249e:	2304      	movs	r3, #4
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	e016      	b.n	80024d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <DFSDM_GetChannelFromInstance+0x8c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d102      	bne.n	80024b2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80024ac:	2305      	movs	r3, #5
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e00f      	b.n	80024d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a0f      	ldr	r2, [pc, #60]	; (80024f4 <DFSDM_GetChannelFromInstance+0x90>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d102      	bne.n	80024c0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80024ba:	2306      	movs	r3, #6
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	e008      	b.n	80024d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <DFSDM_GetChannelFromInstance+0x94>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d102      	bne.n	80024ce <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80024c8:	2307      	movs	r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e001      	b.n	80024d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80024ce:	2303      	movs	r3, #3
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40016000 	.word	0x40016000
 80024e4:	40016020 	.word	0x40016020
 80024e8:	40016040 	.word	0x40016040
 80024ec:	40016080 	.word	0x40016080
 80024f0:	400160a0 	.word	0x400160a0
 80024f4:	400160c0 	.word	0x400160c0
 80024f8:	400160e0 	.word	0x400160e0

080024fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250a:	e17f      	b.n	800280c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8171 	beq.w	8002806 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d00b      	beq.n	8002544 <HAL_GPIO_Init+0x48>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d007      	beq.n	8002544 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002538:	2b11      	cmp	r3, #17
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b12      	cmp	r3, #18
 8002542:	d130      	bne.n	80025a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800257a:	2201      	movs	r2, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 0201 	and.w	r2, r3, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d118      	bne.n	80025e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025b8:	2201      	movs	r2, #1
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f003 0201 	and.w	r2, r3, #1
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x128>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b12      	cmp	r3, #18
 8002622:	d123      	bne.n	800266c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	08da      	lsrs	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3208      	adds	r2, #8
 800262c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	08da      	lsrs	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3208      	adds	r2, #8
 8002666:	6939      	ldr	r1, [r7, #16]
 8002668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0203 	and.w	r2, r3, #3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80ac 	beq.w	8002806 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	4b5e      	ldr	r3, [pc, #376]	; (8002828 <HAL_GPIO_Init+0x32c>)
 80026b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b2:	4a5d      	ldr	r2, [pc, #372]	; (8002828 <HAL_GPIO_Init+0x32c>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6613      	str	r3, [r2, #96]	; 0x60
 80026ba:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <HAL_GPIO_Init+0x32c>)
 80026bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026c6:	4a59      	ldr	r2, [pc, #356]	; (800282c <HAL_GPIO_Init+0x330>)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3302      	adds	r3, #2
 80026ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	220f      	movs	r2, #15
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026f0:	d025      	beq.n	800273e <HAL_GPIO_Init+0x242>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4e      	ldr	r2, [pc, #312]	; (8002830 <HAL_GPIO_Init+0x334>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01f      	beq.n	800273a <HAL_GPIO_Init+0x23e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4d      	ldr	r2, [pc, #308]	; (8002834 <HAL_GPIO_Init+0x338>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d019      	beq.n	8002736 <HAL_GPIO_Init+0x23a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4c      	ldr	r2, [pc, #304]	; (8002838 <HAL_GPIO_Init+0x33c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_GPIO_Init+0x236>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4b      	ldr	r2, [pc, #300]	; (800283c <HAL_GPIO_Init+0x340>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00d      	beq.n	800272e <HAL_GPIO_Init+0x232>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4a      	ldr	r2, [pc, #296]	; (8002840 <HAL_GPIO_Init+0x344>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <HAL_GPIO_Init+0x22e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a49      	ldr	r2, [pc, #292]	; (8002844 <HAL_GPIO_Init+0x348>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_GPIO_Init+0x22a>
 8002722:	2306      	movs	r3, #6
 8002724:	e00c      	b.n	8002740 <HAL_GPIO_Init+0x244>
 8002726:	2307      	movs	r3, #7
 8002728:	e00a      	b.n	8002740 <HAL_GPIO_Init+0x244>
 800272a:	2305      	movs	r3, #5
 800272c:	e008      	b.n	8002740 <HAL_GPIO_Init+0x244>
 800272e:	2304      	movs	r3, #4
 8002730:	e006      	b.n	8002740 <HAL_GPIO_Init+0x244>
 8002732:	2303      	movs	r3, #3
 8002734:	e004      	b.n	8002740 <HAL_GPIO_Init+0x244>
 8002736:	2302      	movs	r3, #2
 8002738:	e002      	b.n	8002740 <HAL_GPIO_Init+0x244>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x244>
 800273e:	2300      	movs	r3, #0
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	f002 0203 	and.w	r2, r2, #3
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	4093      	lsls	r3, r2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002750:	4936      	ldr	r1, [pc, #216]	; (800282c <HAL_GPIO_Init+0x330>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800275e:	4b3a      	ldr	r3, [pc, #232]	; (8002848 <HAL_GPIO_Init+0x34c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002782:	4a31      	ldr	r2, [pc, #196]	; (8002848 <HAL_GPIO_Init+0x34c>)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002788:	4b2f      	ldr	r3, [pc, #188]	; (8002848 <HAL_GPIO_Init+0x34c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027ac:	4a26      	ldr	r2, [pc, #152]	; (8002848 <HAL_GPIO_Init+0x34c>)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b2:	4b25      	ldr	r3, [pc, #148]	; (8002848 <HAL_GPIO_Init+0x34c>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027d6:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <HAL_GPIO_Init+0x34c>)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <HAL_GPIO_Init+0x34c>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002800:	4a11      	ldr	r2, [pc, #68]	; (8002848 <HAL_GPIO_Init+0x34c>)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3301      	adds	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	f47f ae78 	bne.w	800250c <HAL_GPIO_Init+0x10>
  }
}
 800281c:	bf00      	nop
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40021000 	.word	0x40021000
 800282c:	40010000 	.word	0x40010000
 8002830:	48000400 	.word	0x48000400
 8002834:	48000800 	.word	0x48000800
 8002838:	48000c00 	.word	0x48000c00
 800283c:	48001000 	.word	0x48001000
 8002840:	48001400 	.word	0x48001400
 8002844:	48001800 	.word	0x48001800
 8002848:	40010400 	.word	0x40010400

0800284c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800285a:	e0cd      	b.n	80029f8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800285c:	2201      	movs	r2, #1
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80c0 	beq.w	80029f2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002872:	4a68      	ldr	r2, [pc, #416]	; (8002a14 <HAL_GPIO_DeInit+0x1c8>)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	220f      	movs	r2, #15
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800289a:	d025      	beq.n	80028e8 <HAL_GPIO_DeInit+0x9c>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a5e      	ldr	r2, [pc, #376]	; (8002a18 <HAL_GPIO_DeInit+0x1cc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d01f      	beq.n	80028e4 <HAL_GPIO_DeInit+0x98>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a5d      	ldr	r2, [pc, #372]	; (8002a1c <HAL_GPIO_DeInit+0x1d0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d019      	beq.n	80028e0 <HAL_GPIO_DeInit+0x94>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a5c      	ldr	r2, [pc, #368]	; (8002a20 <HAL_GPIO_DeInit+0x1d4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d013      	beq.n	80028dc <HAL_GPIO_DeInit+0x90>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a5b      	ldr	r2, [pc, #364]	; (8002a24 <HAL_GPIO_DeInit+0x1d8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00d      	beq.n	80028d8 <HAL_GPIO_DeInit+0x8c>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a5a      	ldr	r2, [pc, #360]	; (8002a28 <HAL_GPIO_DeInit+0x1dc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <HAL_GPIO_DeInit+0x88>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a59      	ldr	r2, [pc, #356]	; (8002a2c <HAL_GPIO_DeInit+0x1e0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <HAL_GPIO_DeInit+0x84>
 80028cc:	2306      	movs	r3, #6
 80028ce:	e00c      	b.n	80028ea <HAL_GPIO_DeInit+0x9e>
 80028d0:	2307      	movs	r3, #7
 80028d2:	e00a      	b.n	80028ea <HAL_GPIO_DeInit+0x9e>
 80028d4:	2305      	movs	r3, #5
 80028d6:	e008      	b.n	80028ea <HAL_GPIO_DeInit+0x9e>
 80028d8:	2304      	movs	r3, #4
 80028da:	e006      	b.n	80028ea <HAL_GPIO_DeInit+0x9e>
 80028dc:	2303      	movs	r3, #3
 80028de:	e004      	b.n	80028ea <HAL_GPIO_DeInit+0x9e>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e002      	b.n	80028ea <HAL_GPIO_DeInit+0x9e>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_GPIO_DeInit+0x9e>
 80028e8:	2300      	movs	r3, #0
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	f002 0203 	and.w	r2, r2, #3
 80028f0:	0092      	lsls	r2, r2, #2
 80028f2:	4093      	lsls	r3, r2
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d132      	bne.n	8002960 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80028fa:	4b4d      	ldr	r3, [pc, #308]	; (8002a30 <HAL_GPIO_DeInit+0x1e4>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	43db      	mvns	r3, r3
 8002902:	494b      	ldr	r1, [pc, #300]	; (8002a30 <HAL_GPIO_DeInit+0x1e4>)
 8002904:	4013      	ands	r3, r2
 8002906:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002908:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_GPIO_DeInit+0x1e4>)
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	4947      	ldr	r1, [pc, #284]	; (8002a30 <HAL_GPIO_DeInit+0x1e4>)
 8002912:	4013      	ands	r3, r2
 8002914:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002916:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_GPIO_DeInit+0x1e4>)
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	4944      	ldr	r1, [pc, #272]	; (8002a30 <HAL_GPIO_DeInit+0x1e4>)
 8002920:	4013      	ands	r3, r2
 8002922:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002924:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <HAL_GPIO_DeInit+0x1e4>)
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	4940      	ldr	r1, [pc, #256]	; (8002a30 <HAL_GPIO_DeInit+0x1e4>)
 800292e:	4013      	ands	r3, r2
 8002930:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	220f      	movs	r2, #15
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002942:	4a34      	ldr	r2, [pc, #208]	; (8002a14 <HAL_GPIO_DeInit+0x1c8>)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	3302      	adds	r3, #2
 800294a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	43da      	mvns	r2, r3
 8002952:	4830      	ldr	r0, [pc, #192]	; (8002a14 <HAL_GPIO_DeInit+0x1c8>)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	400a      	ands	r2, r1
 800295a:	3302      	adds	r3, #2
 800295c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2103      	movs	r1, #3
 800296a:	fa01 f303 	lsl.w	r3, r1, r3
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	08da      	lsrs	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3208      	adds	r2, #8
 800297c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	08d2      	lsrs	r2, r2, #3
 8002994:	4019      	ands	r1, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2103      	movs	r1, #3
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	401a      	ands	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	2101      	movs	r1, #1
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	401a      	ands	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	2103      	movs	r1, #3
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	401a      	ands	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e2:	2101      	movs	r1, #1
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	401a      	ands	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3301      	adds	r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f47f af2b 	bne.w	800285c <HAL_GPIO_DeInit+0x10>
  }
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40010000 	.word	0x40010000
 8002a18:	48000400 	.word	0x48000400
 8002a1c:	48000800 	.word	0x48000800
 8002a20:	48000c00 	.word	0x48000c00
 8002a24:	48001000 	.word	0x48001000
 8002a28:	48001400 	.word	0x48001400
 8002a2c:	48001800 	.word	0x48001800
 8002a30:	40010400 	.word	0x40010400

08002a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	887b      	ldrh	r3, [r7, #2]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	e001      	b.n	8002a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
 8002a70:	4613      	mov	r3, r2
 8002a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a74:	787b      	ldrb	r3, [r7, #1]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	887b      	ldrh	r3, [r7, #2]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aac:	887a      	ldrh	r2, [r7, #2]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002ab2:	e002      	b.n	8002aba <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ab4:	887a      	ldrh	r2, [r7, #2]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	619a      	str	r2, [r3, #24]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ade:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f806 	bl	8002af8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40010400 	.word	0x40010400

08002af8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e081      	b.n	8002c24 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d106      	bne.n	8002b3a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f004 fbf9 	bl	800732c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2224      	movs	r2, #36	; 0x24
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d107      	bne.n	8002b88 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	e006      	b.n	8002b96 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b94:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d104      	bne.n	8002ba8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ba6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	ea42 0103 	orr.w	r1, r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	021a      	lsls	r2, r3, #8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69d9      	ldr	r1, [r3, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1a      	ldr	r2, [r3, #32]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e021      	b.n	8002c82 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2224      	movs	r2, #36	; 0x24
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f004 fbac 	bl	80073b4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	817b      	strh	r3, [r7, #10]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	813b      	strh	r3, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	f040 80f9 	bne.w	8002ea6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_I2C_Mem_Write+0x34>
 8002cba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0ed      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_I2C_Mem_Write+0x4e>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e0e6      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ce2:	f7fd fedf 	bl	8000aa4 <HAL_GetTick>
 8002ce6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2319      	movs	r3, #25
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 fac3 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0d1      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2221      	movs	r2, #33	; 0x21
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2240      	movs	r2, #64	; 0x40
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a3a      	ldr	r2, [r7, #32]
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d2c:	88f8      	ldrh	r0, [r7, #6]
 8002d2e:	893a      	ldrh	r2, [r7, #8]
 8002d30:	8979      	ldrh	r1, [r7, #10]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f9d3 	bl	80030e8 <I2C_RequestMemoryWrite>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0a9      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2bff      	cmp	r3, #255	; 0xff
 8002d5c:	d90e      	bls.n	8002d7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	22ff      	movs	r2, #255	; 0xff
 8002d62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	8979      	ldrh	r1, [r7, #10]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fba5 	bl	80034c4 <I2C_TransferConfig>
 8002d7a:	e00f      	b.n	8002d9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	8979      	ldrh	r1, [r7, #10]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fb94 	bl	80034c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 faad 	bl	8003300 <I2C_WaitOnTXISFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e07b      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d034      	beq.n	8002e54 <HAL_I2C_Mem_Write+0x1c8>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d130      	bne.n	8002e54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2180      	movs	r1, #128	; 0x80
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fa3f 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e04d      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2bff      	cmp	r3, #255	; 0xff
 8002e14:	d90e      	bls.n	8002e34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	22ff      	movs	r2, #255	; 0xff
 8002e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	8979      	ldrh	r1, [r7, #10]
 8002e24:	2300      	movs	r3, #0
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fb49 	bl	80034c4 <I2C_TransferConfig>
 8002e32:	e00f      	b.n	8002e54 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	8979      	ldrh	r1, [r7, #10]
 8002e46:	2300      	movs	r3, #0
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fb38 	bl	80034c4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d19e      	bne.n	8002d9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fa8c 	bl	8003380 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e01a      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2220      	movs	r2, #32
 8002e78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <HAL_I2C_Mem_Write+0x224>)
 8002e86:	400b      	ands	r3, r1
 8002e88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
  }
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	fe00e800 	.word	0xfe00e800

08002eb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	817b      	strh	r3, [r7, #10]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	813b      	strh	r3, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	f040 80fd 	bne.w	80030d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_I2C_Mem_Read+0x34>
 8002ee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0f1      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_I2C_Mem_Read+0x4e>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0ea      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f0a:	f7fd fdcb 	bl	8000aa4 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	2319      	movs	r3, #25
 8002f16:	2201      	movs	r2, #1
 8002f18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f9af 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0d5      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2222      	movs	r2, #34	; 0x22
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2240      	movs	r2, #64	; 0x40
 8002f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a3a      	ldr	r2, [r7, #32]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f54:	88f8      	ldrh	r0, [r7, #6]
 8002f56:	893a      	ldrh	r2, [r7, #8]
 8002f58:	8979      	ldrh	r1, [r7, #10]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	4603      	mov	r3, r0
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f913 	bl	8003190 <I2C_RequestMemoryRead>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0ad      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2bff      	cmp	r3, #255	; 0xff
 8002f84:	d90e      	bls.n	8002fa4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	8979      	ldrh	r1, [r7, #10]
 8002f94:	4b52      	ldr	r3, [pc, #328]	; (80030e0 <HAL_I2C_Mem_Read+0x22c>)
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fa91 	bl	80034c4 <I2C_TransferConfig>
 8002fa2:	e00f      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	8979      	ldrh	r1, [r7, #10]
 8002fb6:	4b4a      	ldr	r3, [pc, #296]	; (80030e0 <HAL_I2C_Mem_Read+0x22c>)
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fa80 	bl	80034c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2104      	movs	r1, #4
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f956 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07c      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d034      	beq.n	8003084 <HAL_I2C_Mem_Read+0x1d0>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	2b00      	cmp	r3, #0
 8003020:	d130      	bne.n	8003084 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	2200      	movs	r2, #0
 800302a:	2180      	movs	r1, #128	; 0x80
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f927 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e04d      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29b      	uxth	r3, r3
 8003042:	2bff      	cmp	r3, #255	; 0xff
 8003044:	d90e      	bls.n	8003064 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	22ff      	movs	r2, #255	; 0xff
 800304a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	b2da      	uxtb	r2, r3
 8003052:	8979      	ldrh	r1, [r7, #10]
 8003054:	2300      	movs	r3, #0
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fa31 	bl	80034c4 <I2C_TransferConfig>
 8003062:	e00f      	b.n	8003084 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	b2da      	uxtb	r2, r3
 8003074:	8979      	ldrh	r1, [r7, #10]
 8003076:	2300      	movs	r3, #0
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa20 	bl	80034c4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d19a      	bne.n	8002fc4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f974 	bl	8003380 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e01a      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2220      	movs	r2, #32
 80030a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_I2C_Mem_Read+0x230>)
 80030b6:	400b      	ands	r3, r1
 80030b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	e000      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
  }
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	80002400 	.word	0x80002400
 80030e4:	fe00e800 	.word	0xfe00e800

080030e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	4608      	mov	r0, r1
 80030f2:	4611      	mov	r1, r2
 80030f4:	461a      	mov	r2, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	817b      	strh	r3, [r7, #10]
 80030fa:	460b      	mov	r3, r1
 80030fc:	813b      	strh	r3, [r7, #8]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	8979      	ldrh	r1, [r7, #10]
 8003108:	4b20      	ldr	r3, [pc, #128]	; (800318c <I2C_RequestMemoryWrite+0xa4>)
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f9d7 	bl	80034c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	69b9      	ldr	r1, [r7, #24]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f8f0 	bl	8003300 <I2C_WaitOnTXISFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e02c      	b.n	8003184 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003130:	893b      	ldrh	r3, [r7, #8]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	629a      	str	r2, [r3, #40]	; 0x28
 800313a:	e015      	b.n	8003168 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800313c:	893b      	ldrh	r3, [r7, #8]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	b29b      	uxth	r3, r3
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	69b9      	ldr	r1, [r7, #24]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f8d6 	bl	8003300 <I2C_WaitOnTXISFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e012      	b.n	8003184 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800315e:	893b      	ldrh	r3, [r7, #8]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2200      	movs	r2, #0
 8003170:	2180      	movs	r1, #128	; 0x80
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f884 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	80002000 	.word	0x80002000

08003190 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	461a      	mov	r2, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	460b      	mov	r3, r1
 80031a4:	813b      	strh	r3, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	4b20      	ldr	r3, [pc, #128]	; (8003234 <I2C_RequestMemoryRead+0xa4>)
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2300      	movs	r3, #0
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f984 	bl	80034c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	69b9      	ldr	r1, [r7, #24]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f89d 	bl	8003300 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e02c      	b.n	800322a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d105      	bne.n	80031e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031d6:	893b      	ldrh	r3, [r7, #8]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
 80031e0:	e015      	b.n	800320e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031e2:	893b      	ldrh	r3, [r7, #8]
 80031e4:	0a1b      	lsrs	r3, r3, #8
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	69b9      	ldr	r1, [r7, #24]
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f883 	bl	8003300 <I2C_WaitOnTXISFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e012      	b.n	800322a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003204:	893b      	ldrh	r3, [r7, #8]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2200      	movs	r2, #0
 8003216:	2140      	movs	r1, #64	; 0x40
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f831 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	80002000 	.word	0x80002000

08003238 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d103      	bne.n	8003256 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d007      	beq.n	8003274 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	619a      	str	r2, [r3, #24]
  }
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003290:	e022      	b.n	80032d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	d01e      	beq.n	80032d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7fd fc03 	bl	8000aa4 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d113      	bne.n	80032d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e00f      	b.n	80032f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d0cd      	beq.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800330c:	e02c      	b.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f870 	bl	80033f8 <I2C_IsAcknowledgeFailed>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e02a      	b.n	8003378 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d01e      	beq.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fd fbbb 	bl	8000aa4 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d113      	bne.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e007      	b.n	8003378 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d1cb      	bne.n	800330e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800338c:	e028      	b.n	80033e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f830 	bl	80033f8 <I2C_IsAcknowledgeFailed>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e026      	b.n	80033f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a2:	f7fd fb7f 	bl	8000aa4 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d113      	bne.n	80033e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e007      	b.n	80033f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d1cf      	bne.n	800338e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b10      	cmp	r3, #16
 8003410:	d151      	bne.n	80034b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003412:	e022      	b.n	800345a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d01e      	beq.n	800345a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341c:	f7fd fb42 	bl	8000aa4 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	429a      	cmp	r2, r3
 800342a:	d302      	bcc.n	8003432 <I2C_IsAcknowledgeFailed+0x3a>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d113      	bne.n	800345a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f043 0220 	orr.w	r2, r3, #32
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e02e      	b.n	80034b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b20      	cmp	r3, #32
 8003466:	d1d5      	bne.n	8003414 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2210      	movs	r2, #16
 800346e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2220      	movs	r2, #32
 8003476:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff fedd 	bl	8003238 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800348a:	400b      	ands	r3, r1
 800348c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	fe00e800 	.word	0xfe00e800

080034c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	817b      	strh	r3, [r7, #10]
 80034d2:	4613      	mov	r3, r2
 80034d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	0d5b      	lsrs	r3, r3, #21
 80034e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034e4:	4b0d      	ldr	r3, [pc, #52]	; (800351c <I2C_TransferConfig+0x58>)
 80034e6:	430b      	orrs	r3, r1
 80034e8:	43db      	mvns	r3, r3
 80034ea:	ea02 0103 	and.w	r1, r2, r3
 80034ee:	897b      	ldrh	r3, [r7, #10]
 80034f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034f4:	7a7b      	ldrb	r3, [r7, #9]
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	431a      	orrs	r2, r3
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	03ff63ff 	.word	0x03ff63ff

08003520 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b20      	cmp	r3, #32
 8003534:	d138      	bne.n	80035a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003540:	2302      	movs	r3, #2
 8003542:	e032      	b.n	80035aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2224      	movs	r2, #36	; 0x24
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003572:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6819      	ldr	r1, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e000      	b.n	80035aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b085      	sub	sp, #20
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d139      	bne.n	8003640 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e033      	b.n	8003642 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2224      	movs	r2, #36	; 0x24
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003608:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	e000      	b.n	8003642 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
  }
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800364e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003650:	b08f      	sub	sp, #60	; 0x3c
 8003652:	af0a      	add	r7, sp, #40	; 0x28
 8003654:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e116      	b.n	800388e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f003 ffb6 	bl	80075ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2203      	movs	r2, #3
 8003684:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f002 fba6 	bl	8005df0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	687e      	ldr	r6, [r7, #4]
 80036ac:	466d      	mov	r5, sp
 80036ae:	f106 0410 	add.w	r4, r6, #16
 80036b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036be:	e885 0003 	stmia.w	r5, {r0, r1}
 80036c2:	1d33      	adds	r3, r6, #4
 80036c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036c6:	6838      	ldr	r0, [r7, #0]
 80036c8:	f002 fb40 	bl	8005d4c <USB_CoreInit>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0d7      	b.n	800388e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f002 fb94 	bl	8005e12 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
 80036ee:	e04a      	b.n	8003786 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	333d      	adds	r3, #61	; 0x3d
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	333c      	adds	r3, #60	; 0x3c
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	b298      	uxth	r0, r3
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	3342      	adds	r3, #66	; 0x42
 800372c:	4602      	mov	r2, r0
 800372e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003730:	7bfa      	ldrb	r2, [r7, #15]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	333f      	adds	r3, #63	; 0x3f
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	3344      	adds	r3, #68	; 0x44
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	3348      	adds	r3, #72	; 0x48
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	3350      	adds	r3, #80	; 0x50
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	3301      	adds	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	d3af      	bcc.n	80036f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003790:	2300      	movs	r3, #0
 8003792:	73fb      	strb	r3, [r7, #15]
 8003794:	e044      	b.n	8003820 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80037be:	7bfa      	ldrb	r2, [r7, #15]
 80037c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037c2:	7bfa      	ldrb	r2, [r7, #15]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	3301      	adds	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	d3b5      	bcc.n	8003796 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	687e      	ldr	r6, [r7, #4]
 8003832:	466d      	mov	r5, sp
 8003834:	f106 0410 	add.w	r4, r6, #16
 8003838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800383a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800383c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800383e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003840:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003844:	e885 0003 	stmia.w	r5, {r0, r1}
 8003848:	1d33      	adds	r3, r6, #4
 800384a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800384c:	6838      	ldr	r0, [r7, #0]
 800384e:	f002 fb0b 	bl	8005e68 <USB_DevInit>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e014      	b.n	800388e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b01      	cmp	r3, #1
 800387a:	d102      	bne.n	8003882 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f80a 	bl	8003896 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f002 fc9b 	bl	80061c2 <USB_DevDisconnect>

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003896 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003896:	b480      	push	{r7}
 8003898:	b085      	sub	sp, #20
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c8:	f043 0303 	orr.w	r3, r3, #3
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a04      	ldr	r2, [pc, #16]	; (80038fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ee:	6013      	str	r3, [r2, #0]
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40007000 	.word	0x40007000

08003900 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <HAL_PWREx_GetVoltageRange+0x18>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40007000 	.word	0x40007000

0800391c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392a:	d130      	bne.n	800398e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800392c:	4b23      	ldr	r3, [pc, #140]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003938:	d038      	beq.n	80039ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800393a:	4b20      	ldr	r3, [pc, #128]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003942:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003948:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2232      	movs	r2, #50	; 0x32
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	0c9b      	lsrs	r3, r3, #18
 800395c:	3301      	adds	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003960:	e002      	b.n	8003968 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3b01      	subs	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003974:	d102      	bne.n	800397c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f2      	bne.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003988:	d110      	bne.n	80039ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e00f      	b.n	80039ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800398e:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399a:	d007      	beq.n	80039ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039a4:	4a05      	ldr	r2, [pc, #20]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40007000 	.word	0x40007000
 80039c0:	2000001c 	.word	0x2000001c
 80039c4:	431bde83 	.word	0x431bde83

080039c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80039d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039d6:	6053      	str	r3, [r2, #4]
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40007000 	.word	0x40007000

080039e8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80039f0:	f7fd f858 	bl	8000aa4 <HAL_GetTick>
 80039f4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e06f      	b.n	8003ae0 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_QSPI_Init+0x28>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e067      	b.n	8003ae0 <HAL_QSPI_Init+0xf8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f003 fcdf 	bl	80073f0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003a32:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f858 	bl	8003aec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	021a      	lsls	r2, r3, #8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2120      	movs	r1, #32
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f850 	bl	8003b08 <QSPI_WaitFlagStateUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003a6c:	7afb      	ldrb	r3, [r7, #11]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d131      	bne.n	8003ad6 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a7c:	f023 0310 	bic.w	r3, r3, #16
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6852      	ldr	r2, [r2, #4]
 8003a84:	0611      	lsls	r1, r2, #24
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68d2      	ldr	r2, [r2, #12]
 8003a8a:	4311      	orrs	r1, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <HAL_QSPI_Init+0x100>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6912      	ldr	r2, [r2, #16]
 8003aa2:	0411      	lsls	r1, r2, #16
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6952      	ldr	r2, [r2, #20]
 8003aa8:	4311      	orrs	r1, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6992      	ldr	r2, [r2, #24]
 8003aae:	4311      	orrs	r1, r2
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003ade:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	ffe0f8fe 	.word	0xffe0f8fe

08003aec <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b18:	e01a      	b.n	8003b50 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d016      	beq.n	8003b50 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b22:	f7fc ffbf 	bl	8000aa4 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d302      	bcc.n	8003b38 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	f043 0201 	orr.w	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e00e      	b.n	8003b6e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf14      	ite	ne
 8003b5e:	2301      	movne	r3, #1
 8003b60:	2300      	moveq	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1d6      	bne.n	8003b1a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e3d4      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8a:	4ba1      	ldr	r3, [pc, #644]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b94:	4b9e      	ldr	r3, [pc, #632]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80e4 	beq.w	8003d74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x4a>
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	f040 808b 	bne.w	8003cd0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	f040 8087 	bne.w	8003cd0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bc2:	4b93      	ldr	r3, [pc, #588]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_OscConfig+0x62>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e3ac      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1a      	ldr	r2, [r3, #32]
 8003bde:	4b8c      	ldr	r3, [pc, #560]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x7c>
 8003bea:	4b89      	ldr	r3, [pc, #548]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf2:	e005      	b.n	8003c00 <HAL_RCC_OscConfig+0x88>
 8003bf4:	4b86      	ldr	r3, [pc, #536]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d223      	bcs.n	8003c4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fd3f 	bl	800468c <RCC_SetFlashLatencyFromMSIRange>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e38d      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c18:	4b7d      	ldr	r3, [pc, #500]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a7c      	ldr	r2, [pc, #496]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003c1e:	f043 0308 	orr.w	r3, r3, #8
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	4b7a      	ldr	r3, [pc, #488]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	4977      	ldr	r1, [pc, #476]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c36:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	4972      	ldr	r1, [pc, #456]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
 8003c4a:	e025      	b.n	8003c98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c4c:	4b70      	ldr	r3, [pc, #448]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a6f      	ldr	r2, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003c52:	f043 0308 	orr.w	r3, r3, #8
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	496a      	ldr	r1, [pc, #424]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c6a:	4b69      	ldr	r3, [pc, #420]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	4965      	ldr	r1, [pc, #404]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fcff 	bl	800468c <RCC_SetFlashLatencyFromMSIRange>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e34d      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c98:	f000 fc36 	bl	8004508 <HAL_RCC_GetSysClockFreq>
 8003c9c:	4601      	mov	r1, r0
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	4a5a      	ldr	r2, [pc, #360]	; (8003e14 <HAL_RCC_OscConfig+0x29c>)
 8003caa:	5cd3      	ldrb	r3, [r2, r3]
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8003cb4:	4a58      	ldr	r2, [pc, #352]	; (8003e18 <HAL_RCC_OscConfig+0x2a0>)
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cb8:	4b58      	ldr	r3, [pc, #352]	; (8003e1c <HAL_RCC_OscConfig+0x2a4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc fea5 	bl	8000a0c <HAL_InitTick>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d052      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	e331      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d032      	beq.n	8003d3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cd8:	4b4d      	ldr	r3, [pc, #308]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a4c      	ldr	r2, [pc, #304]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ce4:	f7fc fede 	bl	8000aa4 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cec:	f7fc feda 	bl	8000aa4 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e31a      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cfe:	4b44      	ldr	r3, [pc, #272]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d0a:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a40      	ldr	r2, [pc, #256]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003d10:	f043 0308 	orr.w	r3, r3, #8
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	493b      	ldr	r1, [pc, #236]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d28:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	021b      	lsls	r3, r3, #8
 8003d36:	4936      	ldr	r1, [pc, #216]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]
 8003d3c:	e01a      	b.n	8003d74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d3e:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a33      	ldr	r2, [pc, #204]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d4a:	f7fc feab 	bl	8000aa4 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d52:	f7fc fea7 	bl	8000aa4 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e2e7      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d64:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x1da>
 8003d70:	e000      	b.n	8003d74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d074      	beq.n	8003e6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d005      	beq.n	8003d92 <HAL_RCC_OscConfig+0x21a>
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b0c      	cmp	r3, #12
 8003d8a:	d10e      	bne.n	8003daa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d10b      	bne.n	8003daa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d92:	4b1f      	ldr	r3, [pc, #124]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d064      	beq.n	8003e68 <HAL_RCC_OscConfig+0x2f0>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d160      	bne.n	8003e68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e2c4      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x24a>
 8003db4:	4b16      	ldr	r3, [pc, #88]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	e01d      	b.n	8003dfe <HAL_RCC_OscConfig+0x286>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dca:	d10c      	bne.n	8003de6 <HAL_RCC_OscConfig+0x26e>
 8003dcc:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	e00b      	b.n	8003dfe <HAL_RCC_OscConfig+0x286>
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a06      	ldr	r2, [pc, #24]	; (8003e10 <HAL_RCC_OscConfig+0x298>)
 8003df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01c      	beq.n	8003e40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fc fe4d 	bl	8000aa4 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e0c:	e011      	b.n	8003e32 <HAL_RCC_OscConfig+0x2ba>
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	080088fc 	.word	0x080088fc
 8003e18:	2000001c 	.word	0x2000001c
 8003e1c:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e20:	f7fc fe40 	bl	8000aa4 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	; 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e280      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e32:	4baf      	ldr	r3, [pc, #700]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0x2a8>
 8003e3e:	e014      	b.n	8003e6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7fc fe30 	bl	8000aa4 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e48:	f7fc fe2c 	bl	8000aa4 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e26c      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e5a:	4ba5      	ldr	r3, [pc, #660]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x2d0>
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d060      	beq.n	8003f38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_OscConfig+0x310>
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b0c      	cmp	r3, #12
 8003e80:	d119      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d116      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e88:	4b99      	ldr	r3, [pc, #612]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x328>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e249      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea0:	4b93      	ldr	r3, [pc, #588]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	061b      	lsls	r3, r3, #24
 8003eae:	4990      	ldr	r1, [pc, #576]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eb4:	e040      	b.n	8003f38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d023      	beq.n	8003f06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ebe:	4b8c      	ldr	r3, [pc, #560]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a8b      	ldr	r2, [pc, #556]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7fc fdeb 	bl	8000aa4 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7fc fde7 	bl	8000aa4 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e227      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee4:	4b82      	ldr	r3, [pc, #520]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef0:	4b7f      	ldr	r3, [pc, #508]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	061b      	lsls	r3, r3, #24
 8003efe:	497c      	ldr	r1, [pc, #496]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
 8003f04:	e018      	b.n	8003f38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f06:	4b7a      	ldr	r3, [pc, #488]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a79      	ldr	r2, [pc, #484]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fc fdc7 	bl	8000aa4 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fc fdc3 	bl	8000aa4 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e203      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f2c:	4b70      	ldr	r3, [pc, #448]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d03c      	beq.n	8003fbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01c      	beq.n	8003f86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4c:	4b68      	ldr	r3, [pc, #416]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f52:	4a67      	ldr	r2, [pc, #412]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fc fda2 	bl	8000aa4 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fc fd9e 	bl	8000aa4 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e1de      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f76:	4b5e      	ldr	r3, [pc, #376]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0ef      	beq.n	8003f64 <HAL_RCC_OscConfig+0x3ec>
 8003f84:	e01b      	b.n	8003fbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f86:	4b5a      	ldr	r3, [pc, #360]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f8c:	4a58      	ldr	r2, [pc, #352]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f96:	f7fc fd85 	bl	8000aa4 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9e:	f7fc fd81 	bl	8000aa4 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e1c1      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb0:	4b4f      	ldr	r3, [pc, #316]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1ef      	bne.n	8003f9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80a6 	beq.w	8004118 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fd0:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10d      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fdc:	4b44      	ldr	r3, [pc, #272]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	4a43      	ldr	r2, [pc, #268]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe8:	4b41      	ldr	r3, [pc, #260]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff8:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <HAL_RCC_OscConfig+0x57c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d118      	bne.n	8004036 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004004:	4b3b      	ldr	r3, [pc, #236]	; (80040f4 <HAL_RCC_OscConfig+0x57c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a3a      	ldr	r2, [pc, #232]	; (80040f4 <HAL_RCC_OscConfig+0x57c>)
 800400a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004010:	f7fc fd48 	bl	8000aa4 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004018:	f7fc fd44 	bl	8000aa4 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e184      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402a:	4b32      	ldr	r3, [pc, #200]	; (80040f4 <HAL_RCC_OscConfig+0x57c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d108      	bne.n	8004050 <HAL_RCC_OscConfig+0x4d8>
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800404e:	e024      	b.n	800409a <HAL_RCC_OscConfig+0x522>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b05      	cmp	r3, #5
 8004056:	d110      	bne.n	800407a <HAL_RCC_OscConfig+0x502>
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	4a24      	ldr	r2, [pc, #144]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8004060:	f043 0304 	orr.w	r3, r3, #4
 8004064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	4a20      	ldr	r2, [pc, #128]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004078:	e00f      	b.n	800409a <HAL_RCC_OscConfig+0x522>
 800407a:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	4a1b      	ldr	r2, [pc, #108]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800408a:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 8004092:	f023 0304 	bic.w	r3, r3, #4
 8004096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d016      	beq.n	80040d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a2:	f7fc fcff 	bl	8000aa4 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fc fcfb 	bl	8000aa4 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e139      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_RCC_OscConfig+0x578>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0ed      	beq.n	80040aa <HAL_RCC_OscConfig+0x532>
 80040ce:	e01a      	b.n	8004106 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fc fce8 	bl	8000aa4 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040d6:	e00f      	b.n	80040f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d8:	f7fc fce4 	bl	8000aa4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d906      	bls.n	80040f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e122      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000
 80040f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040f8:	4b90      	ldr	r3, [pc, #576]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e8      	bne.n	80040d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004106:	7ffb      	ldrb	r3, [r7, #31]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d105      	bne.n	8004118 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410c:	4b8b      	ldr	r3, [pc, #556]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	4a8a      	ldr	r2, [pc, #552]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 8004112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004116:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 8108 	beq.w	8004332 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	2b02      	cmp	r3, #2
 8004128:	f040 80d0 	bne.w	80042cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800412c:	4b83      	ldr	r3, [pc, #524]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f003 0203 	and.w	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	429a      	cmp	r2, r3
 800413e:	d130      	bne.n	80041a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	3b01      	subs	r3, #1
 800414c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d127      	bne.n	80041a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d11f      	bne.n	80041a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800416c:	2a07      	cmp	r2, #7
 800416e:	bf14      	ite	ne
 8004170:	2201      	movne	r2, #1
 8004172:	2200      	moveq	r2, #0
 8004174:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004176:	4293      	cmp	r3, r2
 8004178:	d113      	bne.n	80041a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	3b01      	subs	r3, #1
 8004188:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800418a:	429a      	cmp	r2, r3
 800418c:	d109      	bne.n	80041a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	085b      	lsrs	r3, r3, #1
 800419a:	3b01      	subs	r3, #1
 800419c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800419e:	429a      	cmp	r2, r3
 80041a0:	d06e      	beq.n	8004280 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b0c      	cmp	r3, #12
 80041a6:	d069      	beq.n	800427c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041a8:	4b64      	ldr	r3, [pc, #400]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d105      	bne.n	80041c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80041b4:	4b61      	ldr	r3, [pc, #388]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0b7      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041c4:	4b5d      	ldr	r3, [pc, #372]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5c      	ldr	r2, [pc, #368]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80041ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041d0:	f7fc fc68 	bl	8000aa4 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fc fc64 	bl	8000aa4 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e0a4      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ea:	4b54      	ldr	r3, [pc, #336]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f6:	4b51      	ldr	r3, [pc, #324]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	4b51      	ldr	r3, [pc, #324]	; (8004340 <HAL_RCC_OscConfig+0x7c8>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004206:	3a01      	subs	r2, #1
 8004208:	0112      	lsls	r2, r2, #4
 800420a:	4311      	orrs	r1, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004210:	0212      	lsls	r2, r2, #8
 8004212:	4311      	orrs	r1, r2
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004218:	0852      	lsrs	r2, r2, #1
 800421a:	3a01      	subs	r2, #1
 800421c:	0552      	lsls	r2, r2, #21
 800421e:	4311      	orrs	r1, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004224:	0852      	lsrs	r2, r2, #1
 8004226:	3a01      	subs	r2, #1
 8004228:	0652      	lsls	r2, r2, #25
 800422a:	4311      	orrs	r1, r2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004230:	0912      	lsrs	r2, r2, #4
 8004232:	0452      	lsls	r2, r2, #17
 8004234:	430a      	orrs	r2, r1
 8004236:	4941      	ldr	r1, [pc, #260]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 8004238:	4313      	orrs	r3, r2
 800423a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800423c:	4b3f      	ldr	r3, [pc, #252]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a3e      	ldr	r2, [pc, #248]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 8004242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004246:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004248:	4b3c      	ldr	r3, [pc, #240]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a3b      	ldr	r2, [pc, #236]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 800424e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004252:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004254:	f7fc fc26 	bl	8000aa4 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425c:	f7fc fc22 	bl	8000aa4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e062      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800426e:	4b33      	ldr	r3, [pc, #204]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800427a:	e05a      	b.n	8004332 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e059      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004280:	4b2e      	ldr	r3, [pc, #184]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d152      	bne.n	8004332 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800428c:	4b2b      	ldr	r3, [pc, #172]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2a      	ldr	r2, [pc, #168]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 8004292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004296:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004298:	4b28      	ldr	r3, [pc, #160]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4a27      	ldr	r2, [pc, #156]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 800429e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042a4:	f7fc fbfe 	bl	8000aa4 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ac:	f7fc fbfa 	bl	8000aa4 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e03a      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042be:	4b1f      	ldr	r3, [pc, #124]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x734>
 80042ca:	e032      	b.n	8004332 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d02d      	beq.n	800432e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d2:	4b1a      	ldr	r3, [pc, #104]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a19      	ldr	r2, [pc, #100]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80042d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80042de:	4b17      	ldr	r3, [pc, #92]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d105      	bne.n	80042f6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80042ea:	4b14      	ldr	r3, [pc, #80]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	4a13      	ldr	r2, [pc, #76]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80042f0:	f023 0303 	bic.w	r3, r3, #3
 80042f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	4a10      	ldr	r2, [pc, #64]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 80042fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004304:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7fc fbcd 	bl	8000aa4 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430e:	f7fc fbc9 	bl	8000aa4 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e009      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_RCC_OscConfig+0x7c4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f0      	bne.n	800430e <HAL_RCC_OscConfig+0x796>
 800432c:	e001      	b.n	8004332 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3720      	adds	r7, #32
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000
 8004340:	f99d808c 	.word	0xf99d808c

08004344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0c8      	b.n	80044ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004358:	4b66      	ldr	r3, [pc, #408]	; (80044f4 <HAL_RCC_ClockConfig+0x1b0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d910      	bls.n	8004388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b63      	ldr	r3, [pc, #396]	; (80044f4 <HAL_RCC_ClockConfig+0x1b0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f023 0207 	bic.w	r2, r3, #7
 800436e:	4961      	ldr	r1, [pc, #388]	; (80044f4 <HAL_RCC_ClockConfig+0x1b0>)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	4313      	orrs	r3, r2
 8004374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004376:	4b5f      	ldr	r3, [pc, #380]	; (80044f4 <HAL_RCC_ClockConfig+0x1b0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d001      	beq.n	8004388 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0b0      	b.n	80044ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d04c      	beq.n	800442e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d107      	bne.n	80043ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439c:	4b56      	ldr	r3, [pc, #344]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d121      	bne.n	80043ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e09e      	b.n	80044ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d107      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043b4:	4b50      	ldr	r3, [pc, #320]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d115      	bne.n	80043ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e092      	b.n	80044ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043cc:	4b4a      	ldr	r3, [pc, #296]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e086      	b.n	80044ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043dc:	4b46      	ldr	r3, [pc, #280]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e07e      	b.n	80044ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043ec:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f023 0203 	bic.w	r2, r3, #3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	493f      	ldr	r1, [pc, #252]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fe:	f7fc fb51 	bl	8000aa4 <HAL_GetTick>
 8004402:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004404:	e00a      	b.n	800441c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004406:	f7fc fb4d 	bl	8000aa4 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e066      	b.n	80044ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441c:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 020c 	and.w	r2, r3, #12
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	429a      	cmp	r2, r3
 800442c:	d1eb      	bne.n	8004406 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800443a:	4b2f      	ldr	r3, [pc, #188]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	492c      	ldr	r1, [pc, #176]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 8004448:	4313      	orrs	r3, r2
 800444a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800444c:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <HAL_RCC_ClockConfig+0x1b0>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d210      	bcs.n	800447c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445a:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <HAL_RCC_ClockConfig+0x1b0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 0207 	bic.w	r2, r3, #7
 8004462:	4924      	ldr	r1, [pc, #144]	; (80044f4 <HAL_RCC_ClockConfig+0x1b0>)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	4313      	orrs	r3, r2
 8004468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800446a:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <HAL_RCC_ClockConfig+0x1b0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e036      	b.n	80044ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4918      	ldr	r1, [pc, #96]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044a6:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4910      	ldr	r1, [pc, #64]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044ba:	f000 f825 	bl	8004508 <HAL_RCC_GetSysClockFreq>
 80044be:	4601      	mov	r1, r0
 80044c0:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <HAL_RCC_ClockConfig+0x1b4>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	4a0c      	ldr	r2, [pc, #48]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	5cd3      	ldrb	r3, [r2, r3]
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	fa21 f303 	lsr.w	r3, r1, r3
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <HAL_RCC_ClockConfig+0x1c0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fc fa94 	bl	8000a0c <HAL_InitTick>
 80044e4:	4603      	mov	r3, r0
 80044e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80044e8:	7afb      	ldrb	r3, [r7, #11]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40022000 	.word	0x40022000
 80044f8:	40021000 	.word	0x40021000
 80044fc:	080088fc 	.word	0x080088fc
 8004500:	2000001c 	.word	0x2000001c
 8004504:	20000010 	.word	0x20000010

08004508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	; 0x24
 800450c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004516:	4b3d      	ldr	r3, [pc, #244]	; (800460c <HAL_RCC_GetSysClockFreq+0x104>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
 800451e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004520:	4b3a      	ldr	r3, [pc, #232]	; (800460c <HAL_RCC_GetSysClockFreq+0x104>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x34>
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b0c      	cmp	r3, #12
 8004534:	d121      	bne.n	800457a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d11e      	bne.n	800457a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800453c:	4b33      	ldr	r3, [pc, #204]	; (800460c <HAL_RCC_GetSysClockFreq+0x104>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d107      	bne.n	8004558 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004548:	4b30      	ldr	r3, [pc, #192]	; (800460c <HAL_RCC_GetSysClockFreq+0x104>)
 800454a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	e005      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004558:	4b2c      	ldr	r3, [pc, #176]	; (800460c <HAL_RCC_GetSysClockFreq+0x104>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004564:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <HAL_RCC_GetSysClockFreq+0x108>)
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800456c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10d      	bne.n	8004590 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b04      	cmp	r3, #4
 800457e:	d102      	bne.n	8004586 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004580:	4b24      	ldr	r3, [pc, #144]	; (8004614 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	e004      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b08      	cmp	r3, #8
 800458a:	d101      	bne.n	8004590 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800458c:	4b22      	ldr	r3, [pc, #136]	; (8004618 <HAL_RCC_GetSysClockFreq+0x110>)
 800458e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d133      	bne.n	80045fe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004596:	4b1d      	ldr	r3, [pc, #116]	; (800460c <HAL_RCC_GetSysClockFreq+0x104>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d002      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0xa4>
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d003      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0xaa>
 80045aa:	e005      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045ac:	4b19      	ldr	r3, [pc, #100]	; (8004614 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045ae:	617b      	str	r3, [r7, #20]
      break;
 80045b0:	e005      	b.n	80045be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045b2:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_RCC_GetSysClockFreq+0x110>)
 80045b4:	617b      	str	r3, [r7, #20]
      break;
 80045b6:	e002      	b.n	80045be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	617b      	str	r3, [r7, #20]
      break;
 80045bc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045be:	4b13      	ldr	r3, [pc, #76]	; (800460c <HAL_RCC_GetSysClockFreq+0x104>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	091b      	lsrs	r3, r3, #4
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	3301      	adds	r3, #1
 80045ca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045cc:	4b0f      	ldr	r3, [pc, #60]	; (800460c <HAL_RCC_GetSysClockFreq+0x104>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	0a1b      	lsrs	r3, r3, #8
 80045d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	fb02 f203 	mul.w	r2, r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RCC_GetSysClockFreq+0x104>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	0e5b      	lsrs	r3, r3, #25
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	3301      	adds	r3, #1
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045fe:	69bb      	ldr	r3, [r7, #24]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3724      	adds	r7, #36	; 0x24
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	40021000 	.word	0x40021000
 8004610:	08008914 	.word	0x08008914
 8004614:	00f42400 	.word	0x00f42400
 8004618:	007a1200 	.word	0x007a1200

0800461c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_RCC_GetHCLKFreq+0x14>)
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	2000001c 	.word	0x2000001c

08004634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004638:	f7ff fff0 	bl	800461c <HAL_RCC_GetHCLKFreq>
 800463c:	4601      	mov	r1, r0
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4a04      	ldr	r2, [pc, #16]	; (800465c <HAL_RCC_GetPCLK1Freq+0x28>)
 800464a:	5cd3      	ldrb	r3, [r2, r3]
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000
 800465c:	0800890c 	.word	0x0800890c

08004660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004664:	f7ff ffda 	bl	800461c <HAL_RCC_GetHCLKFreq>
 8004668:	4601      	mov	r1, r0
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <HAL_RCC_GetPCLK2Freq+0x24>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0adb      	lsrs	r3, r3, #11
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4a04      	ldr	r2, [pc, #16]	; (8004688 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004676:	5cd3      	ldrb	r3, [r2, r3]
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000
 8004688:	0800890c 	.word	0x0800890c

0800468c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004698:	4b2a      	ldr	r3, [pc, #168]	; (8004744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046a4:	f7ff f92c 	bl	8003900 <HAL_PWREx_GetVoltageRange>
 80046a8:	6178      	str	r0, [r7, #20]
 80046aa:	e014      	b.n	80046d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ac:	4b25      	ldr	r3, [pc, #148]	; (8004744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	4a24      	ldr	r2, [pc, #144]	; (8004744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b6:	6593      	str	r3, [r2, #88]	; 0x58
 80046b8:	4b22      	ldr	r3, [pc, #136]	; (8004744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046c4:	f7ff f91c 	bl	8003900 <HAL_PWREx_GetVoltageRange>
 80046c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046ca:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ce:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046dc:	d10b      	bne.n	80046f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b80      	cmp	r3, #128	; 0x80
 80046e2:	d919      	bls.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2ba0      	cmp	r3, #160	; 0xa0
 80046e8:	d902      	bls.n	80046f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046ea:	2302      	movs	r3, #2
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	e013      	b.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046f0:	2301      	movs	r3, #1
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	e010      	b.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b80      	cmp	r3, #128	; 0x80
 80046fa:	d902      	bls.n	8004702 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046fc:	2303      	movs	r3, #3
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	e00a      	b.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d102      	bne.n	800470e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004708:	2302      	movs	r3, #2
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	e004      	b.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b70      	cmp	r3, #112	; 0x70
 8004712:	d101      	bne.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004714:	2301      	movs	r3, #1
 8004716:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f023 0207 	bic.w	r2, r3, #7
 8004720:	4909      	ldr	r1, [pc, #36]	; (8004748 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004728:	4b07      	ldr	r3, [pc, #28]	; (8004748 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	429a      	cmp	r2, r3
 8004734:	d001      	beq.n	800473a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40021000 	.word	0x40021000
 8004748:	40022000 	.word	0x40022000

0800474c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004754:	2300      	movs	r3, #0
 8004756:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004758:	2300      	movs	r3, #0
 800475a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004764:	2b00      	cmp	r3, #0
 8004766:	d03f      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800476c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004770:	d01c      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004776:	d802      	bhi.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00e      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800477c:	e01f      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x72>
 800477e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004782:	d003      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004784:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004788:	d01c      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800478a:	e018      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800478c:	4b85      	ldr	r3, [pc, #532]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a84      	ldr	r2, [pc, #528]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004796:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004798:	e015      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3304      	adds	r3, #4
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fac9 	bl	8004d38 <RCCEx_PLLSAI1_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047aa:	e00c      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3320      	adds	r3, #32
 80047b0:	2100      	movs	r1, #0
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fbb0 	bl	8004f18 <RCCEx_PLLSAI2_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047bc:	e003      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	74fb      	strb	r3, [r7, #19]
      break;
 80047c2:	e000      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80047c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c6:	7cfb      	ldrb	r3, [r7, #19]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10b      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047cc:	4b75      	ldr	r3, [pc, #468]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047da:	4972      	ldr	r1, [pc, #456]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047e2:	e001      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d03f      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047fc:	d01c      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80047fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004802:	d802      	bhi.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00e      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004808:	e01f      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800480a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800480e:	d003      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004810:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004814:	d01c      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004816:	e018      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004818:	4b62      	ldr	r3, [pc, #392]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a61      	ldr	r2, [pc, #388]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800481e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004822:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004824:	e015      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fa83 	bl	8004d38 <RCCEx_PLLSAI1_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004836:	e00c      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3320      	adds	r3, #32
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fb6a 	bl	8004f18 <RCCEx_PLLSAI2_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004848:	e003      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	74fb      	strb	r3, [r7, #19]
      break;
 800484e:	e000      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004858:	4b52      	ldr	r3, [pc, #328]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004866:	494f      	ldr	r1, [pc, #316]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800486e:	e001      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80a0 	beq.w	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004886:	4b47      	ldr	r3, [pc, #284]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004896:	2300      	movs	r3, #0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00d      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489c:	4b41      	ldr	r3, [pc, #260]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	4a40      	ldr	r2, [pc, #256]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6593      	str	r3, [r2, #88]	; 0x58
 80048a8:	4b3e      	ldr	r3, [pc, #248]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b4:	2301      	movs	r3, #1
 80048b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b8:	4b3b      	ldr	r3, [pc, #236]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a3a      	ldr	r2, [pc, #232]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80048be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048c4:	f7fc f8ee 	bl	8000aa4 <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048ca:	e009      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048cc:	f7fc f8ea 	bl	8000aa4 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d902      	bls.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	74fb      	strb	r3, [r7, #19]
        break;
 80048de:	e005      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048e0:	4b31      	ldr	r3, [pc, #196]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ef      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d15c      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048f2:	4b2c      	ldr	r3, [pc, #176]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01f      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	429a      	cmp	r2, r3
 800490e:	d019      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004910:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800491c:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800492c:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800493c:	4a19      	ldr	r2, [pc, #100]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fc f8a9 	bl	8000aa4 <HAL_GetTick>
 8004952:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004954:	e00b      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fc f8a5 	bl	8000aa4 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d902      	bls.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	74fb      	strb	r3, [r7, #19]
            break;
 800496c:	e006      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ec      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800497c:	7cfb      	ldrb	r3, [r7, #19]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10c      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004982:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004992:	4904      	ldr	r1, [pc, #16]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800499a:	e009      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
 80049a0:	e006      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80049a2:	bf00      	nop
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b0:	7c7b      	ldrb	r3, [r7, #17]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d105      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b6:	4b9e      	ldr	r3, [pc, #632]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ba:	4a9d      	ldr	r2, [pc, #628]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049ce:	4b98      	ldr	r3, [pc, #608]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d4:	f023 0203 	bic.w	r2, r3, #3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	4994      	ldr	r1, [pc, #592]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049f0:	4b8f      	ldr	r3, [pc, #572]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f023 020c 	bic.w	r2, r3, #12
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fe:	498c      	ldr	r1, [pc, #560]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a12:	4b87      	ldr	r3, [pc, #540]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	4983      	ldr	r1, [pc, #524]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a34:	4b7e      	ldr	r3, [pc, #504]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	497b      	ldr	r1, [pc, #492]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a56:	4b76      	ldr	r3, [pc, #472]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a64:	4972      	ldr	r1, [pc, #456]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a78:	4b6d      	ldr	r3, [pc, #436]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a86:	496a      	ldr	r1, [pc, #424]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a9a:	4b65      	ldr	r3, [pc, #404]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	4961      	ldr	r1, [pc, #388]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004abc:	4b5c      	ldr	r3, [pc, #368]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aca:	4959      	ldr	r1, [pc, #356]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ade:	4b54      	ldr	r3, [pc, #336]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aec:	4950      	ldr	r1, [pc, #320]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b00:	4b4b      	ldr	r3, [pc, #300]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	4948      	ldr	r1, [pc, #288]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b22:	4b43      	ldr	r3, [pc, #268]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b30:	493f      	ldr	r1, [pc, #252]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d028      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b44:	4b3a      	ldr	r3, [pc, #232]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b52:	4937      	ldr	r1, [pc, #220]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b62:	d106      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b64:	4b32      	ldr	r3, [pc, #200]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4a31      	ldr	r2, [pc, #196]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b6e:	60d3      	str	r3, [r2, #12]
 8004b70:	e011      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b7a:	d10c      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	2101      	movs	r1, #1
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f8d8 	bl	8004d38 <RCCEx_PLLSAI1_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004b92:	7cfb      	ldrb	r3, [r7, #19]
 8004b94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d028      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ba2:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	491f      	ldr	r1, [pc, #124]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc0:	d106      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc2:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	4a1a      	ldr	r2, [pc, #104]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bcc:	60d3      	str	r3, [r2, #12]
 8004bce:	e011      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	2101      	movs	r1, #1
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 f8a9 	bl	8004d38 <RCCEx_PLLSAI1_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bea:	7cfb      	ldrb	r3, [r7, #19]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d02b      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0e:	4908      	ldr	r1, [pc, #32]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c1e:	d109      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c20:	4b03      	ldr	r3, [pc, #12]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a02      	ldr	r2, [pc, #8]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c2a:	60d3      	str	r3, [r2, #12]
 8004c2c:	e014      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 f877 	bl	8004d38 <RCCEx_PLLSAI1_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02f      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c64:	4b2b      	ldr	r3, [pc, #172]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c72:	4928      	ldr	r1, [pc, #160]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c82:	d10d      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	2102      	movs	r1, #2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f854 	bl	8004d38 <RCCEx_PLLSAI1_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c94:	7cfb      	ldrb	r3, [r7, #19]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d014      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004c9a:	7cfb      	ldrb	r3, [r7, #19]
 8004c9c:	74bb      	strb	r3, [r7, #18]
 8004c9e:	e011      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3320      	adds	r3, #32
 8004cae:	2102      	movs	r1, #2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 f931 	bl	8004f18 <RCCEx_PLLSAI2_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cba:	7cfb      	ldrb	r3, [r7, #19]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004cc0:	7cfb      	ldrb	r3, [r7, #19]
 8004cc2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cd0:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cde:	490d      	ldr	r1, [pc, #52]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cf2:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d02:	4904      	ldr	r1, [pc, #16]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000

08004d18 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d22:	f043 0304 	orr.w	r3, r3, #4
 8004d26:	6013      	str	r3, [r2, #0]
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000

08004d38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d46:	4b73      	ldr	r3, [pc, #460]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d018      	beq.n	8004d84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d52:	4b70      	ldr	r3, [pc, #448]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f003 0203 	and.w	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d10d      	bne.n	8004d7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
       ||
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d6a:	4b6a      	ldr	r3, [pc, #424]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	091b      	lsrs	r3, r3, #4
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
       ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d044      	beq.n	8004e08 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
 8004d82:	e041      	b.n	8004e08 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d00c      	beq.n	8004da6 <RCCEx_PLLSAI1_Config+0x6e>
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d013      	beq.n	8004db8 <RCCEx_PLLSAI1_Config+0x80>
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d120      	bne.n	8004dd6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d94:	4b5f      	ldr	r3, [pc, #380]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d11d      	bne.n	8004ddc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004da4:	e01a      	b.n	8004ddc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004da6:	4b5b      	ldr	r3, [pc, #364]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d116      	bne.n	8004de0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db6:	e013      	b.n	8004de0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004db8:	4b56      	ldr	r3, [pc, #344]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10f      	bne.n	8004de4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dc4:	4b53      	ldr	r3, [pc, #332]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dd4:	e006      	b.n	8004de4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8004dda:	e004      	b.n	8004de6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ddc:	bf00      	nop
 8004dde:	e002      	b.n	8004de6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004de0:	bf00      	nop
 8004de2:	e000      	b.n	8004de6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004de4:	bf00      	nop
    }

    if(status == HAL_OK)
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10d      	bne.n	8004e08 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dec:	4b49      	ldr	r3, [pc, #292]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6819      	ldr	r1, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	430b      	orrs	r3, r1
 8004e02:	4944      	ldr	r1, [pc, #272]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d17d      	bne.n	8004f0a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e0e:	4b41      	ldr	r3, [pc, #260]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a40      	ldr	r2, [pc, #256]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1a:	f7fb fe43 	bl	8000aa4 <HAL_GetTick>
 8004e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e20:	e009      	b.n	8004e36 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e22:	f7fb fe3f 	bl	8000aa4 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d902      	bls.n	8004e36 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	73fb      	strb	r3, [r7, #15]
        break;
 8004e34:	e005      	b.n	8004e42 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e36:	4b37      	ldr	r3, [pc, #220]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1ef      	bne.n	8004e22 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d160      	bne.n	8004f0a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d111      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e4e:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6892      	ldr	r2, [r2, #8]
 8004e5e:	0211      	lsls	r1, r2, #8
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68d2      	ldr	r2, [r2, #12]
 8004e64:	0912      	lsrs	r2, r2, #4
 8004e66:	0452      	lsls	r2, r2, #17
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	492a      	ldr	r1, [pc, #168]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	610b      	str	r3, [r1, #16]
 8004e70:	e027      	b.n	8004ec2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d112      	bne.n	8004e9e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e78:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6892      	ldr	r2, [r2, #8]
 8004e88:	0211      	lsls	r1, r2, #8
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6912      	ldr	r2, [r2, #16]
 8004e8e:	0852      	lsrs	r2, r2, #1
 8004e90:	3a01      	subs	r2, #1
 8004e92:	0552      	lsls	r2, r2, #21
 8004e94:	430a      	orrs	r2, r1
 8004e96:	491f      	ldr	r1, [pc, #124]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	610b      	str	r3, [r1, #16]
 8004e9c:	e011      	b.n	8004ec2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ea6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6892      	ldr	r2, [r2, #8]
 8004eae:	0211      	lsls	r1, r2, #8
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6952      	ldr	r2, [r2, #20]
 8004eb4:	0852      	lsrs	r2, r2, #1
 8004eb6:	3a01      	subs	r2, #1
 8004eb8:	0652      	lsls	r2, r2, #25
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	4915      	ldr	r1, [pc, #84]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ec2:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a13      	ldr	r2, [pc, #76]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ec8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ecc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ece:	f7fb fde9 	bl	8000aa4 <HAL_GetTick>
 8004ed2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ed4:	e009      	b.n	8004eea <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ed6:	f7fb fde5 	bl	8000aa4 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d902      	bls.n	8004eea <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	73fb      	strb	r3, [r7, #15]
          break;
 8004ee8:	e005      	b.n	8004ef6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0ef      	beq.n	8004ed6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	4903      	ldr	r1, [pc, #12]	; (8004f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000

08004f18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f26:	4b68      	ldr	r3, [pc, #416]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d018      	beq.n	8004f64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f32:	4b65      	ldr	r3, [pc, #404]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0203 	and.w	r2, r3, #3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d10d      	bne.n	8004f5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
       ||
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f4a:	4b5f      	ldr	r3, [pc, #380]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
       ||
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d044      	beq.n	8004fe8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	73fb      	strb	r3, [r7, #15]
 8004f62:	e041      	b.n	8004fe8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d00c      	beq.n	8004f86 <RCCEx_PLLSAI2_Config+0x6e>
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d013      	beq.n	8004f98 <RCCEx_PLLSAI2_Config+0x80>
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d120      	bne.n	8004fb6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f74:	4b54      	ldr	r3, [pc, #336]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d11d      	bne.n	8004fbc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f84:	e01a      	b.n	8004fbc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f86:	4b50      	ldr	r3, [pc, #320]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d116      	bne.n	8004fc0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f96:	e013      	b.n	8004fc0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f98:	4b4b      	ldr	r3, [pc, #300]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10f      	bne.n	8004fc4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fa4:	4b48      	ldr	r3, [pc, #288]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d109      	bne.n	8004fc4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fb4:	e006      	b.n	8004fc4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8004fba:	e004      	b.n	8004fc6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004fbc:	bf00      	nop
 8004fbe:	e002      	b.n	8004fc6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004fc0:	bf00      	nop
 8004fc2:	e000      	b.n	8004fc6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004fc4:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10d      	bne.n	8004fe8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fcc:	4b3e      	ldr	r3, [pc, #248]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6819      	ldr	r1, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	4939      	ldr	r1, [pc, #228]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d167      	bne.n	80050be <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fee:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a35      	ldr	r2, [pc, #212]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffa:	f7fb fd53 	bl	8000aa4 <HAL_GetTick>
 8004ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005000:	e009      	b.n	8005016 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005002:	f7fb fd4f 	bl	8000aa4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d902      	bls.n	8005016 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	73fb      	strb	r3, [r7, #15]
        break;
 8005014:	e005      	b.n	8005022 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005016:	4b2c      	ldr	r3, [pc, #176]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1ef      	bne.n	8005002 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d14a      	bne.n	80050be <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d111      	bne.n	8005052 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800502e:	4b26      	ldr	r3, [pc, #152]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6892      	ldr	r2, [r2, #8]
 800503e:	0211      	lsls	r1, r2, #8
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68d2      	ldr	r2, [r2, #12]
 8005044:	0912      	lsrs	r2, r2, #4
 8005046:	0452      	lsls	r2, r2, #17
 8005048:	430a      	orrs	r2, r1
 800504a:	491f      	ldr	r1, [pc, #124]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800504c:	4313      	orrs	r3, r2
 800504e:	614b      	str	r3, [r1, #20]
 8005050:	e011      	b.n	8005076 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005052:	4b1d      	ldr	r3, [pc, #116]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800505a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6892      	ldr	r2, [r2, #8]
 8005062:	0211      	lsls	r1, r2, #8
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6912      	ldr	r2, [r2, #16]
 8005068:	0852      	lsrs	r2, r2, #1
 800506a:	3a01      	subs	r2, #1
 800506c:	0652      	lsls	r2, r2, #25
 800506e:	430a      	orrs	r2, r1
 8005070:	4915      	ldr	r1, [pc, #84]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005072:	4313      	orrs	r3, r2
 8005074:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005076:	4b14      	ldr	r3, [pc, #80]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800507c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005080:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005082:	f7fb fd0f 	bl	8000aa4 <HAL_GetTick>
 8005086:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005088:	e009      	b.n	800509e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800508a:	f7fb fd0b 	bl	8000aa4 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d902      	bls.n	800509e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	73fb      	strb	r3, [r7, #15]
          break;
 800509c:	e005      	b.n	80050aa <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0ef      	beq.n	800508a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	4903      	ldr	r1, [pc, #12]	; (80050c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050be:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40021000 	.word	0x40021000

080050cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e07c      	b.n	80051d8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f002 f9bd 	bl	8007478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005114:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800511e:	d902      	bls.n	8005126 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e002      	b.n	800512c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800512a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005134:	d007      	beq.n	8005146 <HAL_SPI_Init+0x7a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800513e:	d002      	beq.n	8005146 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005156:	d903      	bls.n	8005160 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	631a      	str	r2, [r3, #48]	; 0x30
 800515e:	e002      	b.n	8005166 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	ea42 0103 	orr.w	r1, r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	0c1b      	lsrs	r3, r3, #16
 80051a6:	f003 0204 	and.w	r2, r3, #4
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	ea42 0103 	orr.w	r1, r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e040      	b.n	8005274 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f002 f97c 	bl	8007500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2224      	movs	r2, #36	; 0x24
 800520c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0201 	bic.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f8c0 	bl	80053a4 <UART_SetConfig>
 8005224:	4603      	mov	r3, r0
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e022      	b.n	8005274 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fc26 	bl	8005a88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800524a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800525a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fcad 	bl	8005bcc <UART_CheckIdleState>
 8005272:	4603      	mov	r3, r0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	; 0x28
 8005280:	af02      	add	r7, sp, #8
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	4613      	mov	r3, r2
 800528a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005290:	2b20      	cmp	r3, #32
 8005292:	f040 8081 	bne.w	8005398 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <HAL_UART_Transmit+0x26>
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e079      	b.n	800539a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_UART_Transmit+0x38>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e072      	b.n	800539a <HAL_UART_Transmit+0x11e>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2221      	movs	r2, #33	; 0x21
 80052c6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80052c8:	f7fb fbec 	bl	8000aa4 <HAL_GetTick>
 80052cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	88fa      	ldrh	r2, [r7, #6]
 80052d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	88fa      	ldrh	r2, [r7, #6]
 80052da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e6:	d108      	bne.n	80052fa <HAL_UART_Transmit+0x7e>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	e003      	b.n	8005302 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800530a:	e02d      	b.n	8005368 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2200      	movs	r2, #0
 8005314:	2180      	movs	r1, #128	; 0x80
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fc9d 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e039      	b.n	800539a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	881a      	ldrh	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005338:	b292      	uxth	r2, r2
 800533a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	3302      	adds	r3, #2
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	e008      	b.n	8005356 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	781a      	ldrb	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	b292      	uxth	r2, r2
 800534e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	3301      	adds	r3, #1
 8005354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1cb      	bne.n	800530c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2200      	movs	r2, #0
 800537c:	2140      	movs	r1, #64	; 0x40
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fc69 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e005      	b.n	800539a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2220      	movs	r2, #32
 8005392:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	e000      	b.n	800539a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005398:	2302      	movs	r3, #2
  }
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053a4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80053a8:	b08a      	sub	sp, #40	; 0x28
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	4bb8      	ldr	r3, [pc, #736]	; (80056bc <UART_SetConfig+0x318>)
 80053da:	4013      	ands	r3, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053e2:	430b      	orrs	r3, r1
 80053e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4aae      	ldr	r2, [pc, #696]	; (80056c0 <UART_SetConfig+0x31c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d004      	beq.n	8005416 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005412:	4313      	orrs	r3, r2
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005426:	430a      	orrs	r2, r1
 8005428:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4aa5      	ldr	r2, [pc, #660]	; (80056c4 <UART_SetConfig+0x320>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d126      	bne.n	8005482 <UART_SetConfig+0xde>
 8005434:	4ba4      	ldr	r3, [pc, #656]	; (80056c8 <UART_SetConfig+0x324>)
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b03      	cmp	r3, #3
 8005440:	d81a      	bhi.n	8005478 <UART_SetConfig+0xd4>
 8005442:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0xa4>)
 8005444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005448:	08005459 	.word	0x08005459
 800544c:	08005469 	.word	0x08005469
 8005450:	08005461 	.word	0x08005461
 8005454:	08005471 	.word	0x08005471
 8005458:	2301      	movs	r3, #1
 800545a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545e:	e105      	b.n	800566c <UART_SetConfig+0x2c8>
 8005460:	2302      	movs	r3, #2
 8005462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005466:	e101      	b.n	800566c <UART_SetConfig+0x2c8>
 8005468:	2304      	movs	r3, #4
 800546a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546e:	e0fd      	b.n	800566c <UART_SetConfig+0x2c8>
 8005470:	2308      	movs	r3, #8
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005476:	e0f9      	b.n	800566c <UART_SetConfig+0x2c8>
 8005478:	2310      	movs	r3, #16
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547e:	bf00      	nop
 8005480:	e0f4      	b.n	800566c <UART_SetConfig+0x2c8>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a91      	ldr	r2, [pc, #580]	; (80056cc <UART_SetConfig+0x328>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d138      	bne.n	80054fe <UART_SetConfig+0x15a>
 800548c:	4b8e      	ldr	r3, [pc, #568]	; (80056c8 <UART_SetConfig+0x324>)
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005492:	f003 030c 	and.w	r3, r3, #12
 8005496:	2b0c      	cmp	r3, #12
 8005498:	d82c      	bhi.n	80054f4 <UART_SetConfig+0x150>
 800549a:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <UART_SetConfig+0xfc>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	080054d5 	.word	0x080054d5
 80054a4:	080054f5 	.word	0x080054f5
 80054a8:	080054f5 	.word	0x080054f5
 80054ac:	080054f5 	.word	0x080054f5
 80054b0:	080054e5 	.word	0x080054e5
 80054b4:	080054f5 	.word	0x080054f5
 80054b8:	080054f5 	.word	0x080054f5
 80054bc:	080054f5 	.word	0x080054f5
 80054c0:	080054dd 	.word	0x080054dd
 80054c4:	080054f5 	.word	0x080054f5
 80054c8:	080054f5 	.word	0x080054f5
 80054cc:	080054f5 	.word	0x080054f5
 80054d0:	080054ed 	.word	0x080054ed
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054da:	e0c7      	b.n	800566c <UART_SetConfig+0x2c8>
 80054dc:	2302      	movs	r3, #2
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e2:	e0c3      	b.n	800566c <UART_SetConfig+0x2c8>
 80054e4:	2304      	movs	r3, #4
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ea:	e0bf      	b.n	800566c <UART_SetConfig+0x2c8>
 80054ec:	2308      	movs	r3, #8
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f2:	e0bb      	b.n	800566c <UART_SetConfig+0x2c8>
 80054f4:	2310      	movs	r3, #16
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fa:	bf00      	nop
 80054fc:	e0b6      	b.n	800566c <UART_SetConfig+0x2c8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a73      	ldr	r2, [pc, #460]	; (80056d0 <UART_SetConfig+0x32c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d125      	bne.n	8005554 <UART_SetConfig+0x1b0>
 8005508:	4b6f      	ldr	r3, [pc, #444]	; (80056c8 <UART_SetConfig+0x324>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005512:	2b10      	cmp	r3, #16
 8005514:	d011      	beq.n	800553a <UART_SetConfig+0x196>
 8005516:	2b10      	cmp	r3, #16
 8005518:	d802      	bhi.n	8005520 <UART_SetConfig+0x17c>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <UART_SetConfig+0x186>
 800551e:	e014      	b.n	800554a <UART_SetConfig+0x1a6>
 8005520:	2b20      	cmp	r3, #32
 8005522:	d006      	beq.n	8005532 <UART_SetConfig+0x18e>
 8005524:	2b30      	cmp	r3, #48	; 0x30
 8005526:	d00c      	beq.n	8005542 <UART_SetConfig+0x19e>
 8005528:	e00f      	b.n	800554a <UART_SetConfig+0x1a6>
 800552a:	2300      	movs	r3, #0
 800552c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005530:	e09c      	b.n	800566c <UART_SetConfig+0x2c8>
 8005532:	2302      	movs	r3, #2
 8005534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005538:	e098      	b.n	800566c <UART_SetConfig+0x2c8>
 800553a:	2304      	movs	r3, #4
 800553c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005540:	e094      	b.n	800566c <UART_SetConfig+0x2c8>
 8005542:	2308      	movs	r3, #8
 8005544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005548:	e090      	b.n	800566c <UART_SetConfig+0x2c8>
 800554a:	2310      	movs	r3, #16
 800554c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005550:	bf00      	nop
 8005552:	e08b      	b.n	800566c <UART_SetConfig+0x2c8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a5e      	ldr	r2, [pc, #376]	; (80056d4 <UART_SetConfig+0x330>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d125      	bne.n	80055aa <UART_SetConfig+0x206>
 800555e:	4b5a      	ldr	r3, [pc, #360]	; (80056c8 <UART_SetConfig+0x324>)
 8005560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005564:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d011      	beq.n	8005590 <UART_SetConfig+0x1ec>
 800556c:	2b40      	cmp	r3, #64	; 0x40
 800556e:	d802      	bhi.n	8005576 <UART_SetConfig+0x1d2>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <UART_SetConfig+0x1dc>
 8005574:	e014      	b.n	80055a0 <UART_SetConfig+0x1fc>
 8005576:	2b80      	cmp	r3, #128	; 0x80
 8005578:	d006      	beq.n	8005588 <UART_SetConfig+0x1e4>
 800557a:	2bc0      	cmp	r3, #192	; 0xc0
 800557c:	d00c      	beq.n	8005598 <UART_SetConfig+0x1f4>
 800557e:	e00f      	b.n	80055a0 <UART_SetConfig+0x1fc>
 8005580:	2300      	movs	r3, #0
 8005582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005586:	e071      	b.n	800566c <UART_SetConfig+0x2c8>
 8005588:	2302      	movs	r3, #2
 800558a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800558e:	e06d      	b.n	800566c <UART_SetConfig+0x2c8>
 8005590:	2304      	movs	r3, #4
 8005592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005596:	e069      	b.n	800566c <UART_SetConfig+0x2c8>
 8005598:	2308      	movs	r3, #8
 800559a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559e:	e065      	b.n	800566c <UART_SetConfig+0x2c8>
 80055a0:	2310      	movs	r3, #16
 80055a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a6:	bf00      	nop
 80055a8:	e060      	b.n	800566c <UART_SetConfig+0x2c8>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a4a      	ldr	r2, [pc, #296]	; (80056d8 <UART_SetConfig+0x334>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d129      	bne.n	8005608 <UART_SetConfig+0x264>
 80055b4:	4b44      	ldr	r3, [pc, #272]	; (80056c8 <UART_SetConfig+0x324>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c2:	d014      	beq.n	80055ee <UART_SetConfig+0x24a>
 80055c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c8:	d802      	bhi.n	80055d0 <UART_SetConfig+0x22c>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <UART_SetConfig+0x23a>
 80055ce:	e016      	b.n	80055fe <UART_SetConfig+0x25a>
 80055d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d4:	d007      	beq.n	80055e6 <UART_SetConfig+0x242>
 80055d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055da:	d00c      	beq.n	80055f6 <UART_SetConfig+0x252>
 80055dc:	e00f      	b.n	80055fe <UART_SetConfig+0x25a>
 80055de:	2300      	movs	r3, #0
 80055e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055e4:	e042      	b.n	800566c <UART_SetConfig+0x2c8>
 80055e6:	2302      	movs	r3, #2
 80055e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ec:	e03e      	b.n	800566c <UART_SetConfig+0x2c8>
 80055ee:	2304      	movs	r3, #4
 80055f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f4:	e03a      	b.n	800566c <UART_SetConfig+0x2c8>
 80055f6:	2308      	movs	r3, #8
 80055f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fc:	e036      	b.n	800566c <UART_SetConfig+0x2c8>
 80055fe:	2310      	movs	r3, #16
 8005600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005604:	bf00      	nop
 8005606:	e031      	b.n	800566c <UART_SetConfig+0x2c8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a2c      	ldr	r2, [pc, #176]	; (80056c0 <UART_SetConfig+0x31c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d129      	bne.n	8005666 <UART_SetConfig+0x2c2>
 8005612:	4b2d      	ldr	r3, [pc, #180]	; (80056c8 <UART_SetConfig+0x324>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800561c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005620:	d014      	beq.n	800564c <UART_SetConfig+0x2a8>
 8005622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005626:	d802      	bhi.n	800562e <UART_SetConfig+0x28a>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <UART_SetConfig+0x298>
 800562c:	e016      	b.n	800565c <UART_SetConfig+0x2b8>
 800562e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005632:	d007      	beq.n	8005644 <UART_SetConfig+0x2a0>
 8005634:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005638:	d00c      	beq.n	8005654 <UART_SetConfig+0x2b0>
 800563a:	e00f      	b.n	800565c <UART_SetConfig+0x2b8>
 800563c:	2300      	movs	r3, #0
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005642:	e013      	b.n	800566c <UART_SetConfig+0x2c8>
 8005644:	2302      	movs	r3, #2
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564a:	e00f      	b.n	800566c <UART_SetConfig+0x2c8>
 800564c:	2304      	movs	r3, #4
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005652:	e00b      	b.n	800566c <UART_SetConfig+0x2c8>
 8005654:	2308      	movs	r3, #8
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565a:	e007      	b.n	800566c <UART_SetConfig+0x2c8>
 800565c:	2310      	movs	r3, #16
 800565e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005662:	bf00      	nop
 8005664:	e002      	b.n	800566c <UART_SetConfig+0x2c8>
 8005666:	2310      	movs	r3, #16
 8005668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <UART_SetConfig+0x31c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	f040 80fe 	bne.w	8005874 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005678:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800567c:	2b08      	cmp	r3, #8
 800567e:	d837      	bhi.n	80056f0 <UART_SetConfig+0x34c>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <UART_SetConfig+0x2e4>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	080056ad 	.word	0x080056ad
 800568c:	080056f1 	.word	0x080056f1
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056f1 	.word	0x080056f1
 8005698:	080056e1 	.word	0x080056e1
 800569c:	080056f1 	.word	0x080056f1
 80056a0:	080056f1 	.word	0x080056f1
 80056a4:	080056f1 	.word	0x080056f1
 80056a8:	080056e9 	.word	0x080056e9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80056ac:	f7fe ffc2 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80056b0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80056b2:	e020      	b.n	80056f6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <UART_SetConfig+0x338>)
 80056b6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80056b8:	e01d      	b.n	80056f6 <UART_SetConfig+0x352>
 80056ba:	bf00      	nop
 80056bc:	efff69f3 	.word	0xefff69f3
 80056c0:	40008000 	.word	0x40008000
 80056c4:	40013800 	.word	0x40013800
 80056c8:	40021000 	.word	0x40021000
 80056cc:	40004400 	.word	0x40004400
 80056d0:	40004800 	.word	0x40004800
 80056d4:	40004c00 	.word	0x40004c00
 80056d8:	40005000 	.word	0x40005000
 80056dc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80056e0:	f7fe ff12 	bl	8004508 <HAL_RCC_GetSysClockFreq>
 80056e4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80056e6:	e006      	b.n	80056f6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80056e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80056ee:	e002      	b.n	80056f6 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	76fb      	strb	r3, [r7, #27]
        break;
 80056f4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 81b9 	beq.w	8005a70 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	4413      	add	r3, r2
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	429a      	cmp	r2, r3
 800570c:	d305      	bcc.n	800571a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	429a      	cmp	r2, r3
 8005718:	d902      	bls.n	8005720 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	76fb      	strb	r3, [r7, #27]
 800571e:	e1a7      	b.n	8005a70 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8005720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005724:	2b08      	cmp	r3, #8
 8005726:	f200 8092 	bhi.w	800584e <UART_SetConfig+0x4aa>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <UART_SetConfig+0x38c>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005755 	.word	0x08005755
 8005734:	0800584f 	.word	0x0800584f
 8005738:	080057a3 	.word	0x080057a3
 800573c:	0800584f 	.word	0x0800584f
 8005740:	080057d7 	.word	0x080057d7
 8005744:	0800584f 	.word	0x0800584f
 8005748:	0800584f 	.word	0x0800584f
 800574c:	0800584f 	.word	0x0800584f
 8005750:	08005825 	.word	0x08005825
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005754:	f7fe ff6e 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8005758:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4619      	mov	r1, r3
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	f04f 0400 	mov.w	r4, #0
 800576a:	0214      	lsls	r4, r2, #8
 800576c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005770:	020b      	lsls	r3, r1, #8
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6852      	ldr	r2, [r2, #4]
 8005776:	0852      	lsrs	r2, r2, #1
 8005778:	4611      	mov	r1, r2
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	eb13 0b01 	adds.w	fp, r3, r1
 8005782:	eb44 0c02 	adc.w	ip, r4, r2
 8005786:	4658      	mov	r0, fp
 8005788:	4661      	mov	r1, ip
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f04f 0400 	mov.w	r4, #0
 8005792:	461a      	mov	r2, r3
 8005794:	4623      	mov	r3, r4
 8005796:	f7fa fd73 	bl	8000280 <__aeabi_uldivmod>
 800579a:	4603      	mov	r3, r0
 800579c:	460c      	mov	r4, r1
 800579e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80057a0:	e058      	b.n	8005854 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	f04f 0400 	mov.w	r4, #0
 80057ac:	49ae      	ldr	r1, [pc, #696]	; (8005a68 <UART_SetConfig+0x6c4>)
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	eb13 0b01 	adds.w	fp, r3, r1
 80057b6:	eb44 0c02 	adc.w	ip, r4, r2
 80057ba:	4658      	mov	r0, fp
 80057bc:	4661      	mov	r1, ip
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f04f 0400 	mov.w	r4, #0
 80057c6:	461a      	mov	r2, r3
 80057c8:	4623      	mov	r3, r4
 80057ca:	f7fa fd59 	bl	8000280 <__aeabi_uldivmod>
 80057ce:	4603      	mov	r3, r0
 80057d0:	460c      	mov	r4, r1
 80057d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80057d4:	e03e      	b.n	8005854 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80057d6:	f7fe fe97 	bl	8004508 <HAL_RCC_GetSysClockFreq>
 80057da:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	4619      	mov	r1, r3
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	f04f 0400 	mov.w	r4, #0
 80057ec:	0214      	lsls	r4, r2, #8
 80057ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80057f2:	020b      	lsls	r3, r1, #8
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6852      	ldr	r2, [r2, #4]
 80057f8:	0852      	lsrs	r2, r2, #1
 80057fa:	4611      	mov	r1, r2
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	eb13 0b01 	adds.w	fp, r3, r1
 8005804:	eb44 0c02 	adc.w	ip, r4, r2
 8005808:	4658      	mov	r0, fp
 800580a:	4661      	mov	r1, ip
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f04f 0400 	mov.w	r4, #0
 8005814:	461a      	mov	r2, r3
 8005816:	4623      	mov	r3, r4
 8005818:	f7fa fd32 	bl	8000280 <__aeabi_uldivmod>
 800581c:	4603      	mov	r3, r0
 800581e:	460c      	mov	r4, r1
 8005820:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005822:	e017      	b.n	8005854 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	085b      	lsrs	r3, r3, #1
 800582a:	f04f 0400 	mov.w	r4, #0
 800582e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005832:	f144 0100 	adc.w	r1, r4, #0
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f04f 0400 	mov.w	r4, #0
 800583e:	461a      	mov	r2, r3
 8005840:	4623      	mov	r3, r4
 8005842:	f7fa fd1d 	bl	8000280 <__aeabi_uldivmod>
 8005846:	4603      	mov	r3, r0
 8005848:	460c      	mov	r4, r1
 800584a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800584c:	e002      	b.n	8005854 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	76fb      	strb	r3, [r7, #27]
            break;
 8005852:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800585a:	d308      	bcc.n	800586e <UART_SetConfig+0x4ca>
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005862:	d204      	bcs.n	800586e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	60da      	str	r2, [r3, #12]
 800586c:	e100      	b.n	8005a70 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	76fb      	strb	r3, [r7, #27]
 8005872:	e0fd      	b.n	8005a70 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800587c:	f040 8084 	bne.w	8005988 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8005880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005884:	2b08      	cmp	r3, #8
 8005886:	d85f      	bhi.n	8005948 <UART_SetConfig+0x5a4>
 8005888:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0x4ec>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058b5 	.word	0x080058b5
 8005894:	080058d5 	.word	0x080058d5
 8005898:	080058f5 	.word	0x080058f5
 800589c:	08005949 	.word	0x08005949
 80058a0:	08005911 	.word	0x08005911
 80058a4:	08005949 	.word	0x08005949
 80058a8:	08005949 	.word	0x08005949
 80058ac:	08005949 	.word	0x08005949
 80058b0:	08005931 	.word	0x08005931
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b4:	f7fe febe 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80058b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	005a      	lsls	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	441a      	add	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058d2:	e03c      	b.n	800594e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058d4:	f7fe fec4 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 80058d8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	005a      	lsls	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	441a      	add	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058f2:	e02c      	b.n	800594e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80058fe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6852      	ldr	r2, [r2, #4]
 8005906:	fbb3 f3f2 	udiv	r3, r3, r2
 800590a:	b29b      	uxth	r3, r3
 800590c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800590e:	e01e      	b.n	800594e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005910:	f7fe fdfa 	bl	8004508 <HAL_RCC_GetSysClockFreq>
 8005914:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	005a      	lsls	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	085b      	lsrs	r3, r3, #1
 8005920:	441a      	add	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	fbb2 f3f3 	udiv	r3, r2, r3
 800592a:	b29b      	uxth	r3, r3
 800592c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800592e:	e00e      	b.n	800594e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005942:	b29b      	uxth	r3, r3
 8005944:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005946:	e002      	b.n	800594e <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	76fb      	strb	r3, [r7, #27]
        break;
 800594c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	2b0f      	cmp	r3, #15
 8005952:	d916      	bls.n	8005982 <UART_SetConfig+0x5de>
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595a:	d212      	bcs.n	8005982 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f023 030f 	bic.w	r3, r3, #15
 8005964:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	b29b      	uxth	r3, r3
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	b29a      	uxth	r2, r3
 8005972:	89fb      	ldrh	r3, [r7, #14]
 8005974:	4313      	orrs	r3, r2
 8005976:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	89fa      	ldrh	r2, [r7, #14]
 800597e:	60da      	str	r2, [r3, #12]
 8005980:	e076      	b.n	8005a70 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	76fb      	strb	r3, [r7, #27]
 8005986:	e073      	b.n	8005a70 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8005988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800598c:	2b08      	cmp	r3, #8
 800598e:	d85c      	bhi.n	8005a4a <UART_SetConfig+0x6a6>
 8005990:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <UART_SetConfig+0x5f4>)
 8005992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005996:	bf00      	nop
 8005998:	080059bd 	.word	0x080059bd
 800599c:	080059db 	.word	0x080059db
 80059a0:	080059f9 	.word	0x080059f9
 80059a4:	08005a4b 	.word	0x08005a4b
 80059a8:	08005a15 	.word	0x08005a15
 80059ac:	08005a4b 	.word	0x08005a4b
 80059b0:	08005a4b 	.word	0x08005a4b
 80059b4:	08005a4b 	.word	0x08005a4b
 80059b8:	08005a33 	.word	0x08005a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059bc:	f7fe fe3a 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80059c0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	085a      	lsrs	r2, r3, #1
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	441a      	add	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80059d8:	e03a      	b.n	8005a50 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059da:	f7fe fe41 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 80059de:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	085a      	lsrs	r2, r3, #1
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	441a      	add	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80059f6:	e02b      	b.n	8005a50 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005a02:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6852      	ldr	r2, [r2, #4]
 8005a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a12:	e01d      	b.n	8005a50 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a14:	f7fe fd78 	bl	8004508 <HAL_RCC_GetSysClockFreq>
 8005a18:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	085a      	lsrs	r2, r3, #1
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	441a      	add	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a30:	e00e      	b.n	8005a50 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a48:	e002      	b.n	8005a50 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	76fb      	strb	r3, [r7, #27]
        break;
 8005a4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	2b0f      	cmp	r3, #15
 8005a54:	d90a      	bls.n	8005a6c <UART_SetConfig+0x6c8>
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5c:	d206      	bcs.n	8005a6c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	e003      	b.n	8005a70 <UART_SetConfig+0x6cc>
 8005a68:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005a7c:	7efb      	ldrb	r3, [r7, #27]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3728      	adds	r7, #40	; 0x28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01a      	beq.n	8005b9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b86:	d10a      	bne.n	8005b9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	605a      	str	r2, [r3, #4]
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005bda:	f7fa ff63 	bl	8000aa4 <HAL_GetTick>
 8005bde:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d10e      	bne.n	8005c0c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f82a 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e020      	b.n	8005c4e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d10e      	bne.n	8005c38 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f814 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e00a      	b.n	8005c4e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	603b      	str	r3, [r7, #0]
 8005c62:	4613      	mov	r3, r2
 8005c64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c66:	e05d      	b.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	d059      	beq.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c70:	f7fa ff18 	bl	8000aa4 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d302      	bcc.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d11b      	bne.n	8005cbe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c94:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0201 	bic.w	r2, r2, #1
 8005ca4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e042      	b.n	8005d44 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d02b      	beq.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cda:	d123      	bne.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ce4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cf4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0201 	bic.w	r2, r2, #1
 8005d04:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2220      	movs	r2, #32
 8005d16:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e00f      	b.n	8005d44 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69da      	ldr	r2, [r3, #28]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	bf0c      	ite	eq
 8005d34:	2301      	moveq	r3, #1
 8005d36:	2300      	movne	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d092      	beq.n	8005c68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	f107 001c 	add.w	r0, r7, #28
 8005d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d122      	bne.n	8005daa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d105      	bne.n	8005d9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa28 	bl	80061f4 <USB_CoreReset>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	e01a      	b.n	8005de0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa1c 	bl	80061f4 <USB_CoreReset>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8005dd2:	e005      	b.n	8005de0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dec:	b004      	add	sp, #16
 8005dee:	4770      	bx	lr

08005df0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f023 0201 	bic.w	r2, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d106      	bne.n	8005e3e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60da      	str	r2, [r3, #12]
 8005e3c:	e00b      	b.n	8005e56 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60da      	str	r2, [r3, #12]
 8005e50:	e001      	b.n	8005e56 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e003      	b.n	8005e5e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005e56:	2032      	movs	r0, #50	; 0x32
 8005e58:	f7fa fe30 	bl	8000abc <HAL_Delay>

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e68:	b084      	sub	sp, #16
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e82:	2300      	movs	r3, #0
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	e009      	b.n	8005e9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3340      	adds	r3, #64	; 0x40
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	2200      	movs	r2, #0
 8005e94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	613b      	str	r3, [r7, #16]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2b0e      	cmp	r3, #14
 8005ea0:	d9f2      	bls.n	8005e88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d11c      	bne.n	8005ee2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eb6:	f043 0302 	orr.w	r3, r3, #2
 8005eba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	e005      	b.n	8005eee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f00:	4619      	mov	r1, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f08:	461a      	mov	r2, r3
 8005f0a:	680b      	ldr	r3, [r1, #0]
 8005f0c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f0e:	2103      	movs	r1, #3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f93d 	bl	8006190 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f16:	2110      	movs	r1, #16
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f8f1 	bl	8006100 <USB_FlushTxFifo>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f90f 	bl	800614c <USB_FlushRxFifo>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2300      	movs	r3, #0
 8005f42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f56:	461a      	mov	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	e043      	b.n	8005fea <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f78:	d118      	bne.n	8005fac <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	e013      	b.n	8005fbe <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	e008      	b.n	8005fbe <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	461a      	mov	r2, r3
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d3b7      	bcc.n	8005f62 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	e043      	b.n	8006080 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800600a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800600e:	d118      	bne.n	8006042 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006022:	461a      	mov	r2, r3
 8006024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	e013      	b.n	8006054 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006038:	461a      	mov	r2, r3
 800603a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	e008      	b.n	8006054 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604e:	461a      	mov	r2, r3
 8006050:	2300      	movs	r3, #0
 8006052:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006060:	461a      	mov	r2, r3
 8006062:	2300      	movs	r3, #0
 8006064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006072:	461a      	mov	r2, r3
 8006074:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006078:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3301      	adds	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	429a      	cmp	r2, r3
 8006086:	d3b7      	bcc.n	8005ff8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800609a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f043 0210 	orr.w	r2, r3, #16
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	4b10      	ldr	r3, [pc, #64]	; (80060fc <USB_DevInit+0x294>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	f043 0208 	orr.w	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d107      	bne.n	80060ea <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060e2:	f043 0304 	orr.w	r3, r3, #4
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060f6:	b004      	add	sp, #16
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	803c3800 	.word	0x803c3800

08006100 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	019b      	lsls	r3, r3, #6
 8006112:	f043 0220 	orr.w	r2, r3, #32
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3301      	adds	r3, #1
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4a09      	ldr	r2, [pc, #36]	; (8006148 <USB_FlushTxFifo+0x48>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d901      	bls.n	800612c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e006      	b.n	800613a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b20      	cmp	r3, #32
 8006136:	d0f0      	beq.n	800611a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	00030d40 	.word	0x00030d40

0800614c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2210      	movs	r2, #16
 800615c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3301      	adds	r3, #1
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4a09      	ldr	r2, [pc, #36]	; (800618c <USB_FlushRxFifo+0x40>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d901      	bls.n	8006170 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e006      	b.n	800617e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	2b10      	cmp	r3, #16
 800617a:	d0f0      	beq.n	800615e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	00030d40 	.word	0x00030d40

08006190 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061b0:	4313      	orrs	r3, r2
 80061b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061dc:	f043 0302 	orr.w	r3, r3, #2
 80061e0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80061e2:	2003      	movs	r0, #3
 80061e4:	f7fa fc6a 	bl	8000abc <HAL_Delay>

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4a13      	ldr	r2, [pc, #76]	; (8006258 <USB_CoreReset+0x64>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e01b      	b.n	800624a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	daf2      	bge.n	8006200 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f043 0201 	orr.w	r2, r3, #1
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4a09      	ldr	r2, [pc, #36]	; (8006258 <USB_CoreReset+0x64>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d901      	bls.n	800623c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e006      	b.n	800624a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b01      	cmp	r3, #1
 8006246:	d0f0      	beq.n	800622a <USB_CoreReset+0x36>

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	00030d40 	.word	0x00030d40

0800625c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800625c:	b5b0      	push	{r4, r5, r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006260:	f7fa fbbc 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006264:	f000 fa22 	bl	80066ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006268:	f000 fcb8 	bl	8006bdc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800626c:	f000 fb4e 	bl	800690c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8006270:	f000 fb84 	bl	800697c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8006274:	f000 fbc0 	bl	80069f8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8006278:	f000 fbe4 	bl	8006a44 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800627c:	f000 fc20 	bl	8006ac0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8006280:	f000 fc4e 	bl	8006b20 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8006284:	f000 fc7c 	bl	8006b80 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8006288:	f000 fab6 	bl	80067f8 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BSP_TSENSOR_Init();
 800628c:	f7fa fac8 	bl	8000820 <BSP_TSENSOR_Init>

  while (1)
  {
	  printf("\e[1;1H\e[2J");							//Clear Screen
 8006290:	48ab      	ldr	r0, [pc, #684]	; (8006540 <main+0x2e4>)
 8006292:	f001 fb97 	bl	80079c4 <iprintf>

	  //Power on/off
	  if((HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin) == 0) & (power == 0))  powerOn();
 8006296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800629a:	48aa      	ldr	r0, [pc, #680]	; (8006544 <main+0x2e8>)
 800629c:	f7fc fbca 	bl	8002a34 <HAL_GPIO_ReadPin>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bf0c      	ite	eq
 80062a6:	2301      	moveq	r3, #1
 80062a8:	2300      	movne	r3, #0
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	4ba6      	ldr	r3, [pc, #664]	; (8006548 <main+0x2ec>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	bf0c      	ite	eq
 80062b4:	2301      	moveq	r3, #1
 80062b6:	2300      	movne	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	4013      	ands	r3, r2
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <main+0x6c>
 80062c2:	f000 fe33 	bl	8006f2c <powerOn>
 80062c6:	e017      	b.n	80062f8 <main+0x9c>
	  else if((HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin) == 0) & (power != 0)) powerOff();
 80062c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062cc:	489d      	ldr	r0, [pc, #628]	; (8006544 <main+0x2e8>)
 80062ce:	f7fc fbb1 	bl	8002a34 <HAL_GPIO_ReadPin>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	4b9a      	ldr	r3, [pc, #616]	; (8006548 <main+0x2ec>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	bf14      	ite	ne
 80062e6:	2301      	movne	r3, #1
 80062e8:	2300      	moveq	r3, #0
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	4013      	ands	r3, r2
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <main+0x9c>
 80062f4:	f000 fe42 	bl	8006f7c <powerOff>

	  // 1 min AutoOff function
	  if(autoOffcntr == 600)
 80062f8:	4b94      	ldr	r3, [pc, #592]	; (800654c <main+0x2f0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8006300:	d101      	bne.n	8006306 <main+0xaa>
	  {
		  powerOff();
 8006302:	f000 fe3b 	bl	8006f7c <powerOff>
	  }

	  if(power)
 8006306:	4b90      	ldr	r3, [pc, #576]	; (8006548 <main+0x2ec>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0c0      	beq.n	8006290 <main+0x34>
	  {
		  HAL_ADC_Start(&hadc1);
 800630e:	4890      	ldr	r0, [pc, #576]	; (8006550 <main+0x2f4>)
 8006310:	f7fa ff6e 	bl	80011f0 <HAL_ADC_Start>
		  //read Buttons
		  halResult1 = HAL_ADC_PollForConversion(&hadc1, 100);
 8006314:	2164      	movs	r1, #100	; 0x64
 8006316:	488e      	ldr	r0, [pc, #568]	; (8006550 <main+0x2f4>)
 8006318:	f7fb f858 	bl	80013cc <HAL_ADC_PollForConversion>
 800631c:	4603      	mov	r3, r0
 800631e:	461a      	mov	r2, r3
 8006320:	4b8c      	ldr	r3, [pc, #560]	; (8006554 <main+0x2f8>)
 8006322:	701a      	strb	r2, [r3, #0]
		  adcResult1 = HAL_ADC_GetValue(&hadc1);
 8006324:	488a      	ldr	r0, [pc, #552]	; (8006550 <main+0x2f4>)
 8006326:	f7fb f921 	bl	800156c <HAL_ADC_GetValue>
 800632a:	4602      	mov	r2, r0
 800632c:	4b8a      	ldr	r3, [pc, #552]	; (8006558 <main+0x2fc>)
 800632e:	601a      	str	r2, [r3, #0]
		  //read water level sensor
		  halResult1 = HAL_ADC_PollForConversion(&hadc1, 100);
 8006330:	2164      	movs	r1, #100	; 0x64
 8006332:	4887      	ldr	r0, [pc, #540]	; (8006550 <main+0x2f4>)
 8006334:	f7fb f84a 	bl	80013cc <HAL_ADC_PollForConversion>
 8006338:	4603      	mov	r3, r0
 800633a:	461a      	mov	r2, r3
 800633c:	4b85      	ldr	r3, [pc, #532]	; (8006554 <main+0x2f8>)
 800633e:	701a      	strb	r2, [r3, #0]
		  adcResult2 = HAL_ADC_GetValue(&hadc1);
 8006340:	4883      	ldr	r0, [pc, #524]	; (8006550 <main+0x2f4>)
 8006342:	f7fb f913 	bl	800156c <HAL_ADC_GetValue>
 8006346:	4602      	mov	r2, r0
 8006348:	4b84      	ldr	r3, [pc, #528]	; (800655c <main+0x300>)
 800634a:	601a      	str	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 800634c:	4880      	ldr	r0, [pc, #512]	; (8006550 <main+0x2f4>)
 800634e:	f7fb f809 	bl	8001364 <HAL_ADC_Stop>

		  // Strong brew Button
		  if((adcResult1 > 100) & (adcResult1 <= 200))
 8006352:	4b81      	ldr	r3, [pc, #516]	; (8006558 <main+0x2fc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b64      	cmp	r3, #100	; 0x64
 8006358:	bf8c      	ite	hi
 800635a:	2301      	movhi	r3, #1
 800635c:	2300      	movls	r3, #0
 800635e:	b2da      	uxtb	r2, r3
 8006360:	4b7d      	ldr	r3, [pc, #500]	; (8006558 <main+0x2fc>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2bc8      	cmp	r3, #200	; 0xc8
 8006366:	bf94      	ite	ls
 8006368:	2301      	movls	r3, #1
 800636a:	2300      	movhi	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	4013      	ands	r3, r2
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00c      	beq.n	8006390 <main+0x134>
		  {
			  HAL_GPIO_TogglePin(ARD_D6_GPIO_Port, ARD_D6_Pin);
 8006376:	2102      	movs	r1, #2
 8006378:	4879      	ldr	r0, [pc, #484]	; (8006560 <main+0x304>)
 800637a:	f7fc fb8b 	bl	8002a94 <HAL_GPIO_TogglePin>
			  strongBrew = 1;
 800637e:	4b79      	ldr	r3, [pc, #484]	; (8006564 <main+0x308>)
 8006380:	2201      	movs	r2, #1
 8006382:	601a      	str	r2, [r3, #0]
			  autoOffcntr = 0;
 8006384:	4b71      	ldr	r3, [pc, #452]	; (800654c <main+0x2f0>)
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
			  HAL_Delay(200);
 800638a:	20c8      	movs	r0, #200	; 0xc8
 800638c:	f7fa fb96 	bl	8000abc <HAL_Delay>
		  }

		  //Cups Buttons
		  if((adcResult1 > 200) & (adcResult1 <= 350))
 8006390:	4b71      	ldr	r3, [pc, #452]	; (8006558 <main+0x2fc>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2bc8      	cmp	r3, #200	; 0xc8
 8006396:	bf8c      	ite	hi
 8006398:	2301      	movhi	r3, #1
 800639a:	2300      	movls	r3, #0
 800639c:	b2da      	uxtb	r2, r3
 800639e:	4b6e      	ldr	r3, [pc, #440]	; (8006558 <main+0x2fc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80063a6:	bf94      	ite	ls
 80063a8:	2301      	movls	r3, #1
 80063aa:	2300      	movhi	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	4013      	ands	r3, r2
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d025      	beq.n	8006402 <main+0x1a6>
		  {
			  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D7_Pin, GPIO_PIN_SET);
 80063b6:	2201      	movs	r2, #1
 80063b8:	2110      	movs	r1, #16
 80063ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063be:	f7fc fb51 	bl	8002a64 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, GPIO_PIN_RESET);
 80063c2:	2200      	movs	r2, #0
 80063c4:	2104      	movs	r1, #4
 80063c6:	4866      	ldr	r0, [pc, #408]	; (8006560 <main+0x304>)
 80063c8:	f7fc fb4c 	bl	8002a64 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_RESET);
 80063cc:	2200      	movs	r2, #0
 80063ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063d6:	f7fc fb45 	bl	8002a64 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_RESET);
 80063da:	2200      	movs	r2, #0
 80063dc:	2104      	movs	r1, #4
 80063de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063e2:	f7fc fb3f 	bl	8002a64 <HAL_GPIO_WritePin>
			  autoOffcntr = 0;
 80063e6:	4b59      	ldr	r3, [pc, #356]	; (800654c <main+0x2f0>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
			  if(addWater) addWaterf();
 80063ec:	4b5e      	ldr	r3, [pc, #376]	; (8006568 <main+0x30c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <main+0x19e>
 80063f4:	f000 fdfe 	bl	8006ff4 <addWaterf>
 80063f8:	e0bd      	b.n	8006576 <main+0x31a>
			  else cupSize = 12;
 80063fa:	4b5c      	ldr	r3, [pc, #368]	; (800656c <main+0x310>)
 80063fc:	220c      	movs	r2, #12
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	e0b9      	b.n	8006576 <main+0x31a>
		  }
		  else if((adcResult1 > 350) & (adcResult1 <= 550))
 8006402:	4b55      	ldr	r3, [pc, #340]	; (8006558 <main+0x2fc>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800640a:	bf8c      	ite	hi
 800640c:	2301      	movhi	r3, #1
 800640e:	2300      	movls	r3, #0
 8006410:	b2da      	uxtb	r2, r3
 8006412:	4b51      	ldr	r3, [pc, #324]	; (8006558 <main+0x2fc>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f240 2126 	movw	r1, #550	; 0x226
 800641a:	428b      	cmp	r3, r1
 800641c:	bf94      	ite	ls
 800641e:	2301      	movls	r3, #1
 8006420:	2300      	movhi	r3, #0
 8006422:	b2db      	uxtb	r3, r3
 8006424:	4013      	ands	r3, r2
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d025      	beq.n	8006478 <main+0x21c>
		  {
			  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET);
 800642c:	2200      	movs	r2, #0
 800642e:	2110      	movs	r1, #16
 8006430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006434:	f7fc fb16 	bl	8002a64 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, GPIO_PIN_SET);
 8006438:	2201      	movs	r2, #1
 800643a:	2104      	movs	r1, #4
 800643c:	4848      	ldr	r0, [pc, #288]	; (8006560 <main+0x304>)
 800643e:	f7fc fb11 	bl	8002a64 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_RESET);
 8006442:	2200      	movs	r2, #0
 8006444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800644c:	f7fc fb0a 	bl	8002a64 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_RESET);
 8006450:	2200      	movs	r2, #0
 8006452:	2104      	movs	r1, #4
 8006454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006458:	f7fc fb04 	bl	8002a64 <HAL_GPIO_WritePin>
			  autoOffcntr = 0;
 800645c:	4b3b      	ldr	r3, [pc, #236]	; (800654c <main+0x2f0>)
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]
			  if(addWater) addWaterf();
 8006462:	4b41      	ldr	r3, [pc, #260]	; (8006568 <main+0x30c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <main+0x214>
 800646a:	f000 fdc3 	bl	8006ff4 <addWaterf>
 800646e:	e082      	b.n	8006576 <main+0x31a>
			  else cupSize = 10;
 8006470:	4b3e      	ldr	r3, [pc, #248]	; (800656c <main+0x310>)
 8006472:	220a      	movs	r2, #10
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	e07e      	b.n	8006576 <main+0x31a>
		  }
		  else if((adcResult1 > 550) & (adcResult1 <= 695))
 8006478:	4b37      	ldr	r3, [pc, #220]	; (8006558 <main+0x2fc>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f240 2226 	movw	r2, #550	; 0x226
 8006480:	4293      	cmp	r3, r2
 8006482:	bf8c      	ite	hi
 8006484:	2301      	movhi	r3, #1
 8006486:	2300      	movls	r3, #0
 8006488:	b2da      	uxtb	r2, r3
 800648a:	4b33      	ldr	r3, [pc, #204]	; (8006558 <main+0x2fc>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f240 21b7 	movw	r1, #695	; 0x2b7
 8006492:	428b      	cmp	r3, r1
 8006494:	bf94      	ite	ls
 8006496:	2301      	movls	r3, #1
 8006498:	2300      	movhi	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	4013      	ands	r3, r2
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d025      	beq.n	80064f0 <main+0x294>
		  {
			  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET);
 80064a4:	2200      	movs	r2, #0
 80064a6:	2110      	movs	r1, #16
 80064a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064ac:	f7fc fada 	bl	8002a64 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, GPIO_PIN_RESET);
 80064b0:	2200      	movs	r2, #0
 80064b2:	2104      	movs	r1, #4
 80064b4:	482a      	ldr	r0, [pc, #168]	; (8006560 <main+0x304>)
 80064b6:	f7fc fad5 	bl	8002a64 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_SET);
 80064ba:	2201      	movs	r2, #1
 80064bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064c4:	f7fc face 	bl	8002a64 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_RESET);
 80064c8:	2200      	movs	r2, #0
 80064ca:	2104      	movs	r1, #4
 80064cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064d0:	f7fc fac8 	bl	8002a64 <HAL_GPIO_WritePin>
			  autoOffcntr = 0;
 80064d4:	4b1d      	ldr	r3, [pc, #116]	; (800654c <main+0x2f0>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]
			  if(addWater) addWaterf();
 80064da:	4b23      	ldr	r3, [pc, #140]	; (8006568 <main+0x30c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <main+0x28c>
 80064e2:	f000 fd87 	bl	8006ff4 <addWaterf>
 80064e6:	e046      	b.n	8006576 <main+0x31a>
			  else cupSize = 8;
 80064e8:	4b20      	ldr	r3, [pc, #128]	; (800656c <main+0x310>)
 80064ea:	2208      	movs	r2, #8
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e042      	b.n	8006576 <main+0x31a>
		  }
		  else if(adcResult1 > 695)
 80064f0:	4b19      	ldr	r3, [pc, #100]	; (8006558 <main+0x2fc>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f5b3 7f2e 	cmp.w	r3, #696	; 0x2b8
 80064f8:	d33d      	bcc.n	8006576 <main+0x31a>
		  {
			  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET);
 80064fa:	2200      	movs	r2, #0
 80064fc:	2110      	movs	r1, #16
 80064fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006502:	f7fc faaf 	bl	8002a64 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, GPIO_PIN_RESET);
 8006506:	2200      	movs	r2, #0
 8006508:	2104      	movs	r1, #4
 800650a:	4815      	ldr	r0, [pc, #84]	; (8006560 <main+0x304>)
 800650c:	f7fc faaa 	bl	8002a64 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_RESET);
 8006510:	2200      	movs	r2, #0
 8006512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800651a:	f7fc faa3 	bl	8002a64 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_SET);
 800651e:	2201      	movs	r2, #1
 8006520:	2104      	movs	r1, #4
 8006522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006526:	f7fc fa9d 	bl	8002a64 <HAL_GPIO_WritePin>
			  autoOffcntr = 0;
 800652a:	4b08      	ldr	r3, [pc, #32]	; (800654c <main+0x2f0>)
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
			  if(addWater) addWaterf();
 8006530:	4b0d      	ldr	r3, [pc, #52]	; (8006568 <main+0x30c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01b      	beq.n	8006570 <main+0x314>
 8006538:	f000 fd5c 	bl	8006ff4 <addWaterf>
 800653c:	e01b      	b.n	8006576 <main+0x31a>
 800653e:	bf00      	nop
 8006540:	08008850 	.word	0x08008850
 8006544:	48000800 	.word	0x48000800
 8006548:	2000020c 	.word	0x2000020c
 800654c:	200006e4 	.word	0x200006e4
 8006550:	20000750 	.word	0x20000750
 8006554:	20000834 	.word	0x20000834
 8006558:	200001e4 	.word	0x200001e4
 800655c:	20000838 	.word	0x20000838
 8006560:	48000400 	.word	0x48000400
 8006564:	2000074c 	.word	0x2000074c
 8006568:	200001e8 	.word	0x200001e8
 800656c:	200000c8 	.word	0x200000c8
			  else cupSize = 6;
 8006570:	4b42      	ldr	r3, [pc, #264]	; (800667c <main+0x420>)
 8006572:	2206      	movs	r2, #6
 8006574:	601a      	str	r2, [r3, #0]
		  }


		  //Water level sensor
		  if(adcResult2 < 700)
 8006576:	4b42      	ldr	r3, [pc, #264]	; (8006680 <main+0x424>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800657e:	d20e      	bcs.n	800659e <main+0x342>
			  {
			  addWater = 1;
 8006580:	4b40      	ldr	r3, [pc, #256]	; (8006684 <main+0x428>)
 8006582:	2201      	movs	r2, #1
 8006584:	601a      	str	r2, [r3, #0]
			  strcpy(firstRow, "\n\r  Water: □");
 8006586:	4a40      	ldr	r2, [pc, #256]	; (8006688 <main+0x42c>)
 8006588:	4b40      	ldr	r3, [pc, #256]	; (800668c <main+0x430>)
 800658a:	4614      	mov	r4, r2
 800658c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800658e:	6020      	str	r0, [r4, #0]
 8006590:	6061      	str	r1, [r4, #4]
 8006592:	60a2      	str	r2, [r4, #8]
 8006594:	881a      	ldrh	r2, [r3, #0]
 8006596:	789b      	ldrb	r3, [r3, #2]
 8006598:	81a2      	strh	r2, [r4, #12]
 800659a:	73a3      	strb	r3, [r4, #14]
 800659c:	e037      	b.n	800660e <main+0x3b2>
			  }
		  else if(adcResult2 < 800)
 800659e:	4b38      	ldr	r3, [pc, #224]	; (8006680 <main+0x424>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80065a6:	d20e      	bcs.n	80065c6 <main+0x36a>
			  {
			  addWater = 0;
 80065a8:	4b36      	ldr	r3, [pc, #216]	; (8006684 <main+0x428>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
			  strcpy(firstRow, "\n\r  Water: ■");
 80065ae:	4a36      	ldr	r2, [pc, #216]	; (8006688 <main+0x42c>)
 80065b0:	4b37      	ldr	r3, [pc, #220]	; (8006690 <main+0x434>)
 80065b2:	4614      	mov	r4, r2
 80065b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80065b6:	6020      	str	r0, [r4, #0]
 80065b8:	6061      	str	r1, [r4, #4]
 80065ba:	60a2      	str	r2, [r4, #8]
 80065bc:	881a      	ldrh	r2, [r3, #0]
 80065be:	789b      	ldrb	r3, [r3, #2]
 80065c0:	81a2      	strh	r2, [r4, #12]
 80065c2:	73a3      	strb	r3, [r4, #14]
 80065c4:	e023      	b.n	800660e <main+0x3b2>
			  }
		  else if(adcResult2 < 1000)
 80065c6:	4b2e      	ldr	r3, [pc, #184]	; (8006680 <main+0x424>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065ce:	d20e      	bcs.n	80065ee <main+0x392>
			  {
			  addWater = 0;
 80065d0:	4b2c      	ldr	r3, [pc, #176]	; (8006684 <main+0x428>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
			  strcpy(firstRow, "\n\r  Water: ■■");
 80065d6:	4a2c      	ldr	r2, [pc, #176]	; (8006688 <main+0x42c>)
 80065d8:	4b2e      	ldr	r3, [pc, #184]	; (8006694 <main+0x438>)
 80065da:	4615      	mov	r5, r2
 80065dc:	461c      	mov	r4, r3
 80065de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065e0:	6028      	str	r0, [r5, #0]
 80065e2:	6069      	str	r1, [r5, #4]
 80065e4:	60aa      	str	r2, [r5, #8]
 80065e6:	60eb      	str	r3, [r5, #12]
 80065e8:	8823      	ldrh	r3, [r4, #0]
 80065ea:	822b      	strh	r3, [r5, #16]
 80065ec:	e00f      	b.n	800660e <main+0x3b2>
			  }
		  else
			  {
			  addWater = 0;
 80065ee:	4b25      	ldr	r3, [pc, #148]	; (8006684 <main+0x428>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
			  strcpy(firstRow, "\n\r  Water: ■■■");
 80065f4:	4a24      	ldr	r2, [pc, #144]	; (8006688 <main+0x42c>)
 80065f6:	4b28      	ldr	r3, [pc, #160]	; (8006698 <main+0x43c>)
 80065f8:	4615      	mov	r5, r2
 80065fa:	461c      	mov	r4, r3
 80065fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065fe:	6028      	str	r0, [r5, #0]
 8006600:	6069      	str	r1, [r5, #4]
 8006602:	60aa      	str	r2, [r5, #8]
 8006604:	60eb      	str	r3, [r5, #12]
 8006606:	6820      	ldr	r0, [r4, #0]
 8006608:	6128      	str	r0, [r5, #16]
 800660a:	7923      	ldrb	r3, [r4, #4]
 800660c:	752b      	strb	r3, [r5, #20]
			  }

		  // read temperature
		  temp2str();
 800660e:	f000 fc57 	bl	8006ec0 <temp2str>

		  // add water LED
		  if(addWater) HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_SET);
 8006612:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <main+0x428>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d006      	beq.n	8006628 <main+0x3cc>
 800661a:	2201      	movs	r2, #1
 800661c:	2108      	movs	r1, #8
 800661e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006622:	f7fc fa1f 	bl	8002a64 <HAL_GPIO_WritePin>
 8006626:	e005      	b.n	8006634 <main+0x3d8>
		  else HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET);
 8006628:	2200      	movs	r2, #0
 800662a:	2108      	movs	r1, #8
 800662c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006630:	f7fc fa18 	bl	8002a64 <HAL_GPIO_WritePin>

		  // autoOff LED
		  if(autoOff) HAL_GPIO_WritePin(ARD_D5_GPIO_Port, ARD_D5_Pin, GPIO_PIN_SET);
 8006634:	4b19      	ldr	r3, [pc, #100]	; (800669c <main+0x440>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <main+0x3ec>
 800663c:	2201      	movs	r2, #1
 800663e:	2110      	movs	r1, #16
 8006640:	4817      	ldr	r0, [pc, #92]	; (80066a0 <main+0x444>)
 8006642:	f7fc fa0f 	bl	8002a64 <HAL_GPIO_WritePin>
 8006646:	e004      	b.n	8006652 <main+0x3f6>
		  else HAL_GPIO_WritePin(ARD_D5_GPIO_Port, ARD_D5_Pin, GPIO_PIN_RESET);
 8006648:	2200      	movs	r2, #0
 800664a:	2110      	movs	r1, #16
 800664c:	4814      	ldr	r0, [pc, #80]	; (80066a0 <main+0x444>)
 800664e:	f7fc fa09 	bl	8002a64 <HAL_GPIO_WritePin>

		  //simulation
		  if(cupSize > 0) brewing();
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <main+0x420>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	dd01      	ble.n	800665e <main+0x402>
 800665a:	f000 fcf1 	bl	8007040 <brewing>

		  printf(firstRow);
 800665e:	480a      	ldr	r0, [pc, #40]	; (8006688 <main+0x42c>)
 8006660:	f001 f9b0 	bl	80079c4 <iprintf>
		  printf(secondRow);
 8006664:	480f      	ldr	r0, [pc, #60]	; (80066a4 <main+0x448>)
 8006666:	f001 f9ad 	bl	80079c4 <iprintf>

		  autoOffcntr++;
 800666a:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <main+0x44c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3301      	adds	r3, #1
 8006670:	4a0d      	ldr	r2, [pc, #52]	; (80066a8 <main+0x44c>)
 8006672:	6013      	str	r3, [r2, #0]
		  HAL_Delay(100);					// 0.1 sec delay
 8006674:	2064      	movs	r0, #100	; 0x64
 8006676:	f7fa fa21 	bl	8000abc <HAL_Delay>
	  printf("\e[1;1H\e[2J");							//Clear Screen
 800667a:	e609      	b.n	8006290 <main+0x34>
 800667c:	200000c8 	.word	0x200000c8
 8006680:	20000838 	.word	0x20000838
 8006684:	200001e8 	.word	0x200001e8
 8006688:	2000083c 	.word	0x2000083c
 800668c:	0800885c 	.word	0x0800885c
 8006690:	0800886c 	.word	0x0800886c
 8006694:	0800887c 	.word	0x0800887c
 8006698:	08008890 	.word	0x08008890
 800669c:	20000018 	.word	0x20000018
 80066a0:	48000400 	.word	0x48000400
 80066a4:	200001ec 	.word	0x200001ec
 80066a8:	200006e4 	.word	0x200006e4

080066ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b0b8      	sub	sp, #224	; 0xe0
 80066b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80066b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80066b6:	2244      	movs	r2, #68	; 0x44
 80066b8:	2100      	movs	r1, #0
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 f97a 	bl	80079b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80066c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	605a      	str	r2, [r3, #4]
 80066ca:	609a      	str	r2, [r3, #8]
 80066cc:	60da      	str	r2, [r3, #12]
 80066ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80066d0:	463b      	mov	r3, r7
 80066d2:	2288      	movs	r2, #136	; 0x88
 80066d4:	2100      	movs	r1, #0
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 f96c 	bl	80079b4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80066dc:	f7fd f900 	bl	80038e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80066e0:	4b43      	ldr	r3, [pc, #268]	; (80067f0 <SystemClock_Config+0x144>)
 80066e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e6:	4a42      	ldr	r2, [pc, #264]	; (80067f0 <SystemClock_Config+0x144>)
 80066e8:	f023 0318 	bic.w	r3, r3, #24
 80066ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80066f0:	2314      	movs	r3, #20
 80066f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80066f6:	2301      	movs	r3, #1
 80066f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80066fc:	2301      	movs	r3, #1
 80066fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006708:	2360      	movs	r3, #96	; 0x60
 800670a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800670e:	2302      	movs	r3, #2
 8006710:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006714:	2301      	movs	r3, #1
 8006716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800671a:	2301      	movs	r3, #1
 800671c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006720:	2328      	movs	r3, #40	; 0x28
 8006722:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006726:	2307      	movs	r3, #7
 8006728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800672c:	2302      	movs	r3, #2
 800672e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006732:	2302      	movs	r3, #2
 8006734:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006738:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800673c:	4618      	mov	r0, r3
 800673e:	f7fd fa1b 	bl	8003b78 <HAL_RCC_OscConfig>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8006748:	f000 fd40 	bl	80071cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800674c:	230f      	movs	r3, #15
 800674e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006752:	2303      	movs	r3, #3
 8006754:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006758:	2300      	movs	r3, #0
 800675a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800675e:	2300      	movs	r3, #0
 8006760:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006764:	2300      	movs	r3, #0
 8006766:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800676a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800676e:	2104      	movs	r1, #4
 8006770:	4618      	mov	r0, r3
 8006772:	f7fd fde7 	bl	8004344 <HAL_RCC_ClockConfig>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800677c:	f000 fd26 	bl	80071cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8006780:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <SystemClock_Config+0x148>)
 8006782:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006784:	2300      	movs	r3, #0
 8006786:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006788:	2300      	movs	r3, #0
 800678a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800678c:	2300      	movs	r3, #0
 800678e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8006790:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006794:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8006796:	2300      	movs	r3, #0
 8006798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800679c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80067a2:	2301      	movs	r3, #1
 80067a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80067a6:	2301      	movs	r3, #1
 80067a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80067aa:	2318      	movs	r3, #24
 80067ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80067ae:	2307      	movs	r3, #7
 80067b0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80067b2:	2302      	movs	r3, #2
 80067b4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80067b6:	2302      	movs	r3, #2
 80067b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80067ba:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80067be:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80067c0:	463b      	mov	r3, r7
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fd ffc2 	bl	800474c <HAL_RCCEx_PeriphCLKConfig>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <SystemClock_Config+0x126>
  {
    Error_Handler();
 80067ce:	f000 fcfd 	bl	80071cc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80067d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80067d6:	f7fd f8a1 	bl	800391c <HAL_PWREx_ControlVoltageScaling>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <SystemClock_Config+0x138>
  {
    Error_Handler();
 80067e0:	f000 fcf4 	bl	80071cc <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80067e4:	f7fe fa98 	bl	8004d18 <HAL_RCCEx_EnableMSIPLLMode>
}
 80067e8:	bf00      	nop
 80067ea:	37e0      	adds	r7, #224	; 0xe0
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40021000 	.word	0x40021000
 80067f4:	00016085 	.word	0x00016085

080067f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80067fe:	f107 031c 	add.w	r3, r7, #28
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	605a      	str	r2, [r3, #4]
 8006808:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800680a:	1d3b      	adds	r3, r7, #4
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	605a      	str	r2, [r3, #4]
 8006812:	609a      	str	r2, [r3, #8]
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	611a      	str	r2, [r3, #16]
 8006818:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800681a:	4b38      	ldr	r3, [pc, #224]	; (80068fc <MX_ADC1_Init+0x104>)
 800681c:	4a38      	ldr	r2, [pc, #224]	; (8006900 <MX_ADC1_Init+0x108>)
 800681e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006820:	4b36      	ldr	r3, [pc, #216]	; (80068fc <MX_ADC1_Init+0x104>)
 8006822:	2200      	movs	r2, #0
 8006824:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8006826:	4b35      	ldr	r3, [pc, #212]	; (80068fc <MX_ADC1_Init+0x104>)
 8006828:	2208      	movs	r2, #8
 800682a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800682c:	4b33      	ldr	r3, [pc, #204]	; (80068fc <MX_ADC1_Init+0x104>)
 800682e:	2200      	movs	r2, #0
 8006830:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006832:	4b32      	ldr	r3, [pc, #200]	; (80068fc <MX_ADC1_Init+0x104>)
 8006834:	2201      	movs	r2, #1
 8006836:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006838:	4b30      	ldr	r3, [pc, #192]	; (80068fc <MX_ADC1_Init+0x104>)
 800683a:	2204      	movs	r2, #4
 800683c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800683e:	4b2f      	ldr	r3, [pc, #188]	; (80068fc <MX_ADC1_Init+0x104>)
 8006840:	2200      	movs	r2, #0
 8006842:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006844:	4b2d      	ldr	r3, [pc, #180]	; (80068fc <MX_ADC1_Init+0x104>)
 8006846:	2201      	movs	r2, #1
 8006848:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800684a:	4b2c      	ldr	r3, [pc, #176]	; (80068fc <MX_ADC1_Init+0x104>)
 800684c:	2202      	movs	r2, #2
 800684e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006850:	4b2a      	ldr	r3, [pc, #168]	; (80068fc <MX_ADC1_Init+0x104>)
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8006858:	4b28      	ldr	r3, [pc, #160]	; (80068fc <MX_ADC1_Init+0x104>)
 800685a:	2201      	movs	r2, #1
 800685c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800685e:	4b27      	ldr	r3, [pc, #156]	; (80068fc <MX_ADC1_Init+0x104>)
 8006860:	2200      	movs	r2, #0
 8006862:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006864:	4b25      	ldr	r3, [pc, #148]	; (80068fc <MX_ADC1_Init+0x104>)
 8006866:	2200      	movs	r2, #0
 8006868:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800686a:	4b24      	ldr	r3, [pc, #144]	; (80068fc <MX_ADC1_Init+0x104>)
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006872:	4b22      	ldr	r3, [pc, #136]	; (80068fc <MX_ADC1_Init+0x104>)
 8006874:	2200      	movs	r2, #0
 8006876:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8006878:	4b20      	ldr	r3, [pc, #128]	; (80068fc <MX_ADC1_Init+0x104>)
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006880:	481e      	ldr	r0, [pc, #120]	; (80068fc <MX_ADC1_Init+0x104>)
 8006882:	f7fa fb61 	bl	8000f48 <HAL_ADC_Init>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800688c:	f000 fc9e 	bl	80071cc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006890:	2300      	movs	r3, #0
 8006892:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006894:	f107 031c 	add.w	r3, r7, #28
 8006898:	4619      	mov	r1, r3
 800689a:	4818      	ldr	r0, [pc, #96]	; (80068fc <MX_ADC1_Init+0x104>)
 800689c:	f7fb fb64 	bl	8001f68 <HAL_ADCEx_MultiModeConfigChannel>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80068a6:	f000 fc91 	bl	80071cc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80068aa:	4b16      	ldr	r3, [pc, #88]	; (8006904 <MX_ADC1_Init+0x10c>)
 80068ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80068ae:	2306      	movs	r3, #6
 80068b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80068b2:	2307      	movs	r3, #7
 80068b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80068b6:	237f      	movs	r3, #127	; 0x7f
 80068b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80068ba:	2304      	movs	r3, #4
 80068bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068c2:	1d3b      	adds	r3, r7, #4
 80068c4:	4619      	mov	r1, r3
 80068c6:	480d      	ldr	r0, [pc, #52]	; (80068fc <MX_ADC1_Init+0x104>)
 80068c8:	f7fa fe5e 	bl	8001588 <HAL_ADC_ConfigChannel>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80068d2:	f000 fc7b 	bl	80071cc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80068d6:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <MX_ADC1_Init+0x110>)
 80068d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80068da:	230c      	movs	r3, #12
 80068dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068de:	1d3b      	adds	r3, r7, #4
 80068e0:	4619      	mov	r1, r3
 80068e2:	4806      	ldr	r0, [pc, #24]	; (80068fc <MX_ADC1_Init+0x104>)
 80068e4:	f7fa fe50 	bl	8001588 <HAL_ADC_ConfigChannel>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80068ee:	f000 fc6d 	bl	80071cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80068f2:	bf00      	nop
 80068f4:	3728      	adds	r7, #40	; 0x28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000750 	.word	0x20000750
 8006900:	50040000 	.word	0x50040000
 8006904:	3ac04000 	.word	0x3ac04000
 8006908:	36902000 	.word	0x36902000

0800690c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8006910:	4b18      	ldr	r3, [pc, #96]	; (8006974 <MX_DFSDM1_Init+0x68>)
 8006912:	4a19      	ldr	r2, [pc, #100]	; (8006978 <MX_DFSDM1_Init+0x6c>)
 8006914:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8006916:	4b17      	ldr	r3, [pc, #92]	; (8006974 <MX_DFSDM1_Init+0x68>)
 8006918:	2201      	movs	r2, #1
 800691a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800691c:	4b15      	ldr	r3, [pc, #84]	; (8006974 <MX_DFSDM1_Init+0x68>)
 800691e:	2200      	movs	r2, #0
 8006920:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8006922:	4b14      	ldr	r3, [pc, #80]	; (8006974 <MX_DFSDM1_Init+0x68>)
 8006924:	2202      	movs	r2, #2
 8006926:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8006928:	4b12      	ldr	r3, [pc, #72]	; (8006974 <MX_DFSDM1_Init+0x68>)
 800692a:	2200      	movs	r2, #0
 800692c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800692e:	4b11      	ldr	r3, [pc, #68]	; (8006974 <MX_DFSDM1_Init+0x68>)
 8006930:	2200      	movs	r2, #0
 8006932:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <MX_DFSDM1_Init+0x68>)
 8006936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800693a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800693c:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <MX_DFSDM1_Init+0x68>)
 800693e:	2200      	movs	r2, #0
 8006940:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8006942:	4b0c      	ldr	r3, [pc, #48]	; (8006974 <MX_DFSDM1_Init+0x68>)
 8006944:	2204      	movs	r2, #4
 8006946:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <MX_DFSDM1_Init+0x68>)
 800694a:	2200      	movs	r2, #0
 800694c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800694e:	4b09      	ldr	r3, [pc, #36]	; (8006974 <MX_DFSDM1_Init+0x68>)
 8006950:	2201      	movs	r2, #1
 8006952:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8006954:	4b07      	ldr	r3, [pc, #28]	; (8006974 <MX_DFSDM1_Init+0x68>)
 8006956:	2200      	movs	r2, #0
 8006958:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800695a:	4b06      	ldr	r3, [pc, #24]	; (8006974 <MX_DFSDM1_Init+0x68>)
 800695c:	2200      	movs	r2, #0
 800695e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8006960:	4804      	ldr	r0, [pc, #16]	; (8006974 <MX_DFSDM1_Init+0x68>)
 8006962:	f7fb fcbf 	bl	80022e4 <HAL_DFSDM_ChannelInit>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800696c:	f000 fc2e 	bl	80071cc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8006970:	bf00      	nop
 8006972:	bd80      	pop	{r7, pc}
 8006974:	200001ac 	.word	0x200001ac
 8006978:	40016020 	.word	0x40016020

0800697c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006980:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <MX_I2C2_Init+0x74>)
 8006982:	4a1c      	ldr	r2, [pc, #112]	; (80069f4 <MX_I2C2_Init+0x78>)
 8006984:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8006986:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <MX_I2C2_Init+0x74>)
 8006988:	f640 6214 	movw	r2, #3604	; 0xe14
 800698c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800698e:	4b18      	ldr	r3, [pc, #96]	; (80069f0 <MX_I2C2_Init+0x74>)
 8006990:	2200      	movs	r2, #0
 8006992:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006994:	4b16      	ldr	r3, [pc, #88]	; (80069f0 <MX_I2C2_Init+0x74>)
 8006996:	2201      	movs	r2, #1
 8006998:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800699a:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <MX_I2C2_Init+0x74>)
 800699c:	2200      	movs	r2, #0
 800699e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80069a0:	4b13      	ldr	r3, [pc, #76]	; (80069f0 <MX_I2C2_Init+0x74>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80069a6:	4b12      	ldr	r3, [pc, #72]	; (80069f0 <MX_I2C2_Init+0x74>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80069ac:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <MX_I2C2_Init+0x74>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80069b2:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <MX_I2C2_Init+0x74>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80069b8:	480d      	ldr	r0, [pc, #52]	; (80069f0 <MX_I2C2_Init+0x74>)
 80069ba:	f7fc f8a8 	bl	8002b0e <HAL_I2C_Init>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80069c4:	f000 fc02 	bl	80071cc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80069c8:	2100      	movs	r1, #0
 80069ca:	4809      	ldr	r0, [pc, #36]	; (80069f0 <MX_I2C2_Init+0x74>)
 80069cc:	f7fc fda8 	bl	8003520 <HAL_I2CEx_ConfigAnalogFilter>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80069d6:	f000 fbf9 	bl	80071cc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80069da:	2100      	movs	r1, #0
 80069dc:	4804      	ldr	r0, [pc, #16]	; (80069f0 <MX_I2C2_Init+0x74>)
 80069de:	f7fc fdea 	bl	80035b6 <HAL_I2CEx_ConfigDigitalFilter>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80069e8:	f000 fbf0 	bl	80071cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80069ec:	bf00      	nop
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20000698 	.word	0x20000698
 80069f4:	40005800 	.word	0x40005800

080069f8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80069fc:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <MX_QUADSPI_Init+0x44>)
 80069fe:	4a10      	ldr	r2, [pc, #64]	; (8006a40 <MX_QUADSPI_Init+0x48>)
 8006a00:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8006a02:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <MX_QUADSPI_Init+0x44>)
 8006a04:	22ff      	movs	r2, #255	; 0xff
 8006a06:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <MX_QUADSPI_Init+0x44>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <MX_QUADSPI_Init+0x44>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8006a14:	4b09      	ldr	r3, [pc, #36]	; (8006a3c <MX_QUADSPI_Init+0x44>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <MX_QUADSPI_Init+0x44>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <MX_QUADSPI_Init+0x44>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8006a26:	4805      	ldr	r0, [pc, #20]	; (8006a3c <MX_QUADSPI_Init+0x44>)
 8006a28:	f7fc ffde 	bl	80039e8 <HAL_QSPI_Init>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8006a32:	f000 fbcb 	bl	80071cc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8006a36:	bf00      	nop
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	2000085c 	.word	0x2000085c
 8006a40:	a0001000 	.word	0xa0001000

08006a44 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006a48:	4b1b      	ldr	r3, [pc, #108]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a4a:	4a1c      	ldr	r2, [pc, #112]	; (8006abc <MX_SPI3_Init+0x78>)
 8006a4c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006a4e:	4b1a      	ldr	r3, [pc, #104]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006a54:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006a56:	4b18      	ldr	r3, [pc, #96]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8006a5c:	4b16      	ldr	r3, [pc, #88]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006a62:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a64:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006a6a:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006a70:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a76:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a78:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006a7e:	4b0e      	ldr	r3, [pc, #56]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006a84:	4b0c      	ldr	r3, [pc, #48]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006a90:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a92:	2207      	movs	r2, #7
 8006a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006a9c:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006a9e:	2208      	movs	r2, #8
 8006aa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006aa2:	4805      	ldr	r0, [pc, #20]	; (8006ab8 <MX_SPI3_Init+0x74>)
 8006aa4:	f7fe fb12 	bl	80050cc <HAL_SPI_Init>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8006aae:	f000 fb8d 	bl	80071cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006ab2:	bf00      	nop
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200006e8 	.word	0x200006e8
 8006abc:	40003c00 	.word	0x40003c00

08006ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006ac4:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <MX_USART1_UART_Init+0x58>)
 8006ac6:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <MX_USART1_UART_Init+0x5c>)
 8006ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006aca:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <MX_USART1_UART_Init+0x58>)
 8006acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006ad2:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <MX_USART1_UART_Init+0x58>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006ad8:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <MX_USART1_UART_Init+0x58>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006ade:	4b0e      	ldr	r3, [pc, #56]	; (8006b18 <MX_USART1_UART_Init+0x58>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <MX_USART1_UART_Init+0x58>)
 8006ae6:	220c      	movs	r2, #12
 8006ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006aea:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <MX_USART1_UART_Init+0x58>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006af0:	4b09      	ldr	r3, [pc, #36]	; (8006b18 <MX_USART1_UART_Init+0x58>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006af6:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <MX_USART1_UART_Init+0x58>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006afc:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <MX_USART1_UART_Init+0x58>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b02:	4805      	ldr	r0, [pc, #20]	; (8006b18 <MX_USART1_UART_Init+0x58>)
 8006b04:	f7fe fb6c 	bl	80051e0 <HAL_UART_Init>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006b0e:	f000 fb5d 	bl	80071cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006b12:	bf00      	nop
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	200007b4 	.word	0x200007b4
 8006b1c:	40013800 	.word	0x40013800

08006b20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006b24:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <MX_USART3_UART_Init+0x58>)
 8006b26:	4a15      	ldr	r2, [pc, #84]	; (8006b7c <MX_USART3_UART_Init+0x5c>)
 8006b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006b2a:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <MX_USART3_UART_Init+0x58>)
 8006b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006b32:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <MX_USART3_UART_Init+0x58>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006b38:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <MX_USART3_UART_Init+0x58>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006b3e:	4b0e      	ldr	r3, [pc, #56]	; (8006b78 <MX_USART3_UART_Init+0x58>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006b44:	4b0c      	ldr	r3, [pc, #48]	; (8006b78 <MX_USART3_UART_Init+0x58>)
 8006b46:	220c      	movs	r2, #12
 8006b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <MX_USART3_UART_Init+0x58>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b50:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <MX_USART3_UART_Init+0x58>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b56:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <MX_USART3_UART_Init+0x58>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b5c:	4b06      	ldr	r3, [pc, #24]	; (8006b78 <MX_USART3_UART_Init+0x58>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006b62:	4805      	ldr	r0, [pc, #20]	; (8006b78 <MX_USART3_UART_Init+0x58>)
 8006b64:	f7fe fb3c 	bl	80051e0 <HAL_UART_Init>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8006b6e:	f000 fb2d 	bl	80071cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006b72:	bf00      	nop
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000210 	.word	0x20000210
 8006b7c:	40004800 	.word	0x40004800

08006b80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006b84:	4b14      	ldr	r3, [pc, #80]	; (8006bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006b86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006b8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006b8c:	4b12      	ldr	r3, [pc, #72]	; (8006bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006b8e:	2206      	movs	r2, #6
 8006b90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006b92:	4b11      	ldr	r3, [pc, #68]	; (8006bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006b94:	2202      	movs	r2, #2
 8006b96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b98:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006b9e:	4b0e      	ldr	r3, [pc, #56]	; (8006bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006ba4:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006baa:	4b0b      	ldr	r3, [pc, #44]	; (8006bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006bb0:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006bb6:	4b08      	ldr	r3, [pc, #32]	; (8006bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006bc2:	4805      	ldr	r0, [pc, #20]	; (8006bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006bc4:	f7fc fd43 	bl	800364e <HAL_PCD_Init>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8006bce:	f000 fafd 	bl	80071cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8006bd2:	bf00      	nop
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000290 	.word	0x20000290

08006bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	; 0x28
 8006be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006be2:	f107 0314 	add.w	r3, r7, #20
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	605a      	str	r2, [r3, #4]
 8006bec:	609a      	str	r2, [r3, #8]
 8006bee:	60da      	str	r2, [r3, #12]
 8006bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006bf2:	4bac      	ldr	r3, [pc, #688]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf6:	4aab      	ldr	r2, [pc, #684]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006bf8:	f043 0310 	orr.w	r3, r3, #16
 8006bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bfe:	4ba9      	ldr	r3, [pc, #676]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c02:	f003 0310 	and.w	r3, r3, #16
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c0a:	4ba6      	ldr	r3, [pc, #664]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0e:	4aa5      	ldr	r2, [pc, #660]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c10:	f043 0304 	orr.w	r3, r3, #4
 8006c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c16:	4ba3      	ldr	r3, [pc, #652]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c22:	4ba0      	ldr	r3, [pc, #640]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c26:	4a9f      	ldr	r2, [pc, #636]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c28:	f043 0301 	orr.w	r3, r3, #1
 8006c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c2e:	4b9d      	ldr	r3, [pc, #628]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	60bb      	str	r3, [r7, #8]
 8006c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c3a:	4b9a      	ldr	r3, [pc, #616]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3e:	4a99      	ldr	r2, [pc, #612]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c40:	f043 0302 	orr.w	r3, r3, #2
 8006c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c46:	4b97      	ldr	r3, [pc, #604]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	607b      	str	r3, [r7, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c52:	4b94      	ldr	r3, [pc, #592]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c56:	4a93      	ldr	r2, [pc, #588]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c58:	f043 0308 	orr.w	r3, r3, #8
 8006c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c5e:	4b91      	ldr	r3, [pc, #580]	; (8006ea4 <MX_GPIO_Init+0x2c8>)
 8006c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c62:	f003 0308 	and.w	r3, r3, #8
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006c70:	488d      	ldr	r0, [pc, #564]	; (8006ea8 <MX_GPIO_Init+0x2cc>)
 8006c72:	f7fb fef7 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D0_Pin|ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin 
 8006c76:	2200      	movs	r2, #0
 8006c78:	f248 111e 	movw	r1, #33054	; 0x811e
 8006c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c80:	f7fb fef0 	bl	8002a64 <HAL_GPIO_WritePin>
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D6_Pin|ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin 
 8006c84:	2200      	movs	r2, #0
 8006c86:	f24f 0116 	movw	r1, #61462	; 0xf016
 8006c8a:	4888      	ldr	r0, [pc, #544]	; (8006eac <MX_GPIO_Init+0x2d0>)
 8006c8c:	f7fb feea 	bl	8002a64 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8006c90:	2200      	movs	r2, #0
 8006c92:	f241 0181 	movw	r1, #4225	; 0x1081
 8006c96:	4886      	ldr	r0, [pc, #536]	; (8006eb0 <MX_GPIO_Init+0x2d4>)
 8006c98:	f7fb fee4 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ca2:	4883      	ldr	r0, [pc, #524]	; (8006eb0 <MX_GPIO_Init+0x2d4>)
 8006ca4:	f7fb fede 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006cae:	4881      	ldr	r0, [pc, #516]	; (8006eb4 <MX_GPIO_Init+0x2d8>)
 8006cb0:	f7fb fed8 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	2120      	movs	r1, #32
 8006cb8:	487c      	ldr	r0, [pc, #496]	; (8006eac <MX_GPIO_Init+0x2d0>)
 8006cba:	f7fb fed3 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	4879      	ldr	r0, [pc, #484]	; (8006ea8 <MX_GPIO_Init+0x2cc>)
 8006cc4:	f7fb fece 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8006cc8:	f240 1315 	movw	r3, #277	; 0x115
 8006ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006cda:	f107 0314 	add.w	r3, r7, #20
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4871      	ldr	r0, [pc, #452]	; (8006ea8 <MX_GPIO_Init+0x2cc>)
 8006ce2:	f7fb fc0b 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8006ce6:	236a      	movs	r3, #106	; 0x6a
 8006ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006cea:	4b73      	ldr	r3, [pc, #460]	; (8006eb8 <MX_GPIO_Init+0x2dc>)
 8006cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006cf2:	f107 0314 	add.w	r3, r7, #20
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	486b      	ldr	r0, [pc, #428]	; (8006ea8 <MX_GPIO_Init+0x2cc>)
 8006cfa:	f7fb fbff 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8006cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006d04:	4b6d      	ldr	r3, [pc, #436]	; (8006ebc <MX_GPIO_Init+0x2e0>)
 8006d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8006d0c:	f107 0314 	add.w	r3, r7, #20
 8006d10:	4619      	mov	r1, r3
 8006d12:	4868      	ldr	r0, [pc, #416]	; (8006eb4 <MX_GPIO_Init+0x2d8>)
 8006d14:	f7fb fbf2 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006d1c:	4b66      	ldr	r3, [pc, #408]	; (8006eb8 <MX_GPIO_Init+0x2dc>)
 8006d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D1_GPIO_Port, &GPIO_InitStruct);
 8006d24:	f107 0314 	add.w	r3, r7, #20
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d2e:	f7fb fbe5 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin 
                           SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin 
 8006d32:	f248 131e 	movw	r3, #33054	; 0x811e
 8006d36:	617b      	str	r3, [r7, #20]
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d40:	2300      	movs	r3, #0
 8006d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d44:	f107 0314 	add.w	r3, r7, #20
 8006d48:	4619      	mov	r1, r3
 8006d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d4e:	f7fb fbd5 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8006d52:	23e0      	movs	r3, #224	; 0xe0
 8006d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d56:	2302      	movs	r3, #2
 8006d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006d62:	2305      	movs	r3, #5
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d66:	f107 0314 	add.w	r3, r7, #20
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d70:	f7fb fbc4 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin;
 8006d74:	2310      	movs	r3, #16
 8006d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006d78:	230b      	movs	r3, #11
 8006d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8006d80:	f107 0314 	add.w	r3, r7, #20
 8006d84:	4619      	mov	r1, r3
 8006d86:	484b      	ldr	r0, [pc, #300]	; (8006eb4 <MX_GPIO_Init+0x2d8>)
 8006d88:	f7fb fbb8 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D6_Pin ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin 
                           LED2_Pin SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin 
 8006d8c:	f24f 0336 	movw	r3, #61494	; 0xf036
 8006d90:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d92:	2301      	movs	r3, #1
 8006d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d9e:	f107 0314 	add.w	r3, r7, #20
 8006da2:	4619      	mov	r1, r3
 8006da4:	4841      	ldr	r0, [pc, #260]	; (8006eac <MX_GPIO_Init+0x2d0>)
 8006da6:	f7fb fba9 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8006daa:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8006dae:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006db0:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <MX_GPIO_Init+0x2dc>)
 8006db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006db8:	f107 0314 	add.w	r3, r7, #20
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	483c      	ldr	r0, [pc, #240]	; (8006eb0 <MX_GPIO_Init+0x2d4>)
 8006dc0:	f7fb fb9c 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8006dc4:	f243 0381 	movw	r3, #12417	; 0x3081
 8006dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dd6:	f107 0314 	add.w	r3, r7, #20
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4834      	ldr	r0, [pc, #208]	; (8006eb0 <MX_GPIO_Init+0x2d4>)
 8006dde:	f7fb fb8d 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8006de2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8006de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006de8:	2301      	movs	r3, #1
 8006dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006df0:	2300      	movs	r3, #0
 8006df2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006df4:	f107 0314 	add.w	r3, r7, #20
 8006df8:	4619      	mov	r1, r3
 8006dfa:	482e      	ldr	r0, [pc, #184]	; (8006eb4 <MX_GPIO_Init+0x2d8>)
 8006dfc:	f7fb fb7e 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8006e00:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006e06:	4b2c      	ldr	r3, [pc, #176]	; (8006eb8 <MX_GPIO_Init+0x2dc>)
 8006e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e0e:	f107 0314 	add.w	r3, r7, #20
 8006e12:	4619      	mov	r1, r3
 8006e14:	4827      	ldr	r0, [pc, #156]	; (8006eb4 <MX_GPIO_Init+0x2d8>)
 8006e16:	f7fb fb71 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e26:	2303      	movs	r3, #3
 8006e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006e2a:	2305      	movs	r3, #5
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8006e2e:	f107 0314 	add.w	r3, r7, #20
 8006e32:	4619      	mov	r1, r3
 8006e34:	481e      	ldr	r0, [pc, #120]	; (8006eb0 <MX_GPIO_Init+0x2d4>)
 8006e36:	f7fb fb61 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8006e3a:	2378      	movs	r3, #120	; 0x78
 8006e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e46:	2303      	movs	r3, #3
 8006e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006e4a:	2307      	movs	r3, #7
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e4e:	f107 0314 	add.w	r3, r7, #20
 8006e52:	4619      	mov	r1, r3
 8006e54:	4816      	ldr	r0, [pc, #88]	; (8006eb0 <MX_GPIO_Init+0x2d4>)
 8006e56:	f7fb fb51 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8006e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e60:	2312      	movs	r3, #18
 8006e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e64:	2301      	movs	r3, #1
 8006e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e70:	f107 0314 	add.w	r3, r7, #20
 8006e74:	4619      	mov	r1, r3
 8006e76:	480d      	ldr	r0, [pc, #52]	; (8006eac <MX_GPIO_Init+0x2d0>)
 8006e78:	f7fb fb40 	bl	80024fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2100      	movs	r1, #0
 8006e80:	2017      	movs	r0, #23
 8006e82:	f7fb f9f8 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006e86:	2017      	movs	r0, #23
 8006e88:	f7fb fa11 	bl	80022ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2100      	movs	r1, #0
 8006e90:	2028      	movs	r0, #40	; 0x28
 8006e92:	f7fb f9f0 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006e96:	2028      	movs	r0, #40	; 0x28
 8006e98:	f7fb fa09 	bl	80022ae <HAL_NVIC_EnableIRQ>

}
 8006e9c:	bf00      	nop
 8006e9e:	3728      	adds	r7, #40	; 0x28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40021000 	.word	0x40021000
 8006ea8:	48001000 	.word	0x48001000
 8006eac:	48000400 	.word	0x48000400
 8006eb0:	48000c00 	.word	0x48000c00
 8006eb4:	48000800 	.word	0x48000800
 8006eb8:	10110000 	.word	0x10110000
 8006ebc:	10210000 	.word	0x10210000

08006ec0 <temp2str>:

/* USER CODE BEGIN 4 */

void temp2str(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
	char temperature[4];
	itoa(BSP_TSENSOR_ReadTemp(),temperature,10);
 8006ec6:	f7f9 fcc7 	bl	8000858 <BSP_TSENSOR_ReadTemp>
 8006eca:	eef0 7a40 	vmov.f32	s15, s0
 8006ece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ed2:	1d3b      	adds	r3, r7, #4
 8006ed4:	220a      	movs	r2, #10
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	ee17 0a90 	vmov	r0, s15
 8006edc:	f000 fd68 	bl	80079b0 <itoa>
	strcat(firstRow, "\tt: ");
 8006ee0:	480f      	ldr	r0, [pc, #60]	; (8006f20 <temp2str+0x60>)
 8006ee2:	f7f9 f975 	bl	80001d0 <strlen>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <temp2str+0x60>)
 8006eec:	4413      	add	r3, r2
 8006eee:	4a0d      	ldr	r2, [pc, #52]	; (8006f24 <temp2str+0x64>)
 8006ef0:	6810      	ldr	r0, [r2, #0]
 8006ef2:	6018      	str	r0, [r3, #0]
 8006ef4:	7912      	ldrb	r2, [r2, #4]
 8006ef6:	711a      	strb	r2, [r3, #4]
	strcat(firstRow, temperature);
 8006ef8:	1d3b      	adds	r3, r7, #4
 8006efa:	4619      	mov	r1, r3
 8006efc:	4808      	ldr	r0, [pc, #32]	; (8006f20 <temp2str+0x60>)
 8006efe:	f000 fd79 	bl	80079f4 <strcat>
	strcat(firstRow, "C\n\r");
 8006f02:	4807      	ldr	r0, [pc, #28]	; (8006f20 <temp2str+0x60>)
 8006f04:	f7f9 f964 	bl	80001d0 <strlen>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <temp2str+0x60>)
 8006f0e:	4413      	add	r3, r2
 8006f10:	4a05      	ldr	r2, [pc, #20]	; (8006f28 <temp2str+0x68>)
 8006f12:	6810      	ldr	r0, [r2, #0]
 8006f14:	6018      	str	r0, [r3, #0]
}
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	2000083c 	.word	0x2000083c
 8006f24:	080088a8 	.word	0x080088a8
 8006f28:	080088b0 	.word	0x080088b0

08006f2c <powerOn>:


void powerOn(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
	power = 1;
 8006f30:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <powerOn+0x38>)
 8006f32:	2201      	movs	r2, #1
 8006f34:	601a      	str	r2, [r3, #0]
	autoOffcntr = 0;
 8006f36:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <powerOn+0x3c>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f42:	480a      	ldr	r0, [pc, #40]	; (8006f6c <powerOn+0x40>)
 8006f44:	f7fb fd8e 	bl	8002a64 <HAL_GPIO_WritePin>
	strcpy(firstRow, " ");
 8006f48:	4a09      	ldr	r2, [pc, #36]	; (8006f70 <powerOn+0x44>)
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <powerOn+0x48>)
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	8013      	strh	r3, [r2, #0]
	strcpy(secondRow, " ");
 8006f50:	4a09      	ldr	r2, [pc, #36]	; (8006f78 <powerOn+0x4c>)
 8006f52:	4b08      	ldr	r3, [pc, #32]	; (8006f74 <powerOn+0x48>)
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	8013      	strh	r3, [r2, #0]
	HAL_Delay(500);
 8006f58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f5c:	f7f9 fdae 	bl	8000abc <HAL_Delay>

}
 8006f60:	bf00      	nop
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	2000020c 	.word	0x2000020c
 8006f68:	200006e4 	.word	0x200006e4
 8006f6c:	48000400 	.word	0x48000400
 8006f70:	2000083c 	.word	0x2000083c
 8006f74:	080088b4 	.word	0x080088b4
 8006f78:	200001ec 	.word	0x200001ec

08006f7c <powerOff>:

void powerOff(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
	power = 0;
 8006f80:	4b1a      	ldr	r3, [pc, #104]	; (8006fec <powerOff+0x70>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8006f86:	2200      	movs	r2, #0
 8006f88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f8c:	4818      	ldr	r0, [pc, #96]	; (8006ff0 <powerOff+0x74>)
 8006f8e:	f7fb fd69 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET);
 8006f92:	2200      	movs	r2, #0
 8006f94:	2108      	movs	r1, #8
 8006f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f9a:	f7fb fd63 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D5_GPIO_Port, ARD_D5_Pin, GPIO_PIN_RESET);
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2110      	movs	r1, #16
 8006fa2:	4813      	ldr	r0, [pc, #76]	; (8006ff0 <powerOff+0x74>)
 8006fa4:	f7fb fd5e 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D6_GPIO_Port, ARD_D6_Pin, GPIO_PIN_RESET);
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2102      	movs	r1, #2
 8006fac:	4810      	ldr	r0, [pc, #64]	; (8006ff0 <powerOff+0x74>)
 8006fae:	f7fb fd59 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET);
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2110      	movs	r1, #16
 8006fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fba:	f7fb fd53 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, GPIO_PIN_RESET);
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2104      	movs	r1, #4
 8006fc2:	480b      	ldr	r0, [pc, #44]	; (8006ff0 <powerOff+0x74>)
 8006fc4:	f7fb fd4e 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_RESET);
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fd2:	f7fb fd47 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_RESET);
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2104      	movs	r1, #4
 8006fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fde:	f7fb fd41 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8006fe2:	20c8      	movs	r0, #200	; 0xc8
 8006fe4:	f7f9 fd6a 	bl	8000abc <HAL_Delay>
}
 8006fe8:	bf00      	nop
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	2000020c 	.word	0x2000020c
 8006ff0:	48000400 	.word	0x48000400

08006ff4 <addWaterf>:

void addWaterf(void)
{
 8006ff4:	b5b0      	push	{r4, r5, r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 6; i++)
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	607b      	str	r3, [r7, #4]
 8006ffe:	e00a      	b.n	8007016 <addWaterf+0x22>
	{
	  HAL_GPIO_TogglePin(ARD_D4_GPIO_Port, ARD_D4_Pin);
 8007000:	2108      	movs	r1, #8
 8007002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007006:	f7fb fd45 	bl	8002a94 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800700a:	2064      	movs	r0, #100	; 0x64
 800700c:	f7f9 fd56 	bl	8000abc <HAL_Delay>
	for(int i = 0; i < 6; i++)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3301      	adds	r3, #1
 8007014:	607b      	str	r3, [r7, #4]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b05      	cmp	r3, #5
 800701a:	ddf1      	ble.n	8007000 <addWaterf+0xc>
	}
	strcpy(secondRow, "\n\r  Add Water\n\r");
 800701c:	4a06      	ldr	r2, [pc, #24]	; (8007038 <addWaterf+0x44>)
 800701e:	4b07      	ldr	r3, [pc, #28]	; (800703c <addWaterf+0x48>)
 8007020:	4614      	mov	r4, r2
 8007022:	461d      	mov	r5, r3
 8007024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007026:	6020      	str	r0, [r4, #0]
 8007028:	6061      	str	r1, [r4, #4]
 800702a:	60a2      	str	r2, [r4, #8]
 800702c:	60e3      	str	r3, [r4, #12]
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bdb0      	pop	{r4, r5, r7, pc}
 8007036:	bf00      	nop
 8007038:	200001ec 	.word	0x200001ec
 800703c:	080088b8 	.word	0x080088b8

08007040 <brewing>:

void brewing(void)
{
 8007040:	b5b0      	push	{r4, r5, r7, lr}
 8007042:	b0b4      	sub	sp, #208	; 0xd0
 8007044:	af00      	add	r7, sp, #0
	char *cube = "■";
 8007046:	4b3f      	ldr	r3, [pc, #252]	; (8007144 <brewing+0x104>)
 8007048:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	char begin[100];
	char end[100] = "\n\r";
 800704c:	f640 530a 	movw	r3, #3338	; 0xd0a
 8007050:	603b      	str	r3, [r7, #0]
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	2260      	movs	r2, #96	; 0x60
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f000 fcab 	bl	80079b4 <memset>
	strcpy(firstRow, "\n\r  Brewing:\n\n\r");
 800705e:	4a3a      	ldr	r2, [pc, #232]	; (8007148 <brewing+0x108>)
 8007060:	4b3a      	ldr	r3, [pc, #232]	; (800714c <brewing+0x10c>)
 8007062:	4614      	mov	r4, r2
 8007064:	461d      	mov	r5, r3
 8007066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007068:	6020      	str	r0, [r4, #0]
 800706a:	6061      	str	r1, [r4, #4]
 800706c:	60a2      	str	r2, [r4, #8]
 800706e:	60e3      	str	r3, [r4, #12]
	for(int i = 0; i < 15; i++)
 8007070:	2300      	movs	r3, #0
 8007072:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007076:	e032      	b.n	80070de <brewing+0x9e>
	{
		printf("\e[1;1H\e[2J");
 8007078:	4835      	ldr	r0, [pc, #212]	; (8007150 <brewing+0x110>)
 800707a:	f000 fca3 	bl	80079c4 <iprintf>
		strcpy(begin, cube);
 800707e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007082:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fcc3 	bl	8007a12 <strcpy>
		strcat(begin, end);
 800708c:	463a      	mov	r2, r7
 800708e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fcad 	bl	80079f4 <strcat>
		strcpy(end, begin);
 800709a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800709e:	463b      	mov	r3, r7
 80070a0:	4611      	mov	r1, r2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fcb5 	bl	8007a12 <strcpy>
		strcpy(secondRow, end);
 80070a8:	463b      	mov	r3, r7
 80070aa:	4619      	mov	r1, r3
 80070ac:	4829      	ldr	r0, [pc, #164]	; (8007154 <brewing+0x114>)
 80070ae:	f000 fcb0 	bl	8007a12 <strcpy>
		printf(firstRow);
 80070b2:	4825      	ldr	r0, [pc, #148]	; (8007148 <brewing+0x108>)
 80070b4:	f000 fc86 	bl	80079c4 <iprintf>
		printf(secondRow);
 80070b8:	4826      	ldr	r0, [pc, #152]	; (8007154 <brewing+0x114>)
 80070ba:	f000 fc83 	bl	80079c4 <iprintf>
		HAL_Delay(cupSize*50 + strongBrew*50);
 80070be:	4b26      	ldr	r3, [pc, #152]	; (8007158 <brewing+0x118>)
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4b26      	ldr	r3, [pc, #152]	; (800715c <brewing+0x11c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4413      	add	r3, r2
 80070c8:	2232      	movs	r2, #50	; 0x32
 80070ca:	fb02 f303 	mul.w	r3, r2, r3
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7f9 fcf4 	bl	8000abc <HAL_Delay>
	for(int i = 0; i < 15; i++)
 80070d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070d8:	3301      	adds	r3, #1
 80070da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070e2:	2b0e      	cmp	r3, #14
 80070e4:	ddc8      	ble.n	8007078 <brewing+0x38>
	}
	HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET);
 80070e6:	2200      	movs	r2, #0
 80070e8:	2110      	movs	r1, #16
 80070ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070ee:	f7fb fcb9 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, GPIO_PIN_RESET);
 80070f2:	2200      	movs	r2, #0
 80070f4:	2104      	movs	r1, #4
 80070f6:	481a      	ldr	r0, [pc, #104]	; (8007160 <brewing+0x120>)
 80070f8:	f7fb fcb4 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_RESET);
 80070fc:	2200      	movs	r2, #0
 80070fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007106:	f7fb fcad 	bl	8002a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_RESET);
 800710a:	2200      	movs	r2, #0
 800710c:	2104      	movs	r1, #4
 800710e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007112:	f7fb fca7 	bl	8002a64 <HAL_GPIO_WritePin>
	strcpy(secondRow, "\n\r  Done. Enjoy your coffee\n\r");
 8007116:	4a0f      	ldr	r2, [pc, #60]	; (8007154 <brewing+0x114>)
 8007118:	4b12      	ldr	r3, [pc, #72]	; (8007164 <brewing+0x124>)
 800711a:	4615      	mov	r5, r2
 800711c:	461c      	mov	r4, r3
 800711e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007120:	6028      	str	r0, [r5, #0]
 8007122:	6069      	str	r1, [r5, #4]
 8007124:	60aa      	str	r2, [r5, #8]
 8007126:	60eb      	str	r3, [r5, #12]
 8007128:	cc07      	ldmia	r4!, {r0, r1, r2}
 800712a:	6128      	str	r0, [r5, #16]
 800712c:	6169      	str	r1, [r5, #20]
 800712e:	61aa      	str	r2, [r5, #24]
 8007130:	8823      	ldrh	r3, [r4, #0]
 8007132:	83ab      	strh	r3, [r5, #28]
	cupSize = 0;
 8007134:	4b08      	ldr	r3, [pc, #32]	; (8007158 <brewing+0x118>)
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]
}
 800713a:	bf00      	nop
 800713c:	37d0      	adds	r7, #208	; 0xd0
 800713e:	46bd      	mov	sp, r7
 8007140:	bdb0      	pop	{r4, r5, r7, pc}
 8007142:	bf00      	nop
 8007144:	080088c8 	.word	0x080088c8
 8007148:	2000083c 	.word	0x2000083c
 800714c:	080088cc 	.word	0x080088cc
 8007150:	08008850 	.word	0x08008850
 8007154:	200001ec 	.word	0x200001ec
 8007158:	200000c8 	.word	0x200000c8
 800715c:	2000074c 	.word	0x2000074c
 8007160:	48000400 	.word	0x48000400
 8007164:	080088dc 	.word	0x080088dc

08007168 <__io_putchar>:




int __io_putchar(int ch)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	b2db      	uxtb	r3, r3
 8007174:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart1, &*c, 1, 10);
 8007176:	f107 010c 	add.w	r1, r7, #12
 800717a:	230a      	movs	r3, #10
 800717c:	2201      	movs	r2, #1
 800717e:	4804      	ldr	r0, [pc, #16]	; (8007190 <__io_putchar+0x28>)
 8007180:	f7fe f87c 	bl	800527c <HAL_UART_Transmit>
 return ch;
 8007184:	687b      	ldr	r3, [r7, #4]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	200007b4 	.word	0x200007b4

08007194 <_write>:

int _write(int file,char *ptr, int len)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80071a0:	2300      	movs	r3, #0
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	e009      	b.n	80071ba <_write+0x26>
 {
 __io_putchar(*ptr++);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	60ba      	str	r2, [r7, #8]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff ffda 	bl	8007168 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	3301      	adds	r3, #1
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	429a      	cmp	r2, r3
 80071c0:	dbf1      	blt.n	80071a6 <_write+0x12>
 }
return len;
 80071c2:	687b      	ldr	r3, [r7, #4]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80071d0:	bf00      	nop
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
	...

080071dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071e2:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <HAL_MspInit+0x44>)
 80071e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e6:	4a0e      	ldr	r2, [pc, #56]	; (8007220 <HAL_MspInit+0x44>)
 80071e8:	f043 0301 	orr.w	r3, r3, #1
 80071ec:	6613      	str	r3, [r2, #96]	; 0x60
 80071ee:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <HAL_MspInit+0x44>)
 80071f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	607b      	str	r3, [r7, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071fa:	4b09      	ldr	r3, [pc, #36]	; (8007220 <HAL_MspInit+0x44>)
 80071fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fe:	4a08      	ldr	r2, [pc, #32]	; (8007220 <HAL_MspInit+0x44>)
 8007200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007204:	6593      	str	r3, [r2, #88]	; 0x58
 8007206:	4b06      	ldr	r3, [pc, #24]	; (8007220 <HAL_MspInit+0x44>)
 8007208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40021000 	.word	0x40021000

08007224 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08a      	sub	sp, #40	; 0x28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800722c:	f107 0314 	add.w	r3, r7, #20
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	605a      	str	r2, [r3, #4]
 8007236:	609a      	str	r2, [r3, #8]
 8007238:	60da      	str	r2, [r3, #12]
 800723a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a15      	ldr	r2, [pc, #84]	; (8007298 <HAL_ADC_MspInit+0x74>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d123      	bne.n	800728e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8007246:	4b15      	ldr	r3, [pc, #84]	; (800729c <HAL_ADC_MspInit+0x78>)
 8007248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724a:	4a14      	ldr	r2, [pc, #80]	; (800729c <HAL_ADC_MspInit+0x78>)
 800724c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007252:	4b12      	ldr	r3, [pc, #72]	; (800729c <HAL_ADC_MspInit+0x78>)
 8007254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800725a:	613b      	str	r3, [r7, #16]
 800725c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800725e:	4b0f      	ldr	r3, [pc, #60]	; (800729c <HAL_ADC_MspInit+0x78>)
 8007260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007262:	4a0e      	ldr	r2, [pc, #56]	; (800729c <HAL_ADC_MspInit+0x78>)
 8007264:	f043 0304 	orr.w	r3, r3, #4
 8007268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800726a:	4b0c      	ldr	r3, [pc, #48]	; (800729c <HAL_ADC_MspInit+0x78>)
 800726c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8007276:	233f      	movs	r3, #63	; 0x3f
 8007278:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800727a:	230b      	movs	r3, #11
 800727c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727e:	2300      	movs	r3, #0
 8007280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007282:	f107 0314 	add.w	r3, r7, #20
 8007286:	4619      	mov	r1, r3
 8007288:	4805      	ldr	r0, [pc, #20]	; (80072a0 <HAL_ADC_MspInit+0x7c>)
 800728a:	f7fb f937 	bl	80024fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800728e:	bf00      	nop
 8007290:	3728      	adds	r7, #40	; 0x28
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	50040000 	.word	0x50040000
 800729c:	40021000 	.word	0x40021000
 80072a0:	48000800 	.word	0x48000800

080072a4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072ac:	f107 0314 	add.w	r3, r7, #20
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	605a      	str	r2, [r3, #4]
 80072b6:	609a      	str	r2, [r3, #8]
 80072b8:	60da      	str	r2, [r3, #12]
 80072ba:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80072bc:	4b18      	ldr	r3, [pc, #96]	; (8007320 <HAL_DFSDM_ChannelMspInit+0x7c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d128      	bne.n	8007316 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80072c4:	4b17      	ldr	r3, [pc, #92]	; (8007324 <HAL_DFSDM_ChannelMspInit+0x80>)
 80072c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c8:	4a16      	ldr	r2, [pc, #88]	; (8007324 <HAL_DFSDM_ChannelMspInit+0x80>)
 80072ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072ce:	6613      	str	r3, [r2, #96]	; 0x60
 80072d0:	4b14      	ldr	r3, [pc, #80]	; (8007324 <HAL_DFSDM_ChannelMspInit+0x80>)
 80072d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072d8:	613b      	str	r3, [r7, #16]
 80072da:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80072dc:	4b11      	ldr	r3, [pc, #68]	; (8007324 <HAL_DFSDM_ChannelMspInit+0x80>)
 80072de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e0:	4a10      	ldr	r2, [pc, #64]	; (8007324 <HAL_DFSDM_ChannelMspInit+0x80>)
 80072e2:	f043 0310 	orr.w	r3, r3, #16
 80072e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072e8:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <HAL_DFSDM_ChannelMspInit+0x80>)
 80072ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80072f4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80072f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072fa:	2302      	movs	r3, #2
 80072fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007302:	2300      	movs	r3, #0
 8007304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8007306:	2306      	movs	r3, #6
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800730a:	f107 0314 	add.w	r3, r7, #20
 800730e:	4619      	mov	r1, r3
 8007310:	4805      	ldr	r0, [pc, #20]	; (8007328 <HAL_DFSDM_ChannelMspInit+0x84>)
 8007312:	f7fb f8f3 	bl	80024fc <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8007316:	bf00      	nop
 8007318:	3728      	adds	r7, #40	; 0x28
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	200000cc 	.word	0x200000cc
 8007324:	40021000 	.word	0x40021000
 8007328:	48001000 	.word	0x48001000

0800732c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08a      	sub	sp, #40	; 0x28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007334:	f107 0314 	add.w	r3, r7, #20
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	605a      	str	r2, [r3, #4]
 800733e:	609a      	str	r2, [r3, #8]
 8007340:	60da      	str	r2, [r3, #12]
 8007342:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a17      	ldr	r2, [pc, #92]	; (80073a8 <HAL_I2C_MspInit+0x7c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d128      	bne.n	80073a0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800734e:	4b17      	ldr	r3, [pc, #92]	; (80073ac <HAL_I2C_MspInit+0x80>)
 8007350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007352:	4a16      	ldr	r2, [pc, #88]	; (80073ac <HAL_I2C_MspInit+0x80>)
 8007354:	f043 0302 	orr.w	r3, r3, #2
 8007358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800735a:	4b14      	ldr	r3, [pc, #80]	; (80073ac <HAL_I2C_MspInit+0x80>)
 800735c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	613b      	str	r3, [r7, #16]
 8007364:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8007366:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800736a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800736c:	2312      	movs	r3, #18
 800736e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007370:	2301      	movs	r3, #1
 8007372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007374:	2303      	movs	r3, #3
 8007376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007378:	2304      	movs	r3, #4
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800737c:	f107 0314 	add.w	r3, r7, #20
 8007380:	4619      	mov	r1, r3
 8007382:	480b      	ldr	r0, [pc, #44]	; (80073b0 <HAL_I2C_MspInit+0x84>)
 8007384:	f7fb f8ba 	bl	80024fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007388:	4b08      	ldr	r3, [pc, #32]	; (80073ac <HAL_I2C_MspInit+0x80>)
 800738a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738c:	4a07      	ldr	r2, [pc, #28]	; (80073ac <HAL_I2C_MspInit+0x80>)
 800738e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007392:	6593      	str	r3, [r2, #88]	; 0x58
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <HAL_I2C_MspInit+0x80>)
 8007396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80073a0:	bf00      	nop
 80073a2:	3728      	adds	r7, #40	; 0x28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40005800 	.word	0x40005800
 80073ac:	40021000 	.word	0x40021000
 80073b0:	48000400 	.word	0x48000400

080073b4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a08      	ldr	r2, [pc, #32]	; (80073e4 <HAL_I2C_MspDeInit+0x30>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d10a      	bne.n	80073dc <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80073c6:	4b08      	ldr	r3, [pc, #32]	; (80073e8 <HAL_I2C_MspDeInit+0x34>)
 80073c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ca:	4a07      	ldr	r2, [pc, #28]	; (80073e8 <HAL_I2C_MspDeInit+0x34>)
 80073cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80073d0:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80073d2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80073d6:	4805      	ldr	r0, [pc, #20]	; (80073ec <HAL_I2C_MspDeInit+0x38>)
 80073d8:	f7fb fa38 	bl	800284c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80073dc:	bf00      	nop
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	40005800 	.word	0x40005800
 80073e8:	40021000 	.word	0x40021000
 80073ec:	48000400 	.word	0x48000400

080073f0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08a      	sub	sp, #40	; 0x28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073f8:	f107 0314 	add.w	r3, r7, #20
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	605a      	str	r2, [r3, #4]
 8007402:	609a      	str	r2, [r3, #8]
 8007404:	60da      	str	r2, [r3, #12]
 8007406:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a17      	ldr	r2, [pc, #92]	; (800746c <HAL_QSPI_MspInit+0x7c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d128      	bne.n	8007464 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8007412:	4b17      	ldr	r3, [pc, #92]	; (8007470 <HAL_QSPI_MspInit+0x80>)
 8007414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007416:	4a16      	ldr	r2, [pc, #88]	; (8007470 <HAL_QSPI_MspInit+0x80>)
 8007418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800741c:	6513      	str	r3, [r2, #80]	; 0x50
 800741e:	4b14      	ldr	r3, [pc, #80]	; (8007470 <HAL_QSPI_MspInit+0x80>)
 8007420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800742a:	4b11      	ldr	r3, [pc, #68]	; (8007470 <HAL_QSPI_MspInit+0x80>)
 800742c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742e:	4a10      	ldr	r2, [pc, #64]	; (8007470 <HAL_QSPI_MspInit+0x80>)
 8007430:	f043 0310 	orr.w	r3, r3, #16
 8007434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007436:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <HAL_QSPI_MspInit+0x80>)
 8007438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800743a:	f003 0310 	and.w	r3, r3, #16
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8007442:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8007446:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007448:	2302      	movs	r3, #2
 800744a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800744c:	2300      	movs	r3, #0
 800744e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007450:	2303      	movs	r3, #3
 8007452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007454:	230a      	movs	r3, #10
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007458:	f107 0314 	add.w	r3, r7, #20
 800745c:	4619      	mov	r1, r3
 800745e:	4805      	ldr	r0, [pc, #20]	; (8007474 <HAL_QSPI_MspInit+0x84>)
 8007460:	f7fb f84c 	bl	80024fc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8007464:	bf00      	nop
 8007466:	3728      	adds	r7, #40	; 0x28
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	a0001000 	.word	0xa0001000
 8007470:	40021000 	.word	0x40021000
 8007474:	48001000 	.word	0x48001000

08007478 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	; 0x28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007480:	f107 0314 	add.w	r3, r7, #20
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	609a      	str	r2, [r3, #8]
 800748c:	60da      	str	r2, [r3, #12]
 800748e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a17      	ldr	r2, [pc, #92]	; (80074f4 <HAL_SPI_MspInit+0x7c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d128      	bne.n	80074ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800749a:	4b17      	ldr	r3, [pc, #92]	; (80074f8 <HAL_SPI_MspInit+0x80>)
 800749c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749e:	4a16      	ldr	r2, [pc, #88]	; (80074f8 <HAL_SPI_MspInit+0x80>)
 80074a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a4:	6593      	str	r3, [r2, #88]	; 0x58
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <HAL_SPI_MspInit+0x80>)
 80074a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074ae:	613b      	str	r3, [r7, #16]
 80074b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074b2:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <HAL_SPI_MspInit+0x80>)
 80074b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b6:	4a10      	ldr	r2, [pc, #64]	; (80074f8 <HAL_SPI_MspInit+0x80>)
 80074b8:	f043 0304 	orr.w	r3, r3, #4
 80074bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074be:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <HAL_SPI_MspInit+0x80>)
 80074c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c2:	f003 0304 	and.w	r3, r3, #4
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80074ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80074ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074d0:	2302      	movs	r3, #2
 80074d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074d8:	2303      	movs	r3, #3
 80074da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80074dc:	2306      	movs	r3, #6
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074e0:	f107 0314 	add.w	r3, r7, #20
 80074e4:	4619      	mov	r1, r3
 80074e6:	4805      	ldr	r0, [pc, #20]	; (80074fc <HAL_SPI_MspInit+0x84>)
 80074e8:	f7fb f808 	bl	80024fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80074ec:	bf00      	nop
 80074ee:	3728      	adds	r7, #40	; 0x28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40003c00 	.word	0x40003c00
 80074f8:	40021000 	.word	0x40021000
 80074fc:	48000800 	.word	0x48000800

08007500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08c      	sub	sp, #48	; 0x30
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007508:	f107 031c 	add.w	r3, r7, #28
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	605a      	str	r2, [r3, #4]
 8007512:	609a      	str	r2, [r3, #8]
 8007514:	60da      	str	r2, [r3, #12]
 8007516:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a2e      	ldr	r2, [pc, #184]	; (80075d8 <HAL_UART_MspInit+0xd8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d128      	bne.n	8007574 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007522:	4b2e      	ldr	r3, [pc, #184]	; (80075dc <HAL_UART_MspInit+0xdc>)
 8007524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007526:	4a2d      	ldr	r2, [pc, #180]	; (80075dc <HAL_UART_MspInit+0xdc>)
 8007528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800752c:	6613      	str	r3, [r2, #96]	; 0x60
 800752e:	4b2b      	ldr	r3, [pc, #172]	; (80075dc <HAL_UART_MspInit+0xdc>)
 8007530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007536:	61bb      	str	r3, [r7, #24]
 8007538:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800753a:	4b28      	ldr	r3, [pc, #160]	; (80075dc <HAL_UART_MspInit+0xdc>)
 800753c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800753e:	4a27      	ldr	r2, [pc, #156]	; (80075dc <HAL_UART_MspInit+0xdc>)
 8007540:	f043 0302 	orr.w	r3, r3, #2
 8007544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007546:	4b25      	ldr	r3, [pc, #148]	; (80075dc <HAL_UART_MspInit+0xdc>)
 8007548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8007552:	23c0      	movs	r3, #192	; 0xc0
 8007554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007556:	2302      	movs	r3, #2
 8007558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800755a:	2300      	movs	r3, #0
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800755e:	2303      	movs	r3, #3
 8007560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007562:	2307      	movs	r3, #7
 8007564:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007566:	f107 031c 	add.w	r3, r7, #28
 800756a:	4619      	mov	r1, r3
 800756c:	481c      	ldr	r0, [pc, #112]	; (80075e0 <HAL_UART_MspInit+0xe0>)
 800756e:	f7fa ffc5 	bl	80024fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007572:	e02d      	b.n	80075d0 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a1a      	ldr	r2, [pc, #104]	; (80075e4 <HAL_UART_MspInit+0xe4>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d128      	bne.n	80075d0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800757e:	4b17      	ldr	r3, [pc, #92]	; (80075dc <HAL_UART_MspInit+0xdc>)
 8007580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007582:	4a16      	ldr	r2, [pc, #88]	; (80075dc <HAL_UART_MspInit+0xdc>)
 8007584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007588:	6593      	str	r3, [r2, #88]	; 0x58
 800758a:	4b14      	ldr	r3, [pc, #80]	; (80075dc <HAL_UART_MspInit+0xdc>)
 800758c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007592:	613b      	str	r3, [r7, #16]
 8007594:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007596:	4b11      	ldr	r3, [pc, #68]	; (80075dc <HAL_UART_MspInit+0xdc>)
 8007598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800759a:	4a10      	ldr	r2, [pc, #64]	; (80075dc <HAL_UART_MspInit+0xdc>)
 800759c:	f043 0308 	orr.w	r3, r3, #8
 80075a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075a2:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <HAL_UART_MspInit+0xdc>)
 80075a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80075ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80075b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075b4:	2302      	movs	r3, #2
 80075b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075bc:	2303      	movs	r3, #3
 80075be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80075c0:	2307      	movs	r3, #7
 80075c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075c4:	f107 031c 	add.w	r3, r7, #28
 80075c8:	4619      	mov	r1, r3
 80075ca:	4807      	ldr	r0, [pc, #28]	; (80075e8 <HAL_UART_MspInit+0xe8>)
 80075cc:	f7fa ff96 	bl	80024fc <HAL_GPIO_Init>
}
 80075d0:	bf00      	nop
 80075d2:	3730      	adds	r7, #48	; 0x30
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	40013800 	.word	0x40013800
 80075dc:	40021000 	.word	0x40021000
 80075e0:	48000400 	.word	0x48000400
 80075e4:	40004800 	.word	0x40004800
 80075e8:	48000c00 	.word	0x48000c00

080075ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	; 0x28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075f4:	f107 0314 	add.w	r3, r7, #20
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	605a      	str	r2, [r3, #4]
 80075fe:	609a      	str	r2, [r3, #8]
 8007600:	60da      	str	r2, [r3, #12]
 8007602:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800760c:	d154      	bne.n	80076b8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800760e:	4b2c      	ldr	r3, [pc, #176]	; (80076c0 <HAL_PCD_MspInit+0xd4>)
 8007610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007612:	4a2b      	ldr	r2, [pc, #172]	; (80076c0 <HAL_PCD_MspInit+0xd4>)
 8007614:	f043 0301 	orr.w	r3, r3, #1
 8007618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800761a:	4b29      	ldr	r3, [pc, #164]	; (80076c0 <HAL_PCD_MspInit+0xd4>)
 800761c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8007626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800762a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800762c:	2300      	movs	r3, #0
 800762e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007630:	2300      	movs	r3, #0
 8007632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007634:	f107 0314 	add.w	r3, r7, #20
 8007638:	4619      	mov	r1, r3
 800763a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800763e:	f7fa ff5d 	bl	80024fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8007642:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007648:	2302      	movs	r3, #2
 800764a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800764c:	2300      	movs	r3, #0
 800764e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007650:	2303      	movs	r3, #3
 8007652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007654:	230a      	movs	r3, #10
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007658:	f107 0314 	add.w	r3, r7, #20
 800765c:	4619      	mov	r1, r3
 800765e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007662:	f7fa ff4b 	bl	80024fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007666:	4b16      	ldr	r3, [pc, #88]	; (80076c0 <HAL_PCD_MspInit+0xd4>)
 8007668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766a:	4a15      	ldr	r2, [pc, #84]	; (80076c0 <HAL_PCD_MspInit+0xd4>)
 800766c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007672:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <HAL_PCD_MspInit+0xd4>)
 8007674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800767e:	4b10      	ldr	r3, [pc, #64]	; (80076c0 <HAL_PCD_MspInit+0xd4>)
 8007680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d114      	bne.n	80076b4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800768a:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <HAL_PCD_MspInit+0xd4>)
 800768c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768e:	4a0c      	ldr	r2, [pc, #48]	; (80076c0 <HAL_PCD_MspInit+0xd4>)
 8007690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007694:	6593      	str	r3, [r2, #88]	; 0x58
 8007696:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <HAL_PCD_MspInit+0xd4>)
 8007698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800769a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769e:	60bb      	str	r3, [r7, #8]
 80076a0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80076a2:	f7fc f991 	bl	80039c8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80076a6:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <HAL_PCD_MspInit+0xd4>)
 80076a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076aa:	4a05      	ldr	r2, [pc, #20]	; (80076c0 <HAL_PCD_MspInit+0xd4>)
 80076ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076b0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80076b2:	e001      	b.n	80076b8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80076b4:	f7fc f988 	bl	80039c8 <HAL_PWREx_EnableVddUSB>
}
 80076b8:	bf00      	nop
 80076ba:	3728      	adds	r7, #40	; 0x28
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40021000 	.word	0x40021000

080076c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80076c8:	bf00      	nop
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076d2:	b480      	push	{r7}
 80076d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076d6:	e7fe      	b.n	80076d6 <HardFault_Handler+0x4>

080076d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076dc:	e7fe      	b.n	80076dc <MemManage_Handler+0x4>

080076de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076de:	b480      	push	{r7}
 80076e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076e2:	e7fe      	b.n	80076e2 <BusFault_Handler+0x4>

080076e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076e8:	e7fe      	b.n	80076e8 <UsageFault_Handler+0x4>

080076ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80076ea:	b480      	push	{r7}
 80076ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80076ee:	bf00      	nop
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076fc:	bf00      	nop
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007706:	b480      	push	{r7}
 8007708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800770a:	bf00      	nop
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007718:	f7f9 f9b2 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800771c:	bf00      	nop
 800771e:	bd80      	pop	{r7, pc}

08007720 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8007724:	2020      	movs	r0, #32
 8007726:	f7fb f9cf 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800772a:	2040      	movs	r0, #64	; 0x40
 800772c:	f7fb f9cc 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8007730:	2080      	movs	r0, #128	; 0x80
 8007732:	f7fb f9c9 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007736:	f44f 7080 	mov.w	r0, #256	; 0x100
 800773a:	f7fb f9c5 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800773e:	bf00      	nop
 8007740:	bd80      	pop	{r7, pc}

08007742 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007746:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800774a:	f7fb f9bd 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800774e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007752:	f7fb f9b9 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007756:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800775a:	f7fb f9b5 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800775e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007762:	f7fb f9b1 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007766:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800776a:	f7fb f9ad 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800776e:	bf00      	nop
 8007770:	bd80      	pop	{r7, pc}

08007772 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b086      	sub	sp, #24
 8007776:	af00      	add	r7, sp, #0
 8007778:	60f8      	str	r0, [r7, #12]
 800777a:	60b9      	str	r1, [r7, #8]
 800777c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	e00a      	b.n	800779a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007784:	f3af 8000 	nop.w
 8007788:	4601      	mov	r1, r0
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	60ba      	str	r2, [r7, #8]
 8007790:	b2ca      	uxtb	r2, r1
 8007792:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	3301      	adds	r3, #1
 8007798:	617b      	str	r3, [r7, #20]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	429a      	cmp	r2, r3
 80077a0:	dbf0      	blt.n	8007784 <_read+0x12>
	}

return len;
 80077a2:	687b      	ldr	r3, [r7, #4]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <_close>:
	}
	return len;
}

int _close(int file)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	return -1;
 80077b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80077d4:	605a      	str	r2, [r3, #4]
	return 0;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <_isatty>:

int _isatty(int file)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
	return 1;
 80077ec:	2301      	movs	r3, #1
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	607a      	str	r2, [r7, #4]
	return 0;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800781c:	4b11      	ldr	r3, [pc, #68]	; (8007864 <_sbrk+0x50>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d102      	bne.n	800782a <_sbrk+0x16>
		heap_end = &end;
 8007824:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <_sbrk+0x50>)
 8007826:	4a10      	ldr	r2, [pc, #64]	; (8007868 <_sbrk+0x54>)
 8007828:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800782a:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <_sbrk+0x50>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007830:	4b0c      	ldr	r3, [pc, #48]	; (8007864 <_sbrk+0x50>)
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4413      	add	r3, r2
 8007838:	466a      	mov	r2, sp
 800783a:	4293      	cmp	r3, r2
 800783c:	d907      	bls.n	800784e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800783e:	f000 f875 	bl	800792c <__errno>
 8007842:	4602      	mov	r2, r0
 8007844:	230c      	movs	r3, #12
 8007846:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007848:	f04f 33ff 	mov.w	r3, #4294967295
 800784c:	e006      	b.n	800785c <_sbrk+0x48>
	}

	heap_end += incr;
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <_sbrk+0x50>)
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4413      	add	r3, r2
 8007856:	4a03      	ldr	r2, [pc, #12]	; (8007864 <_sbrk+0x50>)
 8007858:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800785a:	68fb      	ldr	r3, [r7, #12]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	200000d0 	.word	0x200000d0
 8007868:	200008a8 	.word	0x200008a8

0800786c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007870:	4b17      	ldr	r3, [pc, #92]	; (80078d0 <SystemInit+0x64>)
 8007872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007876:	4a16      	ldr	r2, [pc, #88]	; (80078d0 <SystemInit+0x64>)
 8007878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800787c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007880:	4b14      	ldr	r3, [pc, #80]	; (80078d4 <SystemInit+0x68>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a13      	ldr	r2, [pc, #76]	; (80078d4 <SystemInit+0x68>)
 8007886:	f043 0301 	orr.w	r3, r3, #1
 800788a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800788c:	4b11      	ldr	r3, [pc, #68]	; (80078d4 <SystemInit+0x68>)
 800788e:	2200      	movs	r2, #0
 8007890:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007892:	4b10      	ldr	r3, [pc, #64]	; (80078d4 <SystemInit+0x68>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a0f      	ldr	r2, [pc, #60]	; (80078d4 <SystemInit+0x68>)
 8007898:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800789c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80078a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80078a2:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <SystemInit+0x68>)
 80078a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80078a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80078aa:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <SystemInit+0x68>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a09      	ldr	r2, [pc, #36]	; (80078d4 <SystemInit+0x68>)
 80078b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80078b6:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <SystemInit+0x68>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80078bc:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <SystemInit+0x64>)
 80078be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80078c2:	609a      	str	r2, [r3, #8]
#endif
}
 80078c4:	bf00      	nop
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	e000ed00 	.word	0xe000ed00
 80078d4:	40021000 	.word	0x40021000

080078d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80078d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007910 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80078dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80078de:	e003      	b.n	80078e8 <LoopCopyDataInit>

080078e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80078e0:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80078e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80078e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80078e6:	3104      	adds	r1, #4

080078e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80078e8:	480b      	ldr	r0, [pc, #44]	; (8007918 <LoopForever+0xa>)
	ldr	r3, =_edata
 80078ea:	4b0c      	ldr	r3, [pc, #48]	; (800791c <LoopForever+0xe>)
	adds	r2, r0, r1
 80078ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80078ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80078f0:	d3f6      	bcc.n	80078e0 <CopyDataInit>
	ldr	r2, =_sbss
 80078f2:	4a0b      	ldr	r2, [pc, #44]	; (8007920 <LoopForever+0x12>)
	b	LoopFillZerobss
 80078f4:	e002      	b.n	80078fc <LoopFillZerobss>

080078f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80078f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80078f8:	f842 3b04 	str.w	r3, [r2], #4

080078fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80078fc:	4b09      	ldr	r3, [pc, #36]	; (8007924 <LoopForever+0x16>)
	cmp	r2, r3
 80078fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007900:	d3f9      	bcc.n	80078f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007902:	f7ff ffb3 	bl	800786c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007906:	f000 f817 	bl	8007938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800790a:	f7fe fca7 	bl	800625c <main>

0800790e <LoopForever>:

LoopForever:
    b LoopForever
 800790e:	e7fe      	b.n	800790e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007910:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007914:	08008a14 	.word	0x08008a14
	ldr	r0, =_sdata
 8007918:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800791c:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8007920:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8007924:	200008a4 	.word	0x200008a4

08007928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007928:	e7fe      	b.n	8007928 <ADC1_2_IRQHandler>
	...

0800792c <__errno>:
 800792c:	4b01      	ldr	r3, [pc, #4]	; (8007934 <__errno+0x8>)
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	20000020 	.word	0x20000020

08007938 <__libc_init_array>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	4e0d      	ldr	r6, [pc, #52]	; (8007970 <__libc_init_array+0x38>)
 800793c:	4c0d      	ldr	r4, [pc, #52]	; (8007974 <__libc_init_array+0x3c>)
 800793e:	1ba4      	subs	r4, r4, r6
 8007940:	10a4      	asrs	r4, r4, #2
 8007942:	2500      	movs	r5, #0
 8007944:	42a5      	cmp	r5, r4
 8007946:	d109      	bne.n	800795c <__libc_init_array+0x24>
 8007948:	4e0b      	ldr	r6, [pc, #44]	; (8007978 <__libc_init_array+0x40>)
 800794a:	4c0c      	ldr	r4, [pc, #48]	; (800797c <__libc_init_array+0x44>)
 800794c:	f000 ff74 	bl	8008838 <_init>
 8007950:	1ba4      	subs	r4, r4, r6
 8007952:	10a4      	asrs	r4, r4, #2
 8007954:	2500      	movs	r5, #0
 8007956:	42a5      	cmp	r5, r4
 8007958:	d105      	bne.n	8007966 <__libc_init_array+0x2e>
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007960:	4798      	blx	r3
 8007962:	3501      	adds	r5, #1
 8007964:	e7ee      	b.n	8007944 <__libc_init_array+0xc>
 8007966:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800796a:	4798      	blx	r3
 800796c:	3501      	adds	r5, #1
 800796e:	e7f2      	b.n	8007956 <__libc_init_array+0x1e>
 8007970:	08008a0c 	.word	0x08008a0c
 8007974:	08008a0c 	.word	0x08008a0c
 8007978:	08008a0c 	.word	0x08008a0c
 800797c:	08008a10 	.word	0x08008a10

08007980 <__itoa>:
 8007980:	1e93      	subs	r3, r2, #2
 8007982:	2b22      	cmp	r3, #34	; 0x22
 8007984:	b510      	push	{r4, lr}
 8007986:	460c      	mov	r4, r1
 8007988:	d904      	bls.n	8007994 <__itoa+0x14>
 800798a:	2300      	movs	r3, #0
 800798c:	700b      	strb	r3, [r1, #0]
 800798e:	461c      	mov	r4, r3
 8007990:	4620      	mov	r0, r4
 8007992:	bd10      	pop	{r4, pc}
 8007994:	2a0a      	cmp	r2, #10
 8007996:	d109      	bne.n	80079ac <__itoa+0x2c>
 8007998:	2800      	cmp	r0, #0
 800799a:	da07      	bge.n	80079ac <__itoa+0x2c>
 800799c:	232d      	movs	r3, #45	; 0x2d
 800799e:	700b      	strb	r3, [r1, #0]
 80079a0:	4240      	negs	r0, r0
 80079a2:	2101      	movs	r1, #1
 80079a4:	4421      	add	r1, r4
 80079a6:	f000 f83d 	bl	8007a24 <__utoa>
 80079aa:	e7f1      	b.n	8007990 <__itoa+0x10>
 80079ac:	2100      	movs	r1, #0
 80079ae:	e7f9      	b.n	80079a4 <__itoa+0x24>

080079b0 <itoa>:
 80079b0:	f7ff bfe6 	b.w	8007980 <__itoa>

080079b4 <memset>:
 80079b4:	4402      	add	r2, r0
 80079b6:	4603      	mov	r3, r0
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d100      	bne.n	80079be <memset+0xa>
 80079bc:	4770      	bx	lr
 80079be:	f803 1b01 	strb.w	r1, [r3], #1
 80079c2:	e7f9      	b.n	80079b8 <memset+0x4>

080079c4 <iprintf>:
 80079c4:	b40f      	push	{r0, r1, r2, r3}
 80079c6:	4b0a      	ldr	r3, [pc, #40]	; (80079f0 <iprintf+0x2c>)
 80079c8:	b513      	push	{r0, r1, r4, lr}
 80079ca:	681c      	ldr	r4, [r3, #0]
 80079cc:	b124      	cbz	r4, 80079d8 <iprintf+0x14>
 80079ce:	69a3      	ldr	r3, [r4, #24]
 80079d0:	b913      	cbnz	r3, 80079d8 <iprintf+0x14>
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 f8a4 	bl	8007b20 <__sinit>
 80079d8:	ab05      	add	r3, sp, #20
 80079da:	9a04      	ldr	r2, [sp, #16]
 80079dc:	68a1      	ldr	r1, [r4, #8]
 80079de:	9301      	str	r3, [sp, #4]
 80079e0:	4620      	mov	r0, r4
 80079e2:	f000 f9ab 	bl	8007d3c <_vfiprintf_r>
 80079e6:	b002      	add	sp, #8
 80079e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ec:	b004      	add	sp, #16
 80079ee:	4770      	bx	lr
 80079f0:	20000020 	.word	0x20000020

080079f4 <strcat>:
 80079f4:	b510      	push	{r4, lr}
 80079f6:	4603      	mov	r3, r0
 80079f8:	781a      	ldrb	r2, [r3, #0]
 80079fa:	1c5c      	adds	r4, r3, #1
 80079fc:	b93a      	cbnz	r2, 8007a0e <strcat+0x1a>
 80079fe:	3b01      	subs	r3, #1
 8007a00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a08:	2a00      	cmp	r2, #0
 8007a0a:	d1f9      	bne.n	8007a00 <strcat+0xc>
 8007a0c:	bd10      	pop	{r4, pc}
 8007a0e:	4623      	mov	r3, r4
 8007a10:	e7f2      	b.n	80079f8 <strcat+0x4>

08007a12 <strcpy>:
 8007a12:	4603      	mov	r3, r0
 8007a14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a18:	f803 2b01 	strb.w	r2, [r3], #1
 8007a1c:	2a00      	cmp	r2, #0
 8007a1e:	d1f9      	bne.n	8007a14 <strcpy+0x2>
 8007a20:	4770      	bx	lr
	...

08007a24 <__utoa>:
 8007a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a26:	4b1d      	ldr	r3, [pc, #116]	; (8007a9c <__utoa+0x78>)
 8007a28:	b08b      	sub	sp, #44	; 0x2c
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	466e      	mov	r6, sp
 8007a30:	f103 0c20 	add.w	ip, r3, #32
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	6859      	ldr	r1, [r3, #4]
 8007a38:	4637      	mov	r7, r6
 8007a3a:	c703      	stmia	r7!, {r0, r1}
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	4563      	cmp	r3, ip
 8007a40:	463e      	mov	r6, r7
 8007a42:	d1f7      	bne.n	8007a34 <__utoa+0x10>
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	791b      	ldrb	r3, [r3, #4]
 8007a48:	713b      	strb	r3, [r7, #4]
 8007a4a:	1e93      	subs	r3, r2, #2
 8007a4c:	2b22      	cmp	r3, #34	; 0x22
 8007a4e:	6038      	str	r0, [r7, #0]
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	d904      	bls.n	8007a60 <__utoa+0x3c>
 8007a56:	7023      	strb	r3, [r4, #0]
 8007a58:	461c      	mov	r4, r3
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	b00b      	add	sp, #44	; 0x2c
 8007a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a60:	1e66      	subs	r6, r4, #1
 8007a62:	fbb5 f0f2 	udiv	r0, r5, r2
 8007a66:	af0a      	add	r7, sp, #40	; 0x28
 8007a68:	fb02 5510 	mls	r5, r2, r0, r5
 8007a6c:	443d      	add	r5, r7
 8007a6e:	1c59      	adds	r1, r3, #1
 8007a70:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8007a74:	f806 5f01 	strb.w	r5, [r6, #1]!
 8007a78:	4605      	mov	r5, r0
 8007a7a:	b968      	cbnz	r0, 8007a98 <__utoa+0x74>
 8007a7c:	5460      	strb	r0, [r4, r1]
 8007a7e:	4423      	add	r3, r4
 8007a80:	4622      	mov	r2, r4
 8007a82:	1b19      	subs	r1, r3, r4
 8007a84:	1b10      	subs	r0, r2, r4
 8007a86:	4281      	cmp	r1, r0
 8007a88:	dde7      	ble.n	8007a5a <__utoa+0x36>
 8007a8a:	7811      	ldrb	r1, [r2, #0]
 8007a8c:	7818      	ldrb	r0, [r3, #0]
 8007a8e:	f802 0b01 	strb.w	r0, [r2], #1
 8007a92:	f803 1901 	strb.w	r1, [r3], #-1
 8007a96:	e7f4      	b.n	8007a82 <__utoa+0x5e>
 8007a98:	460b      	mov	r3, r1
 8007a9a:	e7e2      	b.n	8007a62 <__utoa+0x3e>
 8007a9c:	08008948 	.word	0x08008948

08007aa0 <std>:
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	b510      	push	{r4, lr}
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8007aaa:	6083      	str	r3, [r0, #8]
 8007aac:	8181      	strh	r1, [r0, #12]
 8007aae:	6643      	str	r3, [r0, #100]	; 0x64
 8007ab0:	81c2      	strh	r2, [r0, #14]
 8007ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ab6:	6183      	str	r3, [r0, #24]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	2208      	movs	r2, #8
 8007abc:	305c      	adds	r0, #92	; 0x5c
 8007abe:	f7ff ff79 	bl	80079b4 <memset>
 8007ac2:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <std+0x38>)
 8007ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ac6:	4b05      	ldr	r3, [pc, #20]	; (8007adc <std+0x3c>)
 8007ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007aca:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <std+0x40>)
 8007acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ace:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <std+0x44>)
 8007ad0:	6224      	str	r4, [r4, #32]
 8007ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ad4:	bd10      	pop	{r4, pc}
 8007ad6:	bf00      	nop
 8007ad8:	08008299 	.word	0x08008299
 8007adc:	080082bb 	.word	0x080082bb
 8007ae0:	080082f3 	.word	0x080082f3
 8007ae4:	08008317 	.word	0x08008317

08007ae8 <_cleanup_r>:
 8007ae8:	4901      	ldr	r1, [pc, #4]	; (8007af0 <_cleanup_r+0x8>)
 8007aea:	f000 b885 	b.w	8007bf8 <_fwalk_reent>
 8007aee:	bf00      	nop
 8007af0:	080085f1 	.word	0x080085f1

08007af4 <__sfmoreglue>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	1e4a      	subs	r2, r1, #1
 8007af8:	2568      	movs	r5, #104	; 0x68
 8007afa:	4355      	muls	r5, r2
 8007afc:	460e      	mov	r6, r1
 8007afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b02:	f000 f897 	bl	8007c34 <_malloc_r>
 8007b06:	4604      	mov	r4, r0
 8007b08:	b140      	cbz	r0, 8007b1c <__sfmoreglue+0x28>
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8007b10:	300c      	adds	r0, #12
 8007b12:	60a0      	str	r0, [r4, #8]
 8007b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b18:	f7ff ff4c 	bl	80079b4 <memset>
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}

08007b20 <__sinit>:
 8007b20:	6983      	ldr	r3, [r0, #24]
 8007b22:	b510      	push	{r4, lr}
 8007b24:	4604      	mov	r4, r0
 8007b26:	bb33      	cbnz	r3, 8007b76 <__sinit+0x56>
 8007b28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007b2c:	6503      	str	r3, [r0, #80]	; 0x50
 8007b2e:	4b12      	ldr	r3, [pc, #72]	; (8007b78 <__sinit+0x58>)
 8007b30:	4a12      	ldr	r2, [pc, #72]	; (8007b7c <__sinit+0x5c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6282      	str	r2, [r0, #40]	; 0x28
 8007b36:	4298      	cmp	r0, r3
 8007b38:	bf04      	itt	eq
 8007b3a:	2301      	moveq	r3, #1
 8007b3c:	6183      	streq	r3, [r0, #24]
 8007b3e:	f000 f81f 	bl	8007b80 <__sfp>
 8007b42:	6060      	str	r0, [r4, #4]
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 f81b 	bl	8007b80 <__sfp>
 8007b4a:	60a0      	str	r0, [r4, #8]
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 f817 	bl	8007b80 <__sfp>
 8007b52:	2200      	movs	r2, #0
 8007b54:	60e0      	str	r0, [r4, #12]
 8007b56:	2104      	movs	r1, #4
 8007b58:	6860      	ldr	r0, [r4, #4]
 8007b5a:	f7ff ffa1 	bl	8007aa0 <std>
 8007b5e:	2201      	movs	r2, #1
 8007b60:	2109      	movs	r1, #9
 8007b62:	68a0      	ldr	r0, [r4, #8]
 8007b64:	f7ff ff9c 	bl	8007aa0 <std>
 8007b68:	2202      	movs	r2, #2
 8007b6a:	2112      	movs	r1, #18
 8007b6c:	68e0      	ldr	r0, [r4, #12]
 8007b6e:	f7ff ff97 	bl	8007aa0 <std>
 8007b72:	2301      	movs	r3, #1
 8007b74:	61a3      	str	r3, [r4, #24]
 8007b76:	bd10      	pop	{r4, pc}
 8007b78:	08008944 	.word	0x08008944
 8007b7c:	08007ae9 	.word	0x08007ae9

08007b80 <__sfp>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	4b1b      	ldr	r3, [pc, #108]	; (8007bf0 <__sfp+0x70>)
 8007b84:	681e      	ldr	r6, [r3, #0]
 8007b86:	69b3      	ldr	r3, [r6, #24]
 8007b88:	4607      	mov	r7, r0
 8007b8a:	b913      	cbnz	r3, 8007b92 <__sfp+0x12>
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f7ff ffc7 	bl	8007b20 <__sinit>
 8007b92:	3648      	adds	r6, #72	; 0x48
 8007b94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	d503      	bpl.n	8007ba4 <__sfp+0x24>
 8007b9c:	6833      	ldr	r3, [r6, #0]
 8007b9e:	b133      	cbz	r3, 8007bae <__sfp+0x2e>
 8007ba0:	6836      	ldr	r6, [r6, #0]
 8007ba2:	e7f7      	b.n	8007b94 <__sfp+0x14>
 8007ba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ba8:	b16d      	cbz	r5, 8007bc6 <__sfp+0x46>
 8007baa:	3468      	adds	r4, #104	; 0x68
 8007bac:	e7f4      	b.n	8007b98 <__sfp+0x18>
 8007bae:	2104      	movs	r1, #4
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	f7ff ff9f 	bl	8007af4 <__sfmoreglue>
 8007bb6:	6030      	str	r0, [r6, #0]
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d1f1      	bne.n	8007ba0 <__sfp+0x20>
 8007bbc:	230c      	movs	r3, #12
 8007bbe:	603b      	str	r3, [r7, #0]
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <__sfp+0x74>)
 8007bc8:	6665      	str	r5, [r4, #100]	; 0x64
 8007bca:	e9c4 5500 	strd	r5, r5, [r4]
 8007bce:	60a5      	str	r5, [r4, #8]
 8007bd0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007bd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007bd8:	2208      	movs	r2, #8
 8007bda:	4629      	mov	r1, r5
 8007bdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007be0:	f7ff fee8 	bl	80079b4 <memset>
 8007be4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007be8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bec:	e7e9      	b.n	8007bc2 <__sfp+0x42>
 8007bee:	bf00      	nop
 8007bf0:	08008944 	.word	0x08008944
 8007bf4:	ffff0001 	.word	0xffff0001

08007bf8 <_fwalk_reent>:
 8007bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	4689      	mov	r9, r1
 8007c00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c04:	2600      	movs	r6, #0
 8007c06:	b914      	cbnz	r4, 8007c0e <_fwalk_reent+0x16>
 8007c08:	4630      	mov	r0, r6
 8007c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007c12:	3f01      	subs	r7, #1
 8007c14:	d501      	bpl.n	8007c1a <_fwalk_reent+0x22>
 8007c16:	6824      	ldr	r4, [r4, #0]
 8007c18:	e7f5      	b.n	8007c06 <_fwalk_reent+0xe>
 8007c1a:	89ab      	ldrh	r3, [r5, #12]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d907      	bls.n	8007c30 <_fwalk_reent+0x38>
 8007c20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c24:	3301      	adds	r3, #1
 8007c26:	d003      	beq.n	8007c30 <_fwalk_reent+0x38>
 8007c28:	4629      	mov	r1, r5
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	47c8      	blx	r9
 8007c2e:	4306      	orrs	r6, r0
 8007c30:	3568      	adds	r5, #104	; 0x68
 8007c32:	e7ee      	b.n	8007c12 <_fwalk_reent+0x1a>

08007c34 <_malloc_r>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	1ccd      	adds	r5, r1, #3
 8007c38:	f025 0503 	bic.w	r5, r5, #3
 8007c3c:	3508      	adds	r5, #8
 8007c3e:	2d0c      	cmp	r5, #12
 8007c40:	bf38      	it	cc
 8007c42:	250c      	movcc	r5, #12
 8007c44:	2d00      	cmp	r5, #0
 8007c46:	4606      	mov	r6, r0
 8007c48:	db01      	blt.n	8007c4e <_malloc_r+0x1a>
 8007c4a:	42a9      	cmp	r1, r5
 8007c4c:	d903      	bls.n	8007c56 <_malloc_r+0x22>
 8007c4e:	230c      	movs	r3, #12
 8007c50:	6033      	str	r3, [r6, #0]
 8007c52:	2000      	movs	r0, #0
 8007c54:	bd70      	pop	{r4, r5, r6, pc}
 8007c56:	f000 fd6b 	bl	8008730 <__malloc_lock>
 8007c5a:	4a21      	ldr	r2, [pc, #132]	; (8007ce0 <_malloc_r+0xac>)
 8007c5c:	6814      	ldr	r4, [r2, #0]
 8007c5e:	4621      	mov	r1, r4
 8007c60:	b991      	cbnz	r1, 8007c88 <_malloc_r+0x54>
 8007c62:	4c20      	ldr	r4, [pc, #128]	; (8007ce4 <_malloc_r+0xb0>)
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	b91b      	cbnz	r3, 8007c70 <_malloc_r+0x3c>
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f000 fb05 	bl	8008278 <_sbrk_r>
 8007c6e:	6020      	str	r0, [r4, #0]
 8007c70:	4629      	mov	r1, r5
 8007c72:	4630      	mov	r0, r6
 8007c74:	f000 fb00 	bl	8008278 <_sbrk_r>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d124      	bne.n	8007cc6 <_malloc_r+0x92>
 8007c7c:	230c      	movs	r3, #12
 8007c7e:	6033      	str	r3, [r6, #0]
 8007c80:	4630      	mov	r0, r6
 8007c82:	f000 fd56 	bl	8008732 <__malloc_unlock>
 8007c86:	e7e4      	b.n	8007c52 <_malloc_r+0x1e>
 8007c88:	680b      	ldr	r3, [r1, #0]
 8007c8a:	1b5b      	subs	r3, r3, r5
 8007c8c:	d418      	bmi.n	8007cc0 <_malloc_r+0x8c>
 8007c8e:	2b0b      	cmp	r3, #11
 8007c90:	d90f      	bls.n	8007cb2 <_malloc_r+0x7e>
 8007c92:	600b      	str	r3, [r1, #0]
 8007c94:	50cd      	str	r5, [r1, r3]
 8007c96:	18cc      	adds	r4, r1, r3
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f000 fd4a 	bl	8008732 <__malloc_unlock>
 8007c9e:	f104 000b 	add.w	r0, r4, #11
 8007ca2:	1d23      	adds	r3, r4, #4
 8007ca4:	f020 0007 	bic.w	r0, r0, #7
 8007ca8:	1ac3      	subs	r3, r0, r3
 8007caa:	d0d3      	beq.n	8007c54 <_malloc_r+0x20>
 8007cac:	425a      	negs	r2, r3
 8007cae:	50e2      	str	r2, [r4, r3]
 8007cb0:	e7d0      	b.n	8007c54 <_malloc_r+0x20>
 8007cb2:	428c      	cmp	r4, r1
 8007cb4:	684b      	ldr	r3, [r1, #4]
 8007cb6:	bf16      	itet	ne
 8007cb8:	6063      	strne	r3, [r4, #4]
 8007cba:	6013      	streq	r3, [r2, #0]
 8007cbc:	460c      	movne	r4, r1
 8007cbe:	e7eb      	b.n	8007c98 <_malloc_r+0x64>
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	6849      	ldr	r1, [r1, #4]
 8007cc4:	e7cc      	b.n	8007c60 <_malloc_r+0x2c>
 8007cc6:	1cc4      	adds	r4, r0, #3
 8007cc8:	f024 0403 	bic.w	r4, r4, #3
 8007ccc:	42a0      	cmp	r0, r4
 8007cce:	d005      	beq.n	8007cdc <_malloc_r+0xa8>
 8007cd0:	1a21      	subs	r1, r4, r0
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f000 fad0 	bl	8008278 <_sbrk_r>
 8007cd8:	3001      	adds	r0, #1
 8007cda:	d0cf      	beq.n	8007c7c <_malloc_r+0x48>
 8007cdc:	6025      	str	r5, [r4, #0]
 8007cde:	e7db      	b.n	8007c98 <_malloc_r+0x64>
 8007ce0:	200000d4 	.word	0x200000d4
 8007ce4:	200000d8 	.word	0x200000d8

08007ce8 <__sfputc_r>:
 8007ce8:	6893      	ldr	r3, [r2, #8]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	b410      	push	{r4}
 8007cf0:	6093      	str	r3, [r2, #8]
 8007cf2:	da08      	bge.n	8007d06 <__sfputc_r+0x1e>
 8007cf4:	6994      	ldr	r4, [r2, #24]
 8007cf6:	42a3      	cmp	r3, r4
 8007cf8:	db01      	blt.n	8007cfe <__sfputc_r+0x16>
 8007cfa:	290a      	cmp	r1, #10
 8007cfc:	d103      	bne.n	8007d06 <__sfputc_r+0x1e>
 8007cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d02:	f000 bb0d 	b.w	8008320 <__swbuf_r>
 8007d06:	6813      	ldr	r3, [r2, #0]
 8007d08:	1c58      	adds	r0, r3, #1
 8007d0a:	6010      	str	r0, [r2, #0]
 8007d0c:	7019      	strb	r1, [r3, #0]
 8007d0e:	4608      	mov	r0, r1
 8007d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <__sfputs_r>:
 8007d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d18:	4606      	mov	r6, r0
 8007d1a:	460f      	mov	r7, r1
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	18d5      	adds	r5, r2, r3
 8007d20:	42ac      	cmp	r4, r5
 8007d22:	d101      	bne.n	8007d28 <__sfputs_r+0x12>
 8007d24:	2000      	movs	r0, #0
 8007d26:	e007      	b.n	8007d38 <__sfputs_r+0x22>
 8007d28:	463a      	mov	r2, r7
 8007d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f7ff ffda 	bl	8007ce8 <__sfputc_r>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d1f3      	bne.n	8007d20 <__sfputs_r+0xa>
 8007d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d3c <_vfiprintf_r>:
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	460c      	mov	r4, r1
 8007d42:	b09d      	sub	sp, #116	; 0x74
 8007d44:	4617      	mov	r7, r2
 8007d46:	461d      	mov	r5, r3
 8007d48:	4606      	mov	r6, r0
 8007d4a:	b118      	cbz	r0, 8007d54 <_vfiprintf_r+0x18>
 8007d4c:	6983      	ldr	r3, [r0, #24]
 8007d4e:	b90b      	cbnz	r3, 8007d54 <_vfiprintf_r+0x18>
 8007d50:	f7ff fee6 	bl	8007b20 <__sinit>
 8007d54:	4b7c      	ldr	r3, [pc, #496]	; (8007f48 <_vfiprintf_r+0x20c>)
 8007d56:	429c      	cmp	r4, r3
 8007d58:	d158      	bne.n	8007e0c <_vfiprintf_r+0xd0>
 8007d5a:	6874      	ldr	r4, [r6, #4]
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	0718      	lsls	r0, r3, #28
 8007d60:	d55e      	bpl.n	8007e20 <_vfiprintf_r+0xe4>
 8007d62:	6923      	ldr	r3, [r4, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d05b      	beq.n	8007e20 <_vfiprintf_r+0xe4>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d6c:	2320      	movs	r3, #32
 8007d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d72:	2330      	movs	r3, #48	; 0x30
 8007d74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d78:	9503      	str	r5, [sp, #12]
 8007d7a:	f04f 0b01 	mov.w	fp, #1
 8007d7e:	46b8      	mov	r8, r7
 8007d80:	4645      	mov	r5, r8
 8007d82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d86:	b10b      	cbz	r3, 8007d8c <_vfiprintf_r+0x50>
 8007d88:	2b25      	cmp	r3, #37	; 0x25
 8007d8a:	d154      	bne.n	8007e36 <_vfiprintf_r+0xfa>
 8007d8c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007d90:	d00b      	beq.n	8007daa <_vfiprintf_r+0x6e>
 8007d92:	4653      	mov	r3, sl
 8007d94:	463a      	mov	r2, r7
 8007d96:	4621      	mov	r1, r4
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f7ff ffbc 	bl	8007d16 <__sfputs_r>
 8007d9e:	3001      	adds	r0, #1
 8007da0:	f000 80c2 	beq.w	8007f28 <_vfiprintf_r+0x1ec>
 8007da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da6:	4453      	add	r3, sl
 8007da8:	9309      	str	r3, [sp, #36]	; 0x24
 8007daa:	f898 3000 	ldrb.w	r3, [r8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 80ba 	beq.w	8007f28 <_vfiprintf_r+0x1ec>
 8007db4:	2300      	movs	r3, #0
 8007db6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dbe:	9304      	str	r3, [sp, #16]
 8007dc0:	9307      	str	r3, [sp, #28]
 8007dc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dc6:	931a      	str	r3, [sp, #104]	; 0x68
 8007dc8:	46a8      	mov	r8, r5
 8007dca:	2205      	movs	r2, #5
 8007dcc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007dd0:	485e      	ldr	r0, [pc, #376]	; (8007f4c <_vfiprintf_r+0x210>)
 8007dd2:	f7f8 fa05 	bl	80001e0 <memchr>
 8007dd6:	9b04      	ldr	r3, [sp, #16]
 8007dd8:	bb78      	cbnz	r0, 8007e3a <_vfiprintf_r+0xfe>
 8007dda:	06d9      	lsls	r1, r3, #27
 8007ddc:	bf44      	itt	mi
 8007dde:	2220      	movmi	r2, #32
 8007de0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007de4:	071a      	lsls	r2, r3, #28
 8007de6:	bf44      	itt	mi
 8007de8:	222b      	movmi	r2, #43	; 0x2b
 8007dea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007dee:	782a      	ldrb	r2, [r5, #0]
 8007df0:	2a2a      	cmp	r2, #42	; 0x2a
 8007df2:	d02a      	beq.n	8007e4a <_vfiprintf_r+0x10e>
 8007df4:	9a07      	ldr	r2, [sp, #28]
 8007df6:	46a8      	mov	r8, r5
 8007df8:	2000      	movs	r0, #0
 8007dfa:	250a      	movs	r5, #10
 8007dfc:	4641      	mov	r1, r8
 8007dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e02:	3b30      	subs	r3, #48	; 0x30
 8007e04:	2b09      	cmp	r3, #9
 8007e06:	d969      	bls.n	8007edc <_vfiprintf_r+0x1a0>
 8007e08:	b360      	cbz	r0, 8007e64 <_vfiprintf_r+0x128>
 8007e0a:	e024      	b.n	8007e56 <_vfiprintf_r+0x11a>
 8007e0c:	4b50      	ldr	r3, [pc, #320]	; (8007f50 <_vfiprintf_r+0x214>)
 8007e0e:	429c      	cmp	r4, r3
 8007e10:	d101      	bne.n	8007e16 <_vfiprintf_r+0xda>
 8007e12:	68b4      	ldr	r4, [r6, #8]
 8007e14:	e7a2      	b.n	8007d5c <_vfiprintf_r+0x20>
 8007e16:	4b4f      	ldr	r3, [pc, #316]	; (8007f54 <_vfiprintf_r+0x218>)
 8007e18:	429c      	cmp	r4, r3
 8007e1a:	bf08      	it	eq
 8007e1c:	68f4      	ldreq	r4, [r6, #12]
 8007e1e:	e79d      	b.n	8007d5c <_vfiprintf_r+0x20>
 8007e20:	4621      	mov	r1, r4
 8007e22:	4630      	mov	r0, r6
 8007e24:	f000 fae0 	bl	80083e8 <__swsetup_r>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d09d      	beq.n	8007d68 <_vfiprintf_r+0x2c>
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	b01d      	add	sp, #116	; 0x74
 8007e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e36:	46a8      	mov	r8, r5
 8007e38:	e7a2      	b.n	8007d80 <_vfiprintf_r+0x44>
 8007e3a:	4a44      	ldr	r2, [pc, #272]	; (8007f4c <_vfiprintf_r+0x210>)
 8007e3c:	1a80      	subs	r0, r0, r2
 8007e3e:	fa0b f000 	lsl.w	r0, fp, r0
 8007e42:	4318      	orrs	r0, r3
 8007e44:	9004      	str	r0, [sp, #16]
 8007e46:	4645      	mov	r5, r8
 8007e48:	e7be      	b.n	8007dc8 <_vfiprintf_r+0x8c>
 8007e4a:	9a03      	ldr	r2, [sp, #12]
 8007e4c:	1d11      	adds	r1, r2, #4
 8007e4e:	6812      	ldr	r2, [r2, #0]
 8007e50:	9103      	str	r1, [sp, #12]
 8007e52:	2a00      	cmp	r2, #0
 8007e54:	db01      	blt.n	8007e5a <_vfiprintf_r+0x11e>
 8007e56:	9207      	str	r2, [sp, #28]
 8007e58:	e004      	b.n	8007e64 <_vfiprintf_r+0x128>
 8007e5a:	4252      	negs	r2, r2
 8007e5c:	f043 0302 	orr.w	r3, r3, #2
 8007e60:	9207      	str	r2, [sp, #28]
 8007e62:	9304      	str	r3, [sp, #16]
 8007e64:	f898 3000 	ldrb.w	r3, [r8]
 8007e68:	2b2e      	cmp	r3, #46	; 0x2e
 8007e6a:	d10e      	bne.n	8007e8a <_vfiprintf_r+0x14e>
 8007e6c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007e70:	2b2a      	cmp	r3, #42	; 0x2a
 8007e72:	d138      	bne.n	8007ee6 <_vfiprintf_r+0x1aa>
 8007e74:	9b03      	ldr	r3, [sp, #12]
 8007e76:	1d1a      	adds	r2, r3, #4
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	9203      	str	r2, [sp, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bfb8      	it	lt
 8007e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e84:	f108 0802 	add.w	r8, r8, #2
 8007e88:	9305      	str	r3, [sp, #20]
 8007e8a:	4d33      	ldr	r5, [pc, #204]	; (8007f58 <_vfiprintf_r+0x21c>)
 8007e8c:	f898 1000 	ldrb.w	r1, [r8]
 8007e90:	2203      	movs	r2, #3
 8007e92:	4628      	mov	r0, r5
 8007e94:	f7f8 f9a4 	bl	80001e0 <memchr>
 8007e98:	b140      	cbz	r0, 8007eac <_vfiprintf_r+0x170>
 8007e9a:	2340      	movs	r3, #64	; 0x40
 8007e9c:	1b40      	subs	r0, r0, r5
 8007e9e:	fa03 f000 	lsl.w	r0, r3, r0
 8007ea2:	9b04      	ldr	r3, [sp, #16]
 8007ea4:	4303      	orrs	r3, r0
 8007ea6:	f108 0801 	add.w	r8, r8, #1
 8007eaa:	9304      	str	r3, [sp, #16]
 8007eac:	f898 1000 	ldrb.w	r1, [r8]
 8007eb0:	482a      	ldr	r0, [pc, #168]	; (8007f5c <_vfiprintf_r+0x220>)
 8007eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eb6:	2206      	movs	r2, #6
 8007eb8:	f108 0701 	add.w	r7, r8, #1
 8007ebc:	f7f8 f990 	bl	80001e0 <memchr>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	d037      	beq.n	8007f34 <_vfiprintf_r+0x1f8>
 8007ec4:	4b26      	ldr	r3, [pc, #152]	; (8007f60 <_vfiprintf_r+0x224>)
 8007ec6:	bb1b      	cbnz	r3, 8007f10 <_vfiprintf_r+0x1d4>
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	3307      	adds	r3, #7
 8007ecc:	f023 0307 	bic.w	r3, r3, #7
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	9303      	str	r3, [sp, #12]
 8007ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed6:	444b      	add	r3, r9
 8007ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eda:	e750      	b.n	8007d7e <_vfiprintf_r+0x42>
 8007edc:	fb05 3202 	mla	r2, r5, r2, r3
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	4688      	mov	r8, r1
 8007ee4:	e78a      	b.n	8007dfc <_vfiprintf_r+0xc0>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f108 0801 	add.w	r8, r8, #1
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	250a      	movs	r5, #10
 8007ef2:	4640      	mov	r0, r8
 8007ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ef8:	3a30      	subs	r2, #48	; 0x30
 8007efa:	2a09      	cmp	r2, #9
 8007efc:	d903      	bls.n	8007f06 <_vfiprintf_r+0x1ca>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0c3      	beq.n	8007e8a <_vfiprintf_r+0x14e>
 8007f02:	9105      	str	r1, [sp, #20]
 8007f04:	e7c1      	b.n	8007e8a <_vfiprintf_r+0x14e>
 8007f06:	fb05 2101 	mla	r1, r5, r1, r2
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	e7f0      	b.n	8007ef2 <_vfiprintf_r+0x1b6>
 8007f10:	ab03      	add	r3, sp, #12
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	4622      	mov	r2, r4
 8007f16:	4b13      	ldr	r3, [pc, #76]	; (8007f64 <_vfiprintf_r+0x228>)
 8007f18:	a904      	add	r1, sp, #16
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f3af 8000 	nop.w
 8007f20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f24:	4681      	mov	r9, r0
 8007f26:	d1d5      	bne.n	8007ed4 <_vfiprintf_r+0x198>
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	065b      	lsls	r3, r3, #25
 8007f2c:	f53f af7e 	bmi.w	8007e2c <_vfiprintf_r+0xf0>
 8007f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f32:	e77d      	b.n	8007e30 <_vfiprintf_r+0xf4>
 8007f34:	ab03      	add	r3, sp, #12
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <_vfiprintf_r+0x228>)
 8007f3c:	a904      	add	r1, sp, #16
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f000 f888 	bl	8008054 <_printf_i>
 8007f44:	e7ec      	b.n	8007f20 <_vfiprintf_r+0x1e4>
 8007f46:	bf00      	nop
 8007f48:	08008990 	.word	0x08008990
 8007f4c:	080089d0 	.word	0x080089d0
 8007f50:	080089b0 	.word	0x080089b0
 8007f54:	08008970 	.word	0x08008970
 8007f58:	080089d6 	.word	0x080089d6
 8007f5c:	080089da 	.word	0x080089da
 8007f60:	00000000 	.word	0x00000000
 8007f64:	08007d17 	.word	0x08007d17

08007f68 <_printf_common>:
 8007f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6c:	4691      	mov	r9, r2
 8007f6e:	461f      	mov	r7, r3
 8007f70:	688a      	ldr	r2, [r1, #8]
 8007f72:	690b      	ldr	r3, [r1, #16]
 8007f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	bfb8      	it	lt
 8007f7c:	4613      	movlt	r3, r2
 8007f7e:	f8c9 3000 	str.w	r3, [r9]
 8007f82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f86:	4606      	mov	r6, r0
 8007f88:	460c      	mov	r4, r1
 8007f8a:	b112      	cbz	r2, 8007f92 <_printf_common+0x2a>
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	f8c9 3000 	str.w	r3, [r9]
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	0699      	lsls	r1, r3, #26
 8007f96:	bf42      	ittt	mi
 8007f98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007f9c:	3302      	addmi	r3, #2
 8007f9e:	f8c9 3000 	strmi.w	r3, [r9]
 8007fa2:	6825      	ldr	r5, [r4, #0]
 8007fa4:	f015 0506 	ands.w	r5, r5, #6
 8007fa8:	d107      	bne.n	8007fba <_printf_common+0x52>
 8007faa:	f104 0a19 	add.w	sl, r4, #25
 8007fae:	68e3      	ldr	r3, [r4, #12]
 8007fb0:	f8d9 2000 	ldr.w	r2, [r9]
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	42ab      	cmp	r3, r5
 8007fb8:	dc28      	bgt.n	800800c <_printf_common+0xa4>
 8007fba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007fbe:	6822      	ldr	r2, [r4, #0]
 8007fc0:	3300      	adds	r3, #0
 8007fc2:	bf18      	it	ne
 8007fc4:	2301      	movne	r3, #1
 8007fc6:	0692      	lsls	r2, r2, #26
 8007fc8:	d42d      	bmi.n	8008026 <_printf_common+0xbe>
 8007fca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fce:	4639      	mov	r1, r7
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	47c0      	blx	r8
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d020      	beq.n	800801a <_printf_common+0xb2>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	68e5      	ldr	r5, [r4, #12]
 8007fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8007fe0:	f003 0306 	and.w	r3, r3, #6
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	bf08      	it	eq
 8007fe8:	1aad      	subeq	r5, r5, r2
 8007fea:	68a3      	ldr	r3, [r4, #8]
 8007fec:	6922      	ldr	r2, [r4, #16]
 8007fee:	bf0c      	ite	eq
 8007ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ff4:	2500      	movne	r5, #0
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	bfc4      	itt	gt
 8007ffa:	1a9b      	subgt	r3, r3, r2
 8007ffc:	18ed      	addgt	r5, r5, r3
 8007ffe:	f04f 0900 	mov.w	r9, #0
 8008002:	341a      	adds	r4, #26
 8008004:	454d      	cmp	r5, r9
 8008006:	d11a      	bne.n	800803e <_printf_common+0xd6>
 8008008:	2000      	movs	r0, #0
 800800a:	e008      	b.n	800801e <_printf_common+0xb6>
 800800c:	2301      	movs	r3, #1
 800800e:	4652      	mov	r2, sl
 8008010:	4639      	mov	r1, r7
 8008012:	4630      	mov	r0, r6
 8008014:	47c0      	blx	r8
 8008016:	3001      	adds	r0, #1
 8008018:	d103      	bne.n	8008022 <_printf_common+0xba>
 800801a:	f04f 30ff 	mov.w	r0, #4294967295
 800801e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008022:	3501      	adds	r5, #1
 8008024:	e7c3      	b.n	8007fae <_printf_common+0x46>
 8008026:	18e1      	adds	r1, r4, r3
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	2030      	movs	r0, #48	; 0x30
 800802c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008030:	4422      	add	r2, r4
 8008032:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008036:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800803a:	3302      	adds	r3, #2
 800803c:	e7c5      	b.n	8007fca <_printf_common+0x62>
 800803e:	2301      	movs	r3, #1
 8008040:	4622      	mov	r2, r4
 8008042:	4639      	mov	r1, r7
 8008044:	4630      	mov	r0, r6
 8008046:	47c0      	blx	r8
 8008048:	3001      	adds	r0, #1
 800804a:	d0e6      	beq.n	800801a <_printf_common+0xb2>
 800804c:	f109 0901 	add.w	r9, r9, #1
 8008050:	e7d8      	b.n	8008004 <_printf_common+0x9c>
	...

08008054 <_printf_i>:
 8008054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008058:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800805c:	460c      	mov	r4, r1
 800805e:	7e09      	ldrb	r1, [r1, #24]
 8008060:	b085      	sub	sp, #20
 8008062:	296e      	cmp	r1, #110	; 0x6e
 8008064:	4617      	mov	r7, r2
 8008066:	4606      	mov	r6, r0
 8008068:	4698      	mov	r8, r3
 800806a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800806c:	f000 80b3 	beq.w	80081d6 <_printf_i+0x182>
 8008070:	d822      	bhi.n	80080b8 <_printf_i+0x64>
 8008072:	2963      	cmp	r1, #99	; 0x63
 8008074:	d036      	beq.n	80080e4 <_printf_i+0x90>
 8008076:	d80a      	bhi.n	800808e <_printf_i+0x3a>
 8008078:	2900      	cmp	r1, #0
 800807a:	f000 80b9 	beq.w	80081f0 <_printf_i+0x19c>
 800807e:	2958      	cmp	r1, #88	; 0x58
 8008080:	f000 8083 	beq.w	800818a <_printf_i+0x136>
 8008084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008088:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800808c:	e032      	b.n	80080f4 <_printf_i+0xa0>
 800808e:	2964      	cmp	r1, #100	; 0x64
 8008090:	d001      	beq.n	8008096 <_printf_i+0x42>
 8008092:	2969      	cmp	r1, #105	; 0x69
 8008094:	d1f6      	bne.n	8008084 <_printf_i+0x30>
 8008096:	6820      	ldr	r0, [r4, #0]
 8008098:	6813      	ldr	r3, [r2, #0]
 800809a:	0605      	lsls	r5, r0, #24
 800809c:	f103 0104 	add.w	r1, r3, #4
 80080a0:	d52a      	bpl.n	80080f8 <_printf_i+0xa4>
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6011      	str	r1, [r2, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	da03      	bge.n	80080b2 <_printf_i+0x5e>
 80080aa:	222d      	movs	r2, #45	; 0x2d
 80080ac:	425b      	negs	r3, r3
 80080ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80080b2:	486f      	ldr	r0, [pc, #444]	; (8008270 <_printf_i+0x21c>)
 80080b4:	220a      	movs	r2, #10
 80080b6:	e039      	b.n	800812c <_printf_i+0xd8>
 80080b8:	2973      	cmp	r1, #115	; 0x73
 80080ba:	f000 809d 	beq.w	80081f8 <_printf_i+0x1a4>
 80080be:	d808      	bhi.n	80080d2 <_printf_i+0x7e>
 80080c0:	296f      	cmp	r1, #111	; 0x6f
 80080c2:	d020      	beq.n	8008106 <_printf_i+0xb2>
 80080c4:	2970      	cmp	r1, #112	; 0x70
 80080c6:	d1dd      	bne.n	8008084 <_printf_i+0x30>
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	f043 0320 	orr.w	r3, r3, #32
 80080ce:	6023      	str	r3, [r4, #0]
 80080d0:	e003      	b.n	80080da <_printf_i+0x86>
 80080d2:	2975      	cmp	r1, #117	; 0x75
 80080d4:	d017      	beq.n	8008106 <_printf_i+0xb2>
 80080d6:	2978      	cmp	r1, #120	; 0x78
 80080d8:	d1d4      	bne.n	8008084 <_printf_i+0x30>
 80080da:	2378      	movs	r3, #120	; 0x78
 80080dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080e0:	4864      	ldr	r0, [pc, #400]	; (8008274 <_printf_i+0x220>)
 80080e2:	e055      	b.n	8008190 <_printf_i+0x13c>
 80080e4:	6813      	ldr	r3, [r2, #0]
 80080e6:	1d19      	adds	r1, r3, #4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6011      	str	r1, [r2, #0]
 80080ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080f4:	2301      	movs	r3, #1
 80080f6:	e08c      	b.n	8008212 <_printf_i+0x1be>
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6011      	str	r1, [r2, #0]
 80080fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008100:	bf18      	it	ne
 8008102:	b21b      	sxthne	r3, r3
 8008104:	e7cf      	b.n	80080a6 <_printf_i+0x52>
 8008106:	6813      	ldr	r3, [r2, #0]
 8008108:	6825      	ldr	r5, [r4, #0]
 800810a:	1d18      	adds	r0, r3, #4
 800810c:	6010      	str	r0, [r2, #0]
 800810e:	0628      	lsls	r0, r5, #24
 8008110:	d501      	bpl.n	8008116 <_printf_i+0xc2>
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	e002      	b.n	800811c <_printf_i+0xc8>
 8008116:	0668      	lsls	r0, r5, #25
 8008118:	d5fb      	bpl.n	8008112 <_printf_i+0xbe>
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	4854      	ldr	r0, [pc, #336]	; (8008270 <_printf_i+0x21c>)
 800811e:	296f      	cmp	r1, #111	; 0x6f
 8008120:	bf14      	ite	ne
 8008122:	220a      	movne	r2, #10
 8008124:	2208      	moveq	r2, #8
 8008126:	2100      	movs	r1, #0
 8008128:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800812c:	6865      	ldr	r5, [r4, #4]
 800812e:	60a5      	str	r5, [r4, #8]
 8008130:	2d00      	cmp	r5, #0
 8008132:	f2c0 8095 	blt.w	8008260 <_printf_i+0x20c>
 8008136:	6821      	ldr	r1, [r4, #0]
 8008138:	f021 0104 	bic.w	r1, r1, #4
 800813c:	6021      	str	r1, [r4, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d13d      	bne.n	80081be <_printf_i+0x16a>
 8008142:	2d00      	cmp	r5, #0
 8008144:	f040 808e 	bne.w	8008264 <_printf_i+0x210>
 8008148:	4665      	mov	r5, ip
 800814a:	2a08      	cmp	r2, #8
 800814c:	d10b      	bne.n	8008166 <_printf_i+0x112>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	07db      	lsls	r3, r3, #31
 8008152:	d508      	bpl.n	8008166 <_printf_i+0x112>
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	6862      	ldr	r2, [r4, #4]
 8008158:	429a      	cmp	r2, r3
 800815a:	bfde      	ittt	le
 800815c:	2330      	movle	r3, #48	; 0x30
 800815e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008162:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008166:	ebac 0305 	sub.w	r3, ip, r5
 800816a:	6123      	str	r3, [r4, #16]
 800816c:	f8cd 8000 	str.w	r8, [sp]
 8008170:	463b      	mov	r3, r7
 8008172:	aa03      	add	r2, sp, #12
 8008174:	4621      	mov	r1, r4
 8008176:	4630      	mov	r0, r6
 8008178:	f7ff fef6 	bl	8007f68 <_printf_common>
 800817c:	3001      	adds	r0, #1
 800817e:	d14d      	bne.n	800821c <_printf_i+0x1c8>
 8008180:	f04f 30ff 	mov.w	r0, #4294967295
 8008184:	b005      	add	sp, #20
 8008186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800818a:	4839      	ldr	r0, [pc, #228]	; (8008270 <_printf_i+0x21c>)
 800818c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008190:	6813      	ldr	r3, [r2, #0]
 8008192:	6821      	ldr	r1, [r4, #0]
 8008194:	1d1d      	adds	r5, r3, #4
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6015      	str	r5, [r2, #0]
 800819a:	060a      	lsls	r2, r1, #24
 800819c:	d50b      	bpl.n	80081b6 <_printf_i+0x162>
 800819e:	07ca      	lsls	r2, r1, #31
 80081a0:	bf44      	itt	mi
 80081a2:	f041 0120 	orrmi.w	r1, r1, #32
 80081a6:	6021      	strmi	r1, [r4, #0]
 80081a8:	b91b      	cbnz	r3, 80081b2 <_printf_i+0x15e>
 80081aa:	6822      	ldr	r2, [r4, #0]
 80081ac:	f022 0220 	bic.w	r2, r2, #32
 80081b0:	6022      	str	r2, [r4, #0]
 80081b2:	2210      	movs	r2, #16
 80081b4:	e7b7      	b.n	8008126 <_printf_i+0xd2>
 80081b6:	064d      	lsls	r5, r1, #25
 80081b8:	bf48      	it	mi
 80081ba:	b29b      	uxthmi	r3, r3
 80081bc:	e7ef      	b.n	800819e <_printf_i+0x14a>
 80081be:	4665      	mov	r5, ip
 80081c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80081c4:	fb02 3311 	mls	r3, r2, r1, r3
 80081c8:	5cc3      	ldrb	r3, [r0, r3]
 80081ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80081ce:	460b      	mov	r3, r1
 80081d0:	2900      	cmp	r1, #0
 80081d2:	d1f5      	bne.n	80081c0 <_printf_i+0x16c>
 80081d4:	e7b9      	b.n	800814a <_printf_i+0xf6>
 80081d6:	6813      	ldr	r3, [r2, #0]
 80081d8:	6825      	ldr	r5, [r4, #0]
 80081da:	6961      	ldr	r1, [r4, #20]
 80081dc:	1d18      	adds	r0, r3, #4
 80081de:	6010      	str	r0, [r2, #0]
 80081e0:	0628      	lsls	r0, r5, #24
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	d501      	bpl.n	80081ea <_printf_i+0x196>
 80081e6:	6019      	str	r1, [r3, #0]
 80081e8:	e002      	b.n	80081f0 <_printf_i+0x19c>
 80081ea:	066a      	lsls	r2, r5, #25
 80081ec:	d5fb      	bpl.n	80081e6 <_printf_i+0x192>
 80081ee:	8019      	strh	r1, [r3, #0]
 80081f0:	2300      	movs	r3, #0
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	4665      	mov	r5, ip
 80081f6:	e7b9      	b.n	800816c <_printf_i+0x118>
 80081f8:	6813      	ldr	r3, [r2, #0]
 80081fa:	1d19      	adds	r1, r3, #4
 80081fc:	6011      	str	r1, [r2, #0]
 80081fe:	681d      	ldr	r5, [r3, #0]
 8008200:	6862      	ldr	r2, [r4, #4]
 8008202:	2100      	movs	r1, #0
 8008204:	4628      	mov	r0, r5
 8008206:	f7f7 ffeb 	bl	80001e0 <memchr>
 800820a:	b108      	cbz	r0, 8008210 <_printf_i+0x1bc>
 800820c:	1b40      	subs	r0, r0, r5
 800820e:	6060      	str	r0, [r4, #4]
 8008210:	6863      	ldr	r3, [r4, #4]
 8008212:	6123      	str	r3, [r4, #16]
 8008214:	2300      	movs	r3, #0
 8008216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800821a:	e7a7      	b.n	800816c <_printf_i+0x118>
 800821c:	6923      	ldr	r3, [r4, #16]
 800821e:	462a      	mov	r2, r5
 8008220:	4639      	mov	r1, r7
 8008222:	4630      	mov	r0, r6
 8008224:	47c0      	blx	r8
 8008226:	3001      	adds	r0, #1
 8008228:	d0aa      	beq.n	8008180 <_printf_i+0x12c>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	079b      	lsls	r3, r3, #30
 800822e:	d413      	bmi.n	8008258 <_printf_i+0x204>
 8008230:	68e0      	ldr	r0, [r4, #12]
 8008232:	9b03      	ldr	r3, [sp, #12]
 8008234:	4298      	cmp	r0, r3
 8008236:	bfb8      	it	lt
 8008238:	4618      	movlt	r0, r3
 800823a:	e7a3      	b.n	8008184 <_printf_i+0x130>
 800823c:	2301      	movs	r3, #1
 800823e:	464a      	mov	r2, r9
 8008240:	4639      	mov	r1, r7
 8008242:	4630      	mov	r0, r6
 8008244:	47c0      	blx	r8
 8008246:	3001      	adds	r0, #1
 8008248:	d09a      	beq.n	8008180 <_printf_i+0x12c>
 800824a:	3501      	adds	r5, #1
 800824c:	68e3      	ldr	r3, [r4, #12]
 800824e:	9a03      	ldr	r2, [sp, #12]
 8008250:	1a9b      	subs	r3, r3, r2
 8008252:	42ab      	cmp	r3, r5
 8008254:	dcf2      	bgt.n	800823c <_printf_i+0x1e8>
 8008256:	e7eb      	b.n	8008230 <_printf_i+0x1dc>
 8008258:	2500      	movs	r5, #0
 800825a:	f104 0919 	add.w	r9, r4, #25
 800825e:	e7f5      	b.n	800824c <_printf_i+0x1f8>
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1ac      	bne.n	80081be <_printf_i+0x16a>
 8008264:	7803      	ldrb	r3, [r0, #0]
 8008266:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800826a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800826e:	e76c      	b.n	800814a <_printf_i+0xf6>
 8008270:	080089e1 	.word	0x080089e1
 8008274:	080089f2 	.word	0x080089f2

08008278 <_sbrk_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	4c06      	ldr	r4, [pc, #24]	; (8008294 <_sbrk_r+0x1c>)
 800827c:	2300      	movs	r3, #0
 800827e:	4605      	mov	r5, r0
 8008280:	4608      	mov	r0, r1
 8008282:	6023      	str	r3, [r4, #0]
 8008284:	f7ff fac6 	bl	8007814 <_sbrk>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d102      	bne.n	8008292 <_sbrk_r+0x1a>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	b103      	cbz	r3, 8008292 <_sbrk_r+0x1a>
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	200008a0 	.word	0x200008a0

08008298 <__sread>:
 8008298:	b510      	push	{r4, lr}
 800829a:	460c      	mov	r4, r1
 800829c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a0:	f000 fa96 	bl	80087d0 <_read_r>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	bfab      	itete	ge
 80082a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082aa:	89a3      	ldrhlt	r3, [r4, #12]
 80082ac:	181b      	addge	r3, r3, r0
 80082ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082b2:	bfac      	ite	ge
 80082b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80082b6:	81a3      	strhlt	r3, [r4, #12]
 80082b8:	bd10      	pop	{r4, pc}

080082ba <__swrite>:
 80082ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082be:	461f      	mov	r7, r3
 80082c0:	898b      	ldrh	r3, [r1, #12]
 80082c2:	05db      	lsls	r3, r3, #23
 80082c4:	4605      	mov	r5, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	4616      	mov	r6, r2
 80082ca:	d505      	bpl.n	80082d8 <__swrite+0x1e>
 80082cc:	2302      	movs	r3, #2
 80082ce:	2200      	movs	r2, #0
 80082d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d4:	f000 f9b6 	bl	8008644 <_lseek_r>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082e2:	81a3      	strh	r3, [r4, #12]
 80082e4:	4632      	mov	r2, r6
 80082e6:	463b      	mov	r3, r7
 80082e8:	4628      	mov	r0, r5
 80082ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ee:	f000 b869 	b.w	80083c4 <_write_r>

080082f2 <__sseek>:
 80082f2:	b510      	push	{r4, lr}
 80082f4:	460c      	mov	r4, r1
 80082f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082fa:	f000 f9a3 	bl	8008644 <_lseek_r>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	bf15      	itete	ne
 8008304:	6560      	strne	r0, [r4, #84]	; 0x54
 8008306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800830a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800830e:	81a3      	strheq	r3, [r4, #12]
 8008310:	bf18      	it	ne
 8008312:	81a3      	strhne	r3, [r4, #12]
 8008314:	bd10      	pop	{r4, pc}

08008316 <__sclose>:
 8008316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800831a:	f000 b8d3 	b.w	80084c4 <_close_r>
	...

08008320 <__swbuf_r>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	460e      	mov	r6, r1
 8008324:	4614      	mov	r4, r2
 8008326:	4605      	mov	r5, r0
 8008328:	b118      	cbz	r0, 8008332 <__swbuf_r+0x12>
 800832a:	6983      	ldr	r3, [r0, #24]
 800832c:	b90b      	cbnz	r3, 8008332 <__swbuf_r+0x12>
 800832e:	f7ff fbf7 	bl	8007b20 <__sinit>
 8008332:	4b21      	ldr	r3, [pc, #132]	; (80083b8 <__swbuf_r+0x98>)
 8008334:	429c      	cmp	r4, r3
 8008336:	d12a      	bne.n	800838e <__swbuf_r+0x6e>
 8008338:	686c      	ldr	r4, [r5, #4]
 800833a:	69a3      	ldr	r3, [r4, #24]
 800833c:	60a3      	str	r3, [r4, #8]
 800833e:	89a3      	ldrh	r3, [r4, #12]
 8008340:	071a      	lsls	r2, r3, #28
 8008342:	d52e      	bpl.n	80083a2 <__swbuf_r+0x82>
 8008344:	6923      	ldr	r3, [r4, #16]
 8008346:	b363      	cbz	r3, 80083a2 <__swbuf_r+0x82>
 8008348:	6923      	ldr	r3, [r4, #16]
 800834a:	6820      	ldr	r0, [r4, #0]
 800834c:	1ac0      	subs	r0, r0, r3
 800834e:	6963      	ldr	r3, [r4, #20]
 8008350:	b2f6      	uxtb	r6, r6
 8008352:	4283      	cmp	r3, r0
 8008354:	4637      	mov	r7, r6
 8008356:	dc04      	bgt.n	8008362 <__swbuf_r+0x42>
 8008358:	4621      	mov	r1, r4
 800835a:	4628      	mov	r0, r5
 800835c:	f000 f948 	bl	80085f0 <_fflush_r>
 8008360:	bb28      	cbnz	r0, 80083ae <__swbuf_r+0x8e>
 8008362:	68a3      	ldr	r3, [r4, #8]
 8008364:	3b01      	subs	r3, #1
 8008366:	60a3      	str	r3, [r4, #8]
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	6022      	str	r2, [r4, #0]
 800836e:	701e      	strb	r6, [r3, #0]
 8008370:	6963      	ldr	r3, [r4, #20]
 8008372:	3001      	adds	r0, #1
 8008374:	4283      	cmp	r3, r0
 8008376:	d004      	beq.n	8008382 <__swbuf_r+0x62>
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	07db      	lsls	r3, r3, #31
 800837c:	d519      	bpl.n	80083b2 <__swbuf_r+0x92>
 800837e:	2e0a      	cmp	r6, #10
 8008380:	d117      	bne.n	80083b2 <__swbuf_r+0x92>
 8008382:	4621      	mov	r1, r4
 8008384:	4628      	mov	r0, r5
 8008386:	f000 f933 	bl	80085f0 <_fflush_r>
 800838a:	b190      	cbz	r0, 80083b2 <__swbuf_r+0x92>
 800838c:	e00f      	b.n	80083ae <__swbuf_r+0x8e>
 800838e:	4b0b      	ldr	r3, [pc, #44]	; (80083bc <__swbuf_r+0x9c>)
 8008390:	429c      	cmp	r4, r3
 8008392:	d101      	bne.n	8008398 <__swbuf_r+0x78>
 8008394:	68ac      	ldr	r4, [r5, #8]
 8008396:	e7d0      	b.n	800833a <__swbuf_r+0x1a>
 8008398:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <__swbuf_r+0xa0>)
 800839a:	429c      	cmp	r4, r3
 800839c:	bf08      	it	eq
 800839e:	68ec      	ldreq	r4, [r5, #12]
 80083a0:	e7cb      	b.n	800833a <__swbuf_r+0x1a>
 80083a2:	4621      	mov	r1, r4
 80083a4:	4628      	mov	r0, r5
 80083a6:	f000 f81f 	bl	80083e8 <__swsetup_r>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d0cc      	beq.n	8008348 <__swbuf_r+0x28>
 80083ae:	f04f 37ff 	mov.w	r7, #4294967295
 80083b2:	4638      	mov	r0, r7
 80083b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083b6:	bf00      	nop
 80083b8:	08008990 	.word	0x08008990
 80083bc:	080089b0 	.word	0x080089b0
 80083c0:	08008970 	.word	0x08008970

080083c4 <_write_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4c07      	ldr	r4, [pc, #28]	; (80083e4 <_write_r+0x20>)
 80083c8:	4605      	mov	r5, r0
 80083ca:	4608      	mov	r0, r1
 80083cc:	4611      	mov	r1, r2
 80083ce:	2200      	movs	r2, #0
 80083d0:	6022      	str	r2, [r4, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	f7fe fede 	bl	8007194 <_write>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d102      	bne.n	80083e2 <_write_r+0x1e>
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	b103      	cbz	r3, 80083e2 <_write_r+0x1e>
 80083e0:	602b      	str	r3, [r5, #0]
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	200008a0 	.word	0x200008a0

080083e8 <__swsetup_r>:
 80083e8:	4b32      	ldr	r3, [pc, #200]	; (80084b4 <__swsetup_r+0xcc>)
 80083ea:	b570      	push	{r4, r5, r6, lr}
 80083ec:	681d      	ldr	r5, [r3, #0]
 80083ee:	4606      	mov	r6, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	b125      	cbz	r5, 80083fe <__swsetup_r+0x16>
 80083f4:	69ab      	ldr	r3, [r5, #24]
 80083f6:	b913      	cbnz	r3, 80083fe <__swsetup_r+0x16>
 80083f8:	4628      	mov	r0, r5
 80083fa:	f7ff fb91 	bl	8007b20 <__sinit>
 80083fe:	4b2e      	ldr	r3, [pc, #184]	; (80084b8 <__swsetup_r+0xd0>)
 8008400:	429c      	cmp	r4, r3
 8008402:	d10f      	bne.n	8008424 <__swsetup_r+0x3c>
 8008404:	686c      	ldr	r4, [r5, #4]
 8008406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800840a:	b29a      	uxth	r2, r3
 800840c:	0715      	lsls	r5, r2, #28
 800840e:	d42c      	bmi.n	800846a <__swsetup_r+0x82>
 8008410:	06d0      	lsls	r0, r2, #27
 8008412:	d411      	bmi.n	8008438 <__swsetup_r+0x50>
 8008414:	2209      	movs	r2, #9
 8008416:	6032      	str	r2, [r6, #0]
 8008418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	e03e      	b.n	80084a2 <__swsetup_r+0xba>
 8008424:	4b25      	ldr	r3, [pc, #148]	; (80084bc <__swsetup_r+0xd4>)
 8008426:	429c      	cmp	r4, r3
 8008428:	d101      	bne.n	800842e <__swsetup_r+0x46>
 800842a:	68ac      	ldr	r4, [r5, #8]
 800842c:	e7eb      	b.n	8008406 <__swsetup_r+0x1e>
 800842e:	4b24      	ldr	r3, [pc, #144]	; (80084c0 <__swsetup_r+0xd8>)
 8008430:	429c      	cmp	r4, r3
 8008432:	bf08      	it	eq
 8008434:	68ec      	ldreq	r4, [r5, #12]
 8008436:	e7e6      	b.n	8008406 <__swsetup_r+0x1e>
 8008438:	0751      	lsls	r1, r2, #29
 800843a:	d512      	bpl.n	8008462 <__swsetup_r+0x7a>
 800843c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800843e:	b141      	cbz	r1, 8008452 <__swsetup_r+0x6a>
 8008440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008444:	4299      	cmp	r1, r3
 8008446:	d002      	beq.n	800844e <__swsetup_r+0x66>
 8008448:	4630      	mov	r0, r6
 800844a:	f000 f973 	bl	8008734 <_free_r>
 800844e:	2300      	movs	r3, #0
 8008450:	6363      	str	r3, [r4, #52]	; 0x34
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	2300      	movs	r3, #0
 800845c:	6063      	str	r3, [r4, #4]
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f043 0308 	orr.w	r3, r3, #8
 8008468:	81a3      	strh	r3, [r4, #12]
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	b94b      	cbnz	r3, 8008482 <__swsetup_r+0x9a>
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008478:	d003      	beq.n	8008482 <__swsetup_r+0x9a>
 800847a:	4621      	mov	r1, r4
 800847c:	4630      	mov	r0, r6
 800847e:	f000 f917 	bl	80086b0 <__smakebuf_r>
 8008482:	89a2      	ldrh	r2, [r4, #12]
 8008484:	f012 0301 	ands.w	r3, r2, #1
 8008488:	d00c      	beq.n	80084a4 <__swsetup_r+0xbc>
 800848a:	2300      	movs	r3, #0
 800848c:	60a3      	str	r3, [r4, #8]
 800848e:	6963      	ldr	r3, [r4, #20]
 8008490:	425b      	negs	r3, r3
 8008492:	61a3      	str	r3, [r4, #24]
 8008494:	6923      	ldr	r3, [r4, #16]
 8008496:	b953      	cbnz	r3, 80084ae <__swsetup_r+0xc6>
 8008498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800849c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80084a0:	d1ba      	bne.n	8008418 <__swsetup_r+0x30>
 80084a2:	bd70      	pop	{r4, r5, r6, pc}
 80084a4:	0792      	lsls	r2, r2, #30
 80084a6:	bf58      	it	pl
 80084a8:	6963      	ldrpl	r3, [r4, #20]
 80084aa:	60a3      	str	r3, [r4, #8]
 80084ac:	e7f2      	b.n	8008494 <__swsetup_r+0xac>
 80084ae:	2000      	movs	r0, #0
 80084b0:	e7f7      	b.n	80084a2 <__swsetup_r+0xba>
 80084b2:	bf00      	nop
 80084b4:	20000020 	.word	0x20000020
 80084b8:	08008990 	.word	0x08008990
 80084bc:	080089b0 	.word	0x080089b0
 80084c0:	08008970 	.word	0x08008970

080084c4 <_close_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	4c06      	ldr	r4, [pc, #24]	; (80084e0 <_close_r+0x1c>)
 80084c8:	2300      	movs	r3, #0
 80084ca:	4605      	mov	r5, r0
 80084cc:	4608      	mov	r0, r1
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	f7ff f96c 	bl	80077ac <_close>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_close_r+0x1a>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	b103      	cbz	r3, 80084de <_close_r+0x1a>
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	200008a0 	.word	0x200008a0

080084e4 <__sflush_r>:
 80084e4:	898a      	ldrh	r2, [r1, #12]
 80084e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ea:	4605      	mov	r5, r0
 80084ec:	0710      	lsls	r0, r2, #28
 80084ee:	460c      	mov	r4, r1
 80084f0:	d458      	bmi.n	80085a4 <__sflush_r+0xc0>
 80084f2:	684b      	ldr	r3, [r1, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dc05      	bgt.n	8008504 <__sflush_r+0x20>
 80084f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dc02      	bgt.n	8008504 <__sflush_r+0x20>
 80084fe:	2000      	movs	r0, #0
 8008500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008506:	2e00      	cmp	r6, #0
 8008508:	d0f9      	beq.n	80084fe <__sflush_r+0x1a>
 800850a:	2300      	movs	r3, #0
 800850c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008510:	682f      	ldr	r7, [r5, #0]
 8008512:	6a21      	ldr	r1, [r4, #32]
 8008514:	602b      	str	r3, [r5, #0]
 8008516:	d032      	beq.n	800857e <__sflush_r+0x9a>
 8008518:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	075a      	lsls	r2, r3, #29
 800851e:	d505      	bpl.n	800852c <__sflush_r+0x48>
 8008520:	6863      	ldr	r3, [r4, #4]
 8008522:	1ac0      	subs	r0, r0, r3
 8008524:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008526:	b10b      	cbz	r3, 800852c <__sflush_r+0x48>
 8008528:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800852a:	1ac0      	subs	r0, r0, r3
 800852c:	2300      	movs	r3, #0
 800852e:	4602      	mov	r2, r0
 8008530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008532:	6a21      	ldr	r1, [r4, #32]
 8008534:	4628      	mov	r0, r5
 8008536:	47b0      	blx	r6
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	d106      	bne.n	800854c <__sflush_r+0x68>
 800853e:	6829      	ldr	r1, [r5, #0]
 8008540:	291d      	cmp	r1, #29
 8008542:	d848      	bhi.n	80085d6 <__sflush_r+0xf2>
 8008544:	4a29      	ldr	r2, [pc, #164]	; (80085ec <__sflush_r+0x108>)
 8008546:	40ca      	lsrs	r2, r1
 8008548:	07d6      	lsls	r6, r2, #31
 800854a:	d544      	bpl.n	80085d6 <__sflush_r+0xf2>
 800854c:	2200      	movs	r2, #0
 800854e:	6062      	str	r2, [r4, #4]
 8008550:	04d9      	lsls	r1, r3, #19
 8008552:	6922      	ldr	r2, [r4, #16]
 8008554:	6022      	str	r2, [r4, #0]
 8008556:	d504      	bpl.n	8008562 <__sflush_r+0x7e>
 8008558:	1c42      	adds	r2, r0, #1
 800855a:	d101      	bne.n	8008560 <__sflush_r+0x7c>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	b903      	cbnz	r3, 8008562 <__sflush_r+0x7e>
 8008560:	6560      	str	r0, [r4, #84]	; 0x54
 8008562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008564:	602f      	str	r7, [r5, #0]
 8008566:	2900      	cmp	r1, #0
 8008568:	d0c9      	beq.n	80084fe <__sflush_r+0x1a>
 800856a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800856e:	4299      	cmp	r1, r3
 8008570:	d002      	beq.n	8008578 <__sflush_r+0x94>
 8008572:	4628      	mov	r0, r5
 8008574:	f000 f8de 	bl	8008734 <_free_r>
 8008578:	2000      	movs	r0, #0
 800857a:	6360      	str	r0, [r4, #52]	; 0x34
 800857c:	e7c0      	b.n	8008500 <__sflush_r+0x1c>
 800857e:	2301      	movs	r3, #1
 8008580:	4628      	mov	r0, r5
 8008582:	47b0      	blx	r6
 8008584:	1c41      	adds	r1, r0, #1
 8008586:	d1c8      	bne.n	800851a <__sflush_r+0x36>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0c5      	beq.n	800851a <__sflush_r+0x36>
 800858e:	2b1d      	cmp	r3, #29
 8008590:	d001      	beq.n	8008596 <__sflush_r+0xb2>
 8008592:	2b16      	cmp	r3, #22
 8008594:	d101      	bne.n	800859a <__sflush_r+0xb6>
 8008596:	602f      	str	r7, [r5, #0]
 8008598:	e7b1      	b.n	80084fe <__sflush_r+0x1a>
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a0:	81a3      	strh	r3, [r4, #12]
 80085a2:	e7ad      	b.n	8008500 <__sflush_r+0x1c>
 80085a4:	690f      	ldr	r7, [r1, #16]
 80085a6:	2f00      	cmp	r7, #0
 80085a8:	d0a9      	beq.n	80084fe <__sflush_r+0x1a>
 80085aa:	0793      	lsls	r3, r2, #30
 80085ac:	680e      	ldr	r6, [r1, #0]
 80085ae:	bf08      	it	eq
 80085b0:	694b      	ldreq	r3, [r1, #20]
 80085b2:	600f      	str	r7, [r1, #0]
 80085b4:	bf18      	it	ne
 80085b6:	2300      	movne	r3, #0
 80085b8:	eba6 0807 	sub.w	r8, r6, r7
 80085bc:	608b      	str	r3, [r1, #8]
 80085be:	f1b8 0f00 	cmp.w	r8, #0
 80085c2:	dd9c      	ble.n	80084fe <__sflush_r+0x1a>
 80085c4:	4643      	mov	r3, r8
 80085c6:	463a      	mov	r2, r7
 80085c8:	6a21      	ldr	r1, [r4, #32]
 80085ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085cc:	4628      	mov	r0, r5
 80085ce:	47b0      	blx	r6
 80085d0:	2800      	cmp	r0, #0
 80085d2:	dc06      	bgt.n	80085e2 <__sflush_r+0xfe>
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	f04f 30ff 	mov.w	r0, #4294967295
 80085e0:	e78e      	b.n	8008500 <__sflush_r+0x1c>
 80085e2:	4407      	add	r7, r0
 80085e4:	eba8 0800 	sub.w	r8, r8, r0
 80085e8:	e7e9      	b.n	80085be <__sflush_r+0xda>
 80085ea:	bf00      	nop
 80085ec:	20400001 	.word	0x20400001

080085f0 <_fflush_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	690b      	ldr	r3, [r1, #16]
 80085f4:	4605      	mov	r5, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	b1db      	cbz	r3, 8008632 <_fflush_r+0x42>
 80085fa:	b118      	cbz	r0, 8008604 <_fflush_r+0x14>
 80085fc:	6983      	ldr	r3, [r0, #24]
 80085fe:	b90b      	cbnz	r3, 8008604 <_fflush_r+0x14>
 8008600:	f7ff fa8e 	bl	8007b20 <__sinit>
 8008604:	4b0c      	ldr	r3, [pc, #48]	; (8008638 <_fflush_r+0x48>)
 8008606:	429c      	cmp	r4, r3
 8008608:	d109      	bne.n	800861e <_fflush_r+0x2e>
 800860a:	686c      	ldr	r4, [r5, #4]
 800860c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008610:	b17b      	cbz	r3, 8008632 <_fflush_r+0x42>
 8008612:	4621      	mov	r1, r4
 8008614:	4628      	mov	r0, r5
 8008616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800861a:	f7ff bf63 	b.w	80084e4 <__sflush_r>
 800861e:	4b07      	ldr	r3, [pc, #28]	; (800863c <_fflush_r+0x4c>)
 8008620:	429c      	cmp	r4, r3
 8008622:	d101      	bne.n	8008628 <_fflush_r+0x38>
 8008624:	68ac      	ldr	r4, [r5, #8]
 8008626:	e7f1      	b.n	800860c <_fflush_r+0x1c>
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <_fflush_r+0x50>)
 800862a:	429c      	cmp	r4, r3
 800862c:	bf08      	it	eq
 800862e:	68ec      	ldreq	r4, [r5, #12]
 8008630:	e7ec      	b.n	800860c <_fflush_r+0x1c>
 8008632:	2000      	movs	r0, #0
 8008634:	bd38      	pop	{r3, r4, r5, pc}
 8008636:	bf00      	nop
 8008638:	08008990 	.word	0x08008990
 800863c:	080089b0 	.word	0x080089b0
 8008640:	08008970 	.word	0x08008970

08008644 <_lseek_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4c07      	ldr	r4, [pc, #28]	; (8008664 <_lseek_r+0x20>)
 8008648:	4605      	mov	r5, r0
 800864a:	4608      	mov	r0, r1
 800864c:	4611      	mov	r1, r2
 800864e:	2200      	movs	r2, #0
 8008650:	6022      	str	r2, [r4, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	f7ff f8d1 	bl	80077fa <_lseek>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d102      	bne.n	8008662 <_lseek_r+0x1e>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	b103      	cbz	r3, 8008662 <_lseek_r+0x1e>
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	200008a0 	.word	0x200008a0

08008668 <__swhatbuf_r>:
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	460e      	mov	r6, r1
 800866c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008670:	2900      	cmp	r1, #0
 8008672:	b096      	sub	sp, #88	; 0x58
 8008674:	4614      	mov	r4, r2
 8008676:	461d      	mov	r5, r3
 8008678:	da07      	bge.n	800868a <__swhatbuf_r+0x22>
 800867a:	2300      	movs	r3, #0
 800867c:	602b      	str	r3, [r5, #0]
 800867e:	89b3      	ldrh	r3, [r6, #12]
 8008680:	061a      	lsls	r2, r3, #24
 8008682:	d410      	bmi.n	80086a6 <__swhatbuf_r+0x3e>
 8008684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008688:	e00e      	b.n	80086a8 <__swhatbuf_r+0x40>
 800868a:	466a      	mov	r2, sp
 800868c:	f000 f8b2 	bl	80087f4 <_fstat_r>
 8008690:	2800      	cmp	r0, #0
 8008692:	dbf2      	blt.n	800867a <__swhatbuf_r+0x12>
 8008694:	9a01      	ldr	r2, [sp, #4]
 8008696:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800869a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800869e:	425a      	negs	r2, r3
 80086a0:	415a      	adcs	r2, r3
 80086a2:	602a      	str	r2, [r5, #0]
 80086a4:	e7ee      	b.n	8008684 <__swhatbuf_r+0x1c>
 80086a6:	2340      	movs	r3, #64	; 0x40
 80086a8:	2000      	movs	r0, #0
 80086aa:	6023      	str	r3, [r4, #0]
 80086ac:	b016      	add	sp, #88	; 0x58
 80086ae:	bd70      	pop	{r4, r5, r6, pc}

080086b0 <__smakebuf_r>:
 80086b0:	898b      	ldrh	r3, [r1, #12]
 80086b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086b4:	079d      	lsls	r5, r3, #30
 80086b6:	4606      	mov	r6, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	d507      	bpl.n	80086cc <__smakebuf_r+0x1c>
 80086bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	6123      	str	r3, [r4, #16]
 80086c4:	2301      	movs	r3, #1
 80086c6:	6163      	str	r3, [r4, #20]
 80086c8:	b002      	add	sp, #8
 80086ca:	bd70      	pop	{r4, r5, r6, pc}
 80086cc:	ab01      	add	r3, sp, #4
 80086ce:	466a      	mov	r2, sp
 80086d0:	f7ff ffca 	bl	8008668 <__swhatbuf_r>
 80086d4:	9900      	ldr	r1, [sp, #0]
 80086d6:	4605      	mov	r5, r0
 80086d8:	4630      	mov	r0, r6
 80086da:	f7ff faab 	bl	8007c34 <_malloc_r>
 80086de:	b948      	cbnz	r0, 80086f4 <__smakebuf_r+0x44>
 80086e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e4:	059a      	lsls	r2, r3, #22
 80086e6:	d4ef      	bmi.n	80086c8 <__smakebuf_r+0x18>
 80086e8:	f023 0303 	bic.w	r3, r3, #3
 80086ec:	f043 0302 	orr.w	r3, r3, #2
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	e7e3      	b.n	80086bc <__smakebuf_r+0xc>
 80086f4:	4b0d      	ldr	r3, [pc, #52]	; (800872c <__smakebuf_r+0x7c>)
 80086f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	6020      	str	r0, [r4, #0]
 80086fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008700:	81a3      	strh	r3, [r4, #12]
 8008702:	9b00      	ldr	r3, [sp, #0]
 8008704:	6163      	str	r3, [r4, #20]
 8008706:	9b01      	ldr	r3, [sp, #4]
 8008708:	6120      	str	r0, [r4, #16]
 800870a:	b15b      	cbz	r3, 8008724 <__smakebuf_r+0x74>
 800870c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008710:	4630      	mov	r0, r6
 8008712:	f000 f881 	bl	8008818 <_isatty_r>
 8008716:	b128      	cbz	r0, 8008724 <__smakebuf_r+0x74>
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	f023 0303 	bic.w	r3, r3, #3
 800871e:	f043 0301 	orr.w	r3, r3, #1
 8008722:	81a3      	strh	r3, [r4, #12]
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	431d      	orrs	r5, r3
 8008728:	81a5      	strh	r5, [r4, #12]
 800872a:	e7cd      	b.n	80086c8 <__smakebuf_r+0x18>
 800872c:	08007ae9 	.word	0x08007ae9

08008730 <__malloc_lock>:
 8008730:	4770      	bx	lr

08008732 <__malloc_unlock>:
 8008732:	4770      	bx	lr

08008734 <_free_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4605      	mov	r5, r0
 8008738:	2900      	cmp	r1, #0
 800873a:	d045      	beq.n	80087c8 <_free_r+0x94>
 800873c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008740:	1f0c      	subs	r4, r1, #4
 8008742:	2b00      	cmp	r3, #0
 8008744:	bfb8      	it	lt
 8008746:	18e4      	addlt	r4, r4, r3
 8008748:	f7ff fff2 	bl	8008730 <__malloc_lock>
 800874c:	4a1f      	ldr	r2, [pc, #124]	; (80087cc <_free_r+0x98>)
 800874e:	6813      	ldr	r3, [r2, #0]
 8008750:	4610      	mov	r0, r2
 8008752:	b933      	cbnz	r3, 8008762 <_free_r+0x2e>
 8008754:	6063      	str	r3, [r4, #4]
 8008756:	6014      	str	r4, [r2, #0]
 8008758:	4628      	mov	r0, r5
 800875a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875e:	f7ff bfe8 	b.w	8008732 <__malloc_unlock>
 8008762:	42a3      	cmp	r3, r4
 8008764:	d90c      	bls.n	8008780 <_free_r+0x4c>
 8008766:	6821      	ldr	r1, [r4, #0]
 8008768:	1862      	adds	r2, r4, r1
 800876a:	4293      	cmp	r3, r2
 800876c:	bf04      	itt	eq
 800876e:	681a      	ldreq	r2, [r3, #0]
 8008770:	685b      	ldreq	r3, [r3, #4]
 8008772:	6063      	str	r3, [r4, #4]
 8008774:	bf04      	itt	eq
 8008776:	1852      	addeq	r2, r2, r1
 8008778:	6022      	streq	r2, [r4, #0]
 800877a:	6004      	str	r4, [r0, #0]
 800877c:	e7ec      	b.n	8008758 <_free_r+0x24>
 800877e:	4613      	mov	r3, r2
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	b10a      	cbz	r2, 8008788 <_free_r+0x54>
 8008784:	42a2      	cmp	r2, r4
 8008786:	d9fa      	bls.n	800877e <_free_r+0x4a>
 8008788:	6819      	ldr	r1, [r3, #0]
 800878a:	1858      	adds	r0, r3, r1
 800878c:	42a0      	cmp	r0, r4
 800878e:	d10b      	bne.n	80087a8 <_free_r+0x74>
 8008790:	6820      	ldr	r0, [r4, #0]
 8008792:	4401      	add	r1, r0
 8008794:	1858      	adds	r0, r3, r1
 8008796:	4282      	cmp	r2, r0
 8008798:	6019      	str	r1, [r3, #0]
 800879a:	d1dd      	bne.n	8008758 <_free_r+0x24>
 800879c:	6810      	ldr	r0, [r2, #0]
 800879e:	6852      	ldr	r2, [r2, #4]
 80087a0:	605a      	str	r2, [r3, #4]
 80087a2:	4401      	add	r1, r0
 80087a4:	6019      	str	r1, [r3, #0]
 80087a6:	e7d7      	b.n	8008758 <_free_r+0x24>
 80087a8:	d902      	bls.n	80087b0 <_free_r+0x7c>
 80087aa:	230c      	movs	r3, #12
 80087ac:	602b      	str	r3, [r5, #0]
 80087ae:	e7d3      	b.n	8008758 <_free_r+0x24>
 80087b0:	6820      	ldr	r0, [r4, #0]
 80087b2:	1821      	adds	r1, r4, r0
 80087b4:	428a      	cmp	r2, r1
 80087b6:	bf04      	itt	eq
 80087b8:	6811      	ldreq	r1, [r2, #0]
 80087ba:	6852      	ldreq	r2, [r2, #4]
 80087bc:	6062      	str	r2, [r4, #4]
 80087be:	bf04      	itt	eq
 80087c0:	1809      	addeq	r1, r1, r0
 80087c2:	6021      	streq	r1, [r4, #0]
 80087c4:	605c      	str	r4, [r3, #4]
 80087c6:	e7c7      	b.n	8008758 <_free_r+0x24>
 80087c8:	bd38      	pop	{r3, r4, r5, pc}
 80087ca:	bf00      	nop
 80087cc:	200000d4 	.word	0x200000d4

080087d0 <_read_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	4c07      	ldr	r4, [pc, #28]	; (80087f0 <_read_r+0x20>)
 80087d4:	4605      	mov	r5, r0
 80087d6:	4608      	mov	r0, r1
 80087d8:	4611      	mov	r1, r2
 80087da:	2200      	movs	r2, #0
 80087dc:	6022      	str	r2, [r4, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	f7fe ffc7 	bl	8007772 <_read>
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	d102      	bne.n	80087ee <_read_r+0x1e>
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	b103      	cbz	r3, 80087ee <_read_r+0x1e>
 80087ec:	602b      	str	r3, [r5, #0]
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	200008a0 	.word	0x200008a0

080087f4 <_fstat_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	4c07      	ldr	r4, [pc, #28]	; (8008814 <_fstat_r+0x20>)
 80087f8:	2300      	movs	r3, #0
 80087fa:	4605      	mov	r5, r0
 80087fc:	4608      	mov	r0, r1
 80087fe:	4611      	mov	r1, r2
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	f7fe ffdf 	bl	80077c4 <_fstat>
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d102      	bne.n	8008810 <_fstat_r+0x1c>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	b103      	cbz	r3, 8008810 <_fstat_r+0x1c>
 800880e:	602b      	str	r3, [r5, #0]
 8008810:	bd38      	pop	{r3, r4, r5, pc}
 8008812:	bf00      	nop
 8008814:	200008a0 	.word	0x200008a0

08008818 <_isatty_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4c06      	ldr	r4, [pc, #24]	; (8008834 <_isatty_r+0x1c>)
 800881c:	2300      	movs	r3, #0
 800881e:	4605      	mov	r5, r0
 8008820:	4608      	mov	r0, r1
 8008822:	6023      	str	r3, [r4, #0]
 8008824:	f7fe ffde 	bl	80077e4 <_isatty>
 8008828:	1c43      	adds	r3, r0, #1
 800882a:	d102      	bne.n	8008832 <_isatty_r+0x1a>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	b103      	cbz	r3, 8008832 <_isatty_r+0x1a>
 8008830:	602b      	str	r3, [r5, #0]
 8008832:	bd38      	pop	{r3, r4, r5, pc}
 8008834:	200008a0 	.word	0x200008a0

08008838 <_init>:
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883a:	bf00      	nop
 800883c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883e:	bc08      	pop	{r3}
 8008840:	469e      	mov	lr, r3
 8008842:	4770      	bx	lr

08008844 <_fini>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	bf00      	nop
 8008848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884a:	bc08      	pop	{r3}
 800884c:	469e      	mov	lr, r3
 800884e:	4770      	bx	lr
